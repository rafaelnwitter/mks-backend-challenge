var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.426,1,2.298]],["body/modules/AppModule.html",[0,1.804,1,4.406,2,1.476,3,2.241,4,2.606,5,2.606,6,3.635,7,0.025,8,3.635,9,3.635,10,3.081,11,2.645,12,1.878,13,1.723,14,0.237,15,0.237,16,0.209,17,3.078,18,2.645,19,0.712,20,3.078,21,2.295,22,2.295,23,1.591,24,3.078,25,3.078,26,2.606,27,3.078,28,0.662,29,3.078,30,3.078,31,3.078,32,3.078,33,6.122,34,3.078,35,4.335,36,3.078,37,3.078,38,3.078,39,3.078,40,3.078,41,2.295,42,3.078,43,3.078,44,2.606,45,1.476,46,2.063,47,0.237,48,0.13,49,0.016,50,0.016]],["title/controllers/AuthenticationController.html",[51,1.772,52,2.298]],["body/controllers/AuthenticationController.html",[7,0.025,13,1.074,14,0.148,15,0.148,16,0.13,19,0.679,28,0.413,45,0.92,47,0.148,48,0.081,49,0.011,50,0.011,51,0.992,52,2.038,53,1.624,54,1.43,55,1.624,56,0.287,57,1.265,58,3.041,59,2.489,60,3.041,61,3.041,62,1.855,63,2.575,64,1.918,65,3.675,66,2.247,67,1.918,68,1.231,69,1.918,70,1.822,71,1.314,72,0.747,73,1.704,74,3.405,75,1.95,76,1.918,77,1.918,78,1.918,79,2.532,80,1.918,81,2.267,82,1.918,83,1.918,84,1.918,85,1.918,86,1.918,87,1.918,88,1.918,89,1.624,90,2.622,91,3.041,92,1.918,93,2.575,94,0.992,95,1.43,96,1.624,97,1.624,98,1.918,99,1.43,100,1.43,101,1.624,102,1.953,103,1.43,104,1.624,105,1.918,106,1.17,107,1.918,108,1.17,109,3.041,110,1.624,111,3.041,112,1.17,113,1.918,114,1.572,115,1.286,116,1.286,117,1.918,118,1.286,119,1.918,120,1.918,121,1.624,122,1.918,123,1.918,124,0.92,125,1.703,126,1.703,127,1.918,128,1.788,129,1.918,130,1.918,131,1.918,132,1.918,133,2.423,134,4.298,135,1.918,136,3.041,137,3.205,138,3.041,139,3.041,140,1.624,141,3.041,142,1.918,143,1.671,144,1.918,145,3.041,146,1.286,147,1.43,148,1.918,149,2.038,150,1.918,151,1.918,152,2.575,153,1.918,154,1.624,155,1.43,156,1.918,157,1.918,158,1.918,159,1.918,160,1.918]],["title/modules/AuthenticationModule.html",[0,1.426,6,2.091]],["body/modules/AuthenticationModule.html",[0,1.638,2,1.291,3,2.036,6,3.911,7,0.025,10,2.945,11,2.403,12,1.643,13,1.508,14,0.207,15,0.207,16,0.183,18,3.126,19,0.728,22,3.821,23,1.392,26,2.28,28,0.58,41,2.008,45,1.888,46,2.64,47,0.207,48,0.113,49,0.014,50,0.014,52,3.121,59,1.201,102,2.945,103,2.008,161,2.28,162,2.692,163,2.28,164,3.475,165,3.475,166,2.692,167,3.938,168,2.28,169,2.28,170,2.008,171,3.335,172,2.692,173,2.692,174,3.938,175,1.291,176,2.692,177,2.692,178,2.008,179,3.589,180,2.692,181,2.692,182,3.335,183,3.335,184,2.28,185,2.692,186,2.692,187,2.692,188,2.692,189,2.692,190,2.28,191,2.28,192,2.692,193,2.28,194,2.692]],["title/injectables/AuthenticationService.html",[102,1.772,195,0.689]],["body/injectables/AuthenticationService.html",[7,0.025,14,0.108,15,0.108,16,0.096,19,0.559,23,0.729,28,0.303,44,2.002,47,0.108,48,0.059,49,0.008,50,0.008,55,1.193,56,0.211,57,0.983,59,2.229,62,0.86,63,2.002,68,1.263,70,1.781,71,1.284,72,0.686,73,1.666,75,1.906,89,2.002,90,2.181,93,2.002,94,1.222,102,1.222,104,1.193,114,1.794,115,0.945,124,1.133,125,2.414,126,1.71,128,1.794,133,2.742,137,2.277,143,1.187,146,2.67,149,2.67,154,2.002,155,1.763,178,1.051,179,2.795,190,2.002,193,2.002,195,0.475,196,0.548,197,1.193,198,5.032,199,2.364,200,3.575,201,2.364,202,2.364,203,2.364,204,3.054,205,1.409,206,4.581,207,1.409,208,2.364,209,1.951,210,4.311,211,1.409,212,1.222,213,1.409,214,2.364,215,1.943,216,1.409,217,3.215,218,2.364,219,1.409,220,2.364,221,1.409,222,1.409,223,1.409,224,4.311,225,1.409,226,3.373,227,1.193,228,1.763,229,2.002,230,1.051,231,1.193,232,1.409,233,2.277,234,3.054,235,2.364,236,2.364,237,2.364,238,3.983,239,3.983,240,3.983,241,3.054,242,1.409,243,1.409,244,1.409,245,1.051,246,2.364,247,2.364,248,1.409,249,0.729,250,1.409,251,2.364,252,2.364,253,1.409,254,1.409,255,2.666,256,2.396,257,1.409,258,1.193,259,3.054,260,1.409,261,1.409,262,3.054,263,1.409,264,1.409,265,1.409,266,2.364,267,2.364,268,2.364,269,1.193,270,2.364]],["title/classes/CreateMovieDto.html",[48,0.144,271,1.919]],["body/classes/CreateMovieDto.html",[7,0.024,14,0.294,15,0.294,16,0.259,19,0.444,47,0.294,48,0.211,49,0.018,50,0.018,56,0.571,66,2.688,68,1.473,71,1.572,72,0.84,209,2.164,271,2.81,272,1.829,273,5.044,274,2.844,275,1.709,276,5.608,277,4.182,278,5.608,279,3.814,280,3.814,281,3.814,282,4.443,283,4.443,284,2.557]],["title/classes/CreateUserDto.html",[48,0.144,285,1.919]],["body/classes/CreateUserDto.html",[7,0.024,14,0.321,15,0.321,16,0.283,47,0.409,48,0.175,49,0.019,50,0.019,56,0.624,68,1.537,71,1.64,72,0.876,209,2.216,212,3.024,249,3.024,272,1.997,275,1.809,285,3.275,286,5.216,287,3.106,288,4.165,289,4.165,290,4.165,291,1.619]],["title/modules/DatabaseModule.html",[0,1.426,8,2.091]],["body/modules/DatabaseModule.html",[0,2.112,2,1.862,7,0.025,8,3.097,14,0.299,15,0.299,16,0.264,18,3.097,19,0.658,22,3.786,23,2.008,28,0.836,41,2.896,47,0.299,48,0.164,49,0.018,50,0.018,72,0.581,179,3.66,182,3.288,183,3.288,184,3.288,249,2.008,292,3.883,293,2.896,294,2.174,295,3.883,296,3.883,297,3.883,298,3.883,299,3.883,300,3.883,301,3.883,302,3.288,303,3.883,304,2.603,305,3.883,306,3.883,307,3.883,308,3.097,309,3.883]],["title/injectables/HttpCacheInterceptor.html",[118,2.298,195,0.689]],["body/injectables/HttpCacheInterceptor.html",[7,0.025,14,0.288,15,0.288,16,0.254,19,0.436,28,0.807,47,0.288,48,0.158,49,0.018,50,0.018,56,0.561,57,2.063,68,0.985,70,1.457,71,1.051,72,0.561,73,1.363,74,2.286,75,1.559,118,3.325,128,2.063,133,2.564,155,3.699,195,0.997,196,1.457,209,1.689,310,3.173,311,1.928,312,5.559,313,4.96,314,4.96,315,5.917,316,3.748,317,3.748,318,4.96,319,5.559,320,3.748,321,3.748,322,3.748,323,3.748,324,3.748]],["title/injectables/JwtAuthenticationGuard.html",[108,2.091,195,0.689]],["body/injectables/JwtAuthenticationGuard.html",[7,0.024,14,0.361,15,0.361,16,0.318,19,0.665,28,1.009,47,0.361,48,0.197,49,0.021,50,0.021,108,3.488,175,2.247,195,1.149,196,1.822,291,1.822,311,1.822,325,3.495,326,3.968,327,3.495,328,3.968]],["title/injectables/JwtRefreshGuard.html",[116,2.298,195,0.689]],["body/injectables/JwtRefreshGuard.html",[7,0.024,14,0.357,15,0.357,16,0.315,19,0.661,28,0.998,47,0.357,48,0.195,49,0.02,50,0.02,62,2.829,116,3.808,146,3.108,175,2.223,195,1.141,196,1.802,291,1.802,311,1.802,325,3.457,327,3.457,328,3.926,329,3.926]],["title/injectables/JwtRefreshTokenStrategy.html",[195,0.689,330,2.556]],["body/injectables/JwtRefreshTokenStrategy.html",[7,0.025,14,0.217,15,0.217,16,0.191,19,0.694,23,1.456,28,0.606,47,0.217,48,0.119,49,0.015,50,0.015,56,0.422,57,1.693,59,2.131,62,3.193,68,1.069,70,1.582,71,1.141,72,0.609,73,1.48,74,3.639,75,1.171,94,1.456,114,2.177,115,1.887,124,1.951,125,2.278,126,2.278,128,1.693,133,1.456,146,1.887,147,3.034,175,1.35,179,3.529,195,0.818,196,1.095,229,2.93,230,2.1,233,3.563,308,1.718,311,1.095,330,3.034,331,4.045,332,2.384,333,3.034,334,2.384,335,4.045,336,2.816,337,4.069,338,2.816,339,2.384,340,3.034,341,1.887,342,3.034,343,3.034,344,1.718,345,2.1,346,2.384,347,2.384,348,2.816,349,2.384,350,2.816,351,2.816,352,2.816,353,2.816,354,2.816]],["title/injectables/JwtStrategy.html",[164,2.091,195,0.689]],["body/injectables/JwtStrategy.html",[7,0.025,14,0.237,15,0.237,16,0.209,19,0.712,23,1.591,28,0.662,47,0.237,48,0.13,49,0.016,50,0.016,56,0.461,57,1.804,59,2.239,68,1.139,70,1.685,71,1.216,72,0.649,73,1.577,74,3.062,75,1.28,94,1.591,114,2.267,115,2.063,124,2.078,125,2.427,126,2.427,128,1.804,164,2.645,175,1.476,179,3.635,191,2.606,195,0.871,196,1.196,229,3.051,230,2.295,233,2.295,311,1.196,333,3.233,334,2.606,335,4.249,339,2.606,340,2.295,341,2.063,342,2.295,343,2.295,344,1.878,345,2.295,346,2.606,347,2.606,349,2.606,355,2.606,356,3.078,357,4.335,358,3.078,359,2.606,360,3.078,361,3.078]],["title/injectables/LocalAuthenticationGuard.html",[106,2.091,195,0.689]],["body/injectables/LocalAuthenticationGuard.html",[7,0.024,14,0.365,15,0.365,16,0.322,19,0.67,28,1.02,47,0.365,48,0.2,49,0.021,50,0.021,106,3.512,175,2.272,195,1.157,196,1.842,311,1.842,327,3.534,362,4.012,363,4.739]],["title/injectables/LocalStrategy.html",[165,2.091,195,0.689]],["body/injectables/LocalStrategy.html",[7,0.025,14,0.259,15,0.259,16,0.228,19,0.69,28,0.725,47,0.259,48,0.142,49,0.017,50,0.017,56,0.504,57,1.92,59,2.348,68,1.212,70,1.794,71,1.294,72,0.691,73,1.678,75,1.401,81,3.441,102,3.168,103,2.511,124,1.614,128,1.401,143,1.309,165,2.815,175,1.614,195,0.927,196,1.309,209,2.087,212,2.386,249,2.928,311,1.309,333,3.441,340,2.511,341,2.257,343,2.511,345,2.511,359,2.85,364,2.85,365,3.367,366,3.367,367,4.614,368,3.367,369,2.85,370,2.511,371,2.511,372,3.367,373,3.367]],["title/classes/LogInDto.html",[48,0.144,79,2.298]],["body/classes/LogInDto.html",[7,0.024,14,0.31,15,0.31,16,0.273,19,0.469,47,0.4,48,0.219,49,0.019,50,0.019,56,0.603,66,2.493,68,1.366,72,0.779,79,3.859,209,2.072,212,2.977,249,2.977,272,1.931,275,1.771,282,4.294,283,3.878,284,2.7,291,1.566,374,3.411,375,4.029,376,4.029,377,3.411,378,4.029,379,4.403,380,3.411,381,3.411]],["title/entities/Movie.html",[382,2.091,383,1.772]],["body/entities/Movie.html",[7,0.025,14,0.247,15,0.247,16,0.217,19,0.519,47,0.247,48,0.135,49,0.016,50,0.016,56,0.668,66,2.795,68,1.531,71,1.438,72,0.873,143,2.266,209,1.889,215,2.155,275,1.519,277,3.824,304,2.147,370,2.389,382,2.72,383,2.651,384,2.712,385,2.651,386,4.935,387,4.342,388,4.935,389,3.204,390,4.342,391,3.204,392,3.204,393,3.204,394,4.459,395,3.204,396,3.204,397,3.775,398,3.204,399,4.459,400,3.204,401,1.794,402,3.204,403,3.204]],["title/controllers/MovieController.html",[51,1.772,404,2.298]],["body/controllers/MovieController.html",[7,0.025,14,0.154,15,0.154,16,0.136,19,0.64,28,0.43,45,0.958,47,0.154,48,0.084,49,0.011,50,0.011,51,1.033,54,1.49,56,0.299,57,1.307,59,2.522,65,2.683,66,2.108,68,1.155,70,1.709,71,1.34,72,0.823,73,1.599,75,1.829,81,2.342,94,2.006,95,2.342,96,4.047,97,1.692,99,4.315,100,1.49,101,1.692,108,1.219,110,1.692,112,1.219,121,1.692,126,1.119,128,1.829,133,1.033,152,4.047,209,1.926,215,0.777,258,2.659,271,2.462,302,2.659,308,1.916,371,1.49,383,2.744,385,3.101,404,2.105,405,1.692,406,2.659,407,2.659,408,3.141,409,2.659,410,1.998,411,1.998,412,1.998,413,1.692,414,1.998,415,1.998,416,1.998,417,1.998,418,3.141,419,3.401,420,1.998,421,3.141,422,3.141,423,3.141,424,1.998,425,3.141,426,3.141,427,1.998,428,1.998,429,1.692,430,2.683,431,1.998,432,1.998,433,1.998,434,1.998,435,1.998,436,2.172,437,1.692,438,1.339,439,2.342,440,1.692,441,1.998,442,1.49,443,3.141,444,3.88,445,1.998,446,1.998,447,1.998,448,1.998,449,1.998,450,3.141,451,1.692,452,1.998,453,1.692,454,1.998,455,1.998,456,1.998,457,1.998,458,1.998,459,1.998,460,1.998,461,1.998,462,1.998,463,1.998,464,1.998]],["title/interfaces/MovieCountResult.html",[465,1.332,466,2.556]],["body/interfaces/MovieCountResult.html",[7,0.024,14,0.361,15,0.361,16,0.318,47,0.361,49,0.021,50,0.021,56,0.702,72,0.702,215,2.399,275,1.948,291,1.822,465,1.822,466,4.602,467,2.624,468,3.968,469,6.425]],["title/modules/MovieModule.html",[0,1.426,9,2.091]],["body/modules/MovieModule.html",[0,2.023,2,1.744,3,2.514,7,0.025,9,3.969,10,3.241,11,2.966,12,2.219,13,2.036,14,0.28,15,0.28,16,0.247,18,2.966,19,0.73,28,0.783,45,2.331,46,3.259,47,0.28,48,0.153,49,0.017,50,0.017,293,2.712,294,2.036,383,1.88,404,3.671,436,3.511,437,3.079,442,2.712,470,3.079,471,3.637,472,3.079,473,3.637,474,3.637,475,3.637,476,3.637]],["title/classes/MovieNotFoundException.html",[48,0.144,477,2.298]],["body/classes/MovieNotFoundException.html",[7,0.024,14,0.33,15,0.33,16,0.291,19,0.499,28,0.923,47,0.33,48,0.181,49,0.019,50,0.019,68,1.127,70,1.668,71,1.203,72,0.642,73,1.56,124,2.057,215,2.305,272,2.057,291,1.668,311,2.104,385,2.218,453,4.583,477,3.975,478,3.632,479,5.93,480,5.412,481,4.29,482,4.29,483,4.29]],["title/interfaces/MovieSearchBody.html",[465,1.332,484,2.298]],["body/interfaces/MovieSearchBody.html",[7,0.024,14,0.328,15,0.328,16,0.29,47,0.328,49,0.019,50,0.019,56,0.639,72,0.886,209,2.015,215,2.545,275,1.838,277,4.635,291,1.659,385,3.214,387,5.263,465,1.659,467,2.39,484,3.966,485,3.614]],["title/interfaces/MovieSearchResult.html",[465,1.332,486,2.556]],["body/interfaces/MovieSearchResult.html",[7,0.025,14,0.337,15,0.337,16,0.297,19,0.509,47,0.337,49,0.02,50,0.02,56,0.655,72,0.896,215,1.701,275,1.867,291,1.701,465,1.701,467,2.451,484,2.934,486,4.463,487,3.706,488,6.459,489,5.481,490,4.377,491,4.377,492,3.264,493,4.377]],["title/injectables/MovieService.html",[195,0.689,436,1.919]],["body/injectables/MovieService.html",[7,0.025,14,0.172,15,0.172,16,0.152,19,0.681,21,1.668,28,0.482,47,0.172,48,0.094,49,0.012,50,0.012,56,0.335,57,1.426,59,2.61,68,1.323,70,1.958,71,1.412,72,0.754,73,1.832,75,1.944,94,1.772,124,1.644,125,1.253,128,1.734,133,2.155,143,2.218,149,3.376,195,0.689,196,0.87,215,2.274,255,2.557,256,2.298,271,2.616,294,1.253,383,2.86,385,2.604,386,2.903,401,1.253,406,2.903,407,2.903,409,2.903,413,2.903,429,2.903,430,2.85,436,1.92,438,1.5,439,2.557,440,1.894,442,1.668,477,1.5,494,1.894,495,3.428,496,2.237,497,3.484,498,2.237,499,3.428,500,3.428,501,2.237,502,2.237,503,3.428,504,2.237,505,2.237,506,1.894,507,2.237,508,2.237,509,2.237,510,2.237,511,3.428,512,2.237,513,2.237,514,2.237,515,4.168,516,2.237,517,2.237,518,3.428,519,2.237,520,2.237,521,2.237,522,2.237]],["title/classes/RegisterDto.html",[48,0.144,90,2.091]],["body/classes/RegisterDto.html",[7,0.025,14,0.226,15,0.226,16,0.199,19,0.487,47,0.322,48,0.176,49,0.015,50,0.015,56,0.439,66,2.703,68,1.481,71,1.581,72,0.844,90,2.981,112,1.788,209,2.171,212,2.526,249,2.526,272,1.405,275,1.426,282,3.975,283,3.975,284,1.965,291,1.139,308,2.555,377,2.482,379,4.137,380,2.482,381,2.482,419,3.275,523,2.482,524,4.886,525,4.137,526,2.931,527,2.931,528,4.187,529,4.187,530,4.187,531,2.931,532,2.931,533,2.931,534,2.931,535,2.931,536,4.187,537,4.187,538,4.187,539,4.187,540,4.886,541,4.187,542,2.931,543,2.931,544,2.931,545,4.886,546,2.931,547,2.931,548,2.931,549,2.931]],["title/interfaces/RequestWithUser.html",[65,2.091,465,1.332]],["body/interfaces/RequestWithUser.html",[7,0.024,14,0.335,15,0.335,16,0.296,19,0.636,47,0.335,49,0.02,50,0.02,56,0.652,65,3.643,72,0.652,74,3.643,143,2.625,275,1.861,291,1.693,311,2.124,344,2.657,370,3.247,465,1.693,467,2.438,550,3.687]],["title/interfaces/TokenPayload.html",[229,1.919,465,1.332]],["body/interfaces/TokenPayload.html",[7,0.024,14,0.365,15,0.365,16,0.322,47,0.365,49,0.021,50,0.021,56,0.71,72,0.71,215,2.41,217,4.809,229,3.223,275,1.961,465,1.842,467,2.653,551,4.012]],["title/classes/UpdateMovieDto.html",[48,0.144,430,2.091]],["body/classes/UpdateMovieDto.html",[7,0.024,14,0.361,15,0.361,16,0.318,19,0.665,47,0.361,48,0.197,49,0.021,50,0.021,271,2.624,272,2.247,274,3.495,311,1.822,430,3.488,439,3.495,552,3.968,553,3.968,554,3.495,555,3.495,556,3.142,557,4.687]],["title/classes/UpdateUserDto.html",[48,0.144,558,2.556]],["body/classes/UpdateUserDto.html",[7,0.024,14,0.361,15,0.361,16,0.318,19,0.665,47,0.361,48,0.197,49,0.021,50,0.021,272,2.247,285,2.624,287,3.495,311,1.822,553,3.968,554,3.495,555,3.495,556,3.142,558,4.264,559,3.968,560,3.495,561,4.687]],["title/entities/User.html",[143,1.332,382,2.091]],["body/entities/User.html",[7,0.025,14,0.192,15,0.192,16,0.169,19,0.519,47,0.192,48,0.157,49,0.013,50,0.013,56,0.374,66,2.753,68,1.509,71,1.249,72,0.86,73,2.147,143,1.448,198,5.683,209,2.092,212,2.304,215,1.448,249,2.304,275,1.269,304,1.674,308,3.504,382,2.273,383,2.969,385,2.304,388,4.998,390,3.773,397,3.154,401,1.398,525,3.773,562,2.114,563,3.773,564,4.456,565,4.94,566,3.725,567,2.497,568,2.497,569,2.497,570,2.497,571,2.497,572,2.497,573,2.497,574,2.497,575,2.497,576,3.725,577,4.456,578,2.114,579,2.497,580,2.497,581,4.94]],["title/controllers/UsersController.html",[51,1.772,582,2.298]],["body/controllers/UsersController.html",[7,0.025,14,0.276,15,0.276,16,0.244,19,0.706,28,0.773,45,1.722,47,0.276,48,0.151,49,0.017,50,0.017,51,1.857,54,2.678,56,0.538,57,2.006,66,1.722,68,0.944,70,1.396,71,1.007,72,0.538,73,1.306,75,1.494,95,2.678,99,3.595,100,2.678,106,2.191,112,2.191,114,2.264,126,2.011,128,1.494,140,3.041,285,3.498,371,2.678,438,2.407,556,3.232,560,2.678,582,3.232,583,3.041,584,3.591,585,3.591,586,3.591,587,3.591,588,3.041,589,4.821,590,4.821,591,3.591,592,3.591,593,3.591,594,3.591]],["title/modules/UsersModule.html",[0,1.426,10,1.772]],["body/modules/UsersModule.html",[0,2.046,2,1.774,3,2.542,7,0.025,10,3.324,11,3,12,2.257,13,2.072,14,0.285,15,0.285,16,0.251,18,2.257,19,0.713,28,0.796,45,2.358,46,3.296,47,0.285,48,0.156,49,0.018,50,0.018,114,2.819,143,1.438,293,2.759,294,2.072,582,3.702,588,3.132,595,3.132,596,3.132,597,3.132,598,3.699,599,4.917,600,3.699,601,3.132,602,3.699]],["title/injectables/UsersService.html",[114,1.426,195,0.689]],["body/injectables/UsersService.html",[7,0.025,14,0.145,15,0.145,16,0.128,19,0.576,28,0.407,47,0.145,48,0.08,49,0.011,50,0.011,56,0.283,57,1.25,59,2.819,68,1.364,70,2.019,71,1.456,72,0.778,73,1.889,75,2.06,94,2.404,114,1.25,124,1.44,125,1.058,128,1.935,133,2.56,143,2.258,147,2.788,149,3.613,195,0.604,196,0.734,209,1.891,212,1.933,215,2.298,217,3.873,226,3.166,227,1.599,228,2.24,245,1.408,255,2.24,256,2.013,269,1.599,285,2.386,294,1.058,385,1.933,401,1.058,438,1.266,451,2.543,497,3.178,506,1.599,556,2.013,560,1.408,563,3.166,601,1.599,603,1.599,604,3.003,605,3.003,606,3.003,607,3.003,608,3.003,609,1.889,610,1.889,611,3.003,612,3.003,613,1.889,614,1.889,615,3.003,616,1.889,617,3.003,618,1.889,619,3.003,620,1.889,621,3.003,622,1.889,623,3.003,624,1.889,625,1.889,626,3.003,627,3.003,628,3.003,629,1.889,630,1.889,631,1.889,632,3.003,633,1.889,634,3.003,635,1.889,636,1.889]],["title/coverage.html",[637,3.484]],["body/coverage.html",[7,0.025,16,0.167,48,0.241,49,0.013,50,0.013,51,2.284,52,1.65,53,2.084,62,1.502,65,1.502,72,0.369,79,1.65,90,1.502,102,1.273,106,1.502,108,1.502,114,1.024,116,1.65,118,1.65,143,0.957,164,1.502,165,1.502,195,1.23,197,2.084,229,1.378,256,1.65,271,1.378,273,2.084,274,2.748,285,1.378,286,2.084,287,2.748,310,2.084,325,2.748,326,2.084,329,2.084,330,1.835,331,2.084,332,2.084,355,2.084,362,2.084,364,2.084,374,2.084,382,2.248,383,1.273,384,2.084,404,1.65,405,2.084,430,1.502,436,1.378,465,2.042,466,1.835,468,2.084,477,1.65,478,2.084,484,1.65,485,2.084,486,1.835,487,2.084,494,2.084,523,2.084,550,2.084,551,2.084,552,2.084,558,1.835,559,2.084,562,2.084,582,1.65,583,2.084,603,2.084,637,1.835,638,2.461,639,2.461,640,2.461,641,6.863,642,4.418,643,2.461,644,2.084,645,2.461,646,2.084,647,6.01,648,4.905,649,5.715,650,2.084,651,2.461,652,2.084,653,4.418,654,2.461,655,2.461,656,2.461,657,2.461]],["title/dependencies.html",[3,2.13,658,2.427]],["body/dependencies.html",[3,1.688,7,0.025,21,2.434,23,1.688,28,0.703,48,0.19,49,0.016,50,0.016,112,1.992,137,3.369,168,3.825,169,3.825,170,2.434,171,2.764,175,1.565,178,2.434,228,2.434,284,2.188,294,1.828,341,3.472,342,3.369,344,1.992,369,3.825,401,1.828,554,2.434,555,2.434,578,2.764,659,3.264,660,3.264,661,3.264,662,5.869,663,3.264,664,3.264,665,3.264,666,3.264,667,3.264,668,3.264,669,3.264,670,3.264,671,3.264,672,4.517,673,3.264,674,3.264,675,3.264,676,3.264,677,3.264,678,3.264,679,3.264,680,3.264,681,3.264,682,3.264,683,3.264,684,3.264,685,3.264,686,3.264,687,3.264,688,3.264,689,3.264,690,3.264,691,3.264,692,3.264,693,3.264,694,3.264,695,3.264]],["title/miscellaneous/enumerations.html",[696,1.605,697,3.489]],["body/miscellaneous/enumerations.html",[7,0.023,49,0.022,50,0.022,56,0.76,231,5.078,492,3.784,696,2.841,697,4.296,698,5.074,699,5.074,700,5.074,701,5.074]],["title/miscellaneous/functions.html",[696,1.605,702,3.489]],["body/miscellaneous/functions.html",[7,0.022,49,0.022,50,0.022,56,0.773,650,4.373,652,5.446,696,2.892,702,4.373,703,5.165]],["title/index.html",[56,0.429,704,2.866,705,2.866]],["body/index.html",[7,0.025,49,0.015,50,0.015,170,2.247,344,1.838,401,1.687,419,2.02,497,2.247,637,2.247,706,3.013,707,3.013,708,3.013,709,4.271,710,3.013,711,3.013,712,4.271,713,3.013,714,3.013,715,4.271,716,3.013,717,3.013,718,3.013,719,3.013,720,3.013,721,3.013,722,3.013,723,2.551,724,3.013,725,3.013,726,3.013,727,3.013,728,3.013,729,2.551,730,3.013,731,3.013,732,2.551,733,3.013,734,3.013,735,3.013,736,3.013,737,3.013,738,3.013,739,6.217,740,5.698,741,3.013,742,3.013,743,3.013,744,3.013,745,3.013,746,3.013,747,3.013,748,3.013,749,3.013,750,3.013,751,3.013,752,3.013,753,4.271,754,3.013,755,3.013,756,3.013,757,3.013,758,3.013,759,3.013,760,3.013,761,3.013,762,6.085,763,3.013,764,3.013,765,3.013,766,5.917,767,3.013,768,3.013,769,4.271,770,3.013,771,3.013,772,3.013,773,3.013,774,4.271,775,4.271,776,3.013,777,3.013,778,3.013]],["title/modules.html",[2,2.24]],["body/modules.html",[1,3.142,2,2.247,6,2.859,7,0.021,8,2.859,9,2.859,10,2.423,49,0.021,50,0.021,779,6.425,780,6.425,781,6.425,782,6.588,783,4.687,784,4.687]],["title/overview.html",[785,3.955]],["body/overview.html",[1,4.393,2,1.608,3,2.379,4,2.839,5,2.839,6,4.037,7,0.024,8,3.205,9,3.824,10,3.301,11,2.807,12,2.046,13,1.878,45,1.608,49,0.017,50,0.017,102,2.716,114,2.608,161,2.839,163,2.839,164,3.205,165,3.205,196,1.304,245,2.501,272,1.608,304,2.248,436,2.942,467,1.878,470,2.839,472,2.839,595,2.839,596,2.839,597,2.839,785,2.839,786,4.602,787,3.353,788,3.353,789,3.353]],["title/properties.html",[275,1.404,658,2.427]],["body/properties.html",[7,0.024,49,0.021,50,0.021,275,1.65,419,3.248,723,4.102,729,4.102,732,4.102,790,4.845,791,4.845,792,4.845,793,4.845,794,4.845,795,4.845,796,4.845,797,4.845,798,4.845,799,4.845]],["title/miscellaneous/variables.html",[696,1.605,800,3.489]],["body/miscellaneous/variables.html",[7,0.024,49,0.021,50,0.021,56,0.747,72,0.747,209,1.698,291,1.938,492,3.718,644,4.221,646,5.025,696,2.792,800,4.221,801,4.986,802,4.986]]],"invertedIndex":[["",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"interfaces/MovieCountResult.html":{},"modules/MovieModule.html":{},"classes/MovieNotFoundException.html":{},"interfaces/MovieSearchBody.html":{},"interfaces/MovieSearchResult.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":641,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":791,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":690,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":679,"title":{},"body":{"dependencies.html":{}}}],["0.3.9",{"_index":695,"title":{},"body":{"dependencies.html":{}}}],["0.5.0",{"_index":680,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":678,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":683,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":647,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":649,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":648,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":653,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":654,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":642,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":655,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":643,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":539,"title":{},"body":{"classes/RegisterDto.html":{}}}],["1.0.0",{"_index":685,"title":{},"body":{"dependencies.html":{}}}],["1.0.34",{"_index":674,"title":{},"body":{"dependencies.html":{}}}],["1.1.19",{"_index":660,"title":{},"body":{"dependencies.html":{}}}],["1.4.6",{"_index":682,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":245,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["120",{"_index":188,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["123123123123",{"_index":548,"title":{},"body":{"classes/RegisterDto.html":{}}}],["123123123123'})@isstring()@isnotempty()@matches(/^\\+[1",{"_index":542,"title":{},"body":{"classes/RegisterDto.html":{}}}],["17.1.1",{"_index":661,"title":{},"body":{"dependencies.html":{}}}],["17.1.8",{"_index":671,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":788,"title":{},"body":{"overview.html":{}}}],["2.0.0",{"_index":677,"title":{},"body":{"dependencies.html":{}}}],["2.2.0",{"_index":663,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":421,"title":{},"body":{"controllers/MovieController.html":{}}}],["23505",{"_index":701,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["3",{"_index":787,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":692,"title":{},"body":{"dependencies.html":{}}}],["3.0.6",{"_index":673,"title":{},"body":{"dependencies.html":{}}}],["4.0.0",{"_index":684,"title":{},"body":{"dependencies.html":{}}}],["4.1.0",{"_index":676,"title":{},"body":{"dependencies.html":{}}}],["404",{"_index":425,"title":{},"body":{"controllers/MovieController.html":{}}}],["5",{"_index":786,"title":{},"body":{"overview.html":{}}}],["5.0.0",{"_index":669,"title":{},"body":{"dependencies.html":{}}}],["5.0.1",{"_index":675,"title":{},"body":{"dependencies.html":{}}}],["6.1.1",{"_index":666,"title":{},"body":{"dependencies.html":{}}}],["7",{"_index":789,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":694,"title":{},"body":{"dependencies.html":{}}}],["8.8.0",{"_index":687,"title":{},"body":{"dependencies.html":{}}}],["9.0.0",{"_index":662,"title":{},"body":{"dependencies.html":{}}}],["9.0.1",{"_index":667,"title":{},"body":{"dependencies.html":{}}}],["9]\\\\d{1,14",{"_index":547,"title":{},"body":{"classes/RegisterDto.html":{}}}],["9]\\d{1,14",{"_index":540,"title":{},"body":{"classes/RegisterDto.html":{}}}],["__dirname",{"_index":305,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["accesstokencookie",{"_index":134,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["age=${this.configservice.get",{"_index":241,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["age=0",{"_index":270,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["already",{"_index":257,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["api",{"_index":723,"title":{},"body":{"index.html":{},"properties.html":{}}}],["apibody",{"_index":111,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["apiconflictresponse",{"_index":589,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiokresponse",{"_index":590,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiparam",{"_index":443,"title":{},"body":{"controllers/MovieController.html":{}}}],["apiproperty",{"_index":545,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apiproperty({deprecated",{"_index":527,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apiproperty({description",{"_index":535,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apiresponse",{"_index":444,"title":{},"body":{"controllers/MovieController.html":{}}}],["apitags",{"_index":445,"title":{},"body":{"controllers/MovieController.html":{}}}],["apitags('movies",{"_index":448,"title":{},"body":{"controllers/MovieController.html":{}}}],["app",{"_index":764,"title":{},"body":{"index.html":{}}}],["application",{"_index":757,"title":{},"body":{"index.html":{}}}],["applicationlocal",{"_index":760,"title":{},"body":{"index.html":{}}}],["applications",{"_index":721,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["array",{"_index":493,"title":{},"body":{"interfaces/MovieSearchResult.html":{}}}],["async",{"_index":59,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{}}}],["authenticate",{"_index":58,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["authenticate(@req",{"_index":153,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["authenticate(request",{"_index":64,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["authentication",{"_index":55,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["authentication.controller",{"_index":173,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["authentication.guard",{"_index":110,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/MovieController.html":{}}}],["authentication.guard.ts",{"_index":326,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"coverage.html":{}}}],["authentication.service",{"_index":103,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/LocalStrategy.html":{}}}],["authentication/authentication.module",{"_index":27,"title":{},"body":{"modules/AppModule.html":{}}}],["authentication/guards/jwt",{"_index":441,"title":{},"body":{"controllers/MovieController.html":{}}}],["authentication/guards/localauthentication.guard",{"_index":591,"title":{},"body":{"controllers/UsersController.html":{}}}],["authentication=${token",{"_index":237,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["authenticationcontroller",{"_index":52,"title":{"controllers/AuthenticationController.html":{}},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"coverage.html":{}}}],["authenticationmodule",{"_index":6,"title":{"modules/AuthenticationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules.html":{},"overview.html":{}}}],["authenticationservice",{"_index":102,"title":{"injectables/AuthenticationService.html":{}},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["authguard",{"_index":327,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/LocalAuthenticationGuard.html":{}}}],["authguard('jwt",{"_index":328,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{}}}],["authguard('local",{"_index":363,"title":{},"body":{"injectables/LocalAuthenticationGuard.html":{}}}],["author",{"_index":796,"title":{},"body":{"properties.html":{}}}],["autoloadentities",{"_index":309,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["available",{"_index":784,"title":{},"body":{"modules.html":{}}}],["await",{"_index":149,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{}}}],["azure",{"_index":741,"title":{},"body":{"index.html":{}}}],["backend",{"_index":729,"title":{},"body":{"index.html":{},"properties.html":{}}}],["bcrypt",{"_index":228,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcrypt.compare",{"_index":269,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{}}}],["bcrypt.hash(refreshtoken",{"_index":631,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt.hash(registrationdata.password",{"_index":244,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["body",{"_index":95,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/MovieController.html":{},"controllers/UsersController.html":{}}}],["bootstrap",{"_index":652,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":782,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":779,"title":{},"body":{"modules.html":{}}}],["build",{"_index":753,"title":{},"body":{"index.html":{}}}],["building",{"_index":716,"title":{},"body":{"index.html":{}}}],["cache",{"_index":168,"title":{},"body":{"modules/AuthenticationModule.html":{},"dependencies.html":{}}}],["cache_key_metadata",{"_index":318,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["cacheinterceptor",{"_index":312,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["cachekey",{"_index":319,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["cachemodule",{"_index":172,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["cachemodule.registerasync",{"_index":181,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["catch",{"_index":251,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["checck",{"_index":722,"title":{},"body":{"index.html":{}}}],["check",{"_index":708,"title":{},"body":{"index.html":{}}}],["class",{"_index":48,"title":{"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/MovieNotFoundException.html":{},"classes/RegisterDto.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"classes/MovieNotFoundException.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":272,"title":{},"body":{"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/MovieNotFoundException.html":{},"classes/RegisterDto.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"overview.html":{}}}],["classserializerinterceptor",{"_index":97,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/MovieController.html":{}}}],["cluster_appmodule",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule",{"_index":161,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule_imports",{"_index":162,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["cluster_authenticationmodule_providers",{"_index":163,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_moviemodule",{"_index":470,"title":{},"body":{"modules/MovieModule.html":{},"overview.html":{}}}],["cluster_moviemodule_imports",{"_index":471,"title":{},"body":{"modules/MovieModule.html":{}}}],["cluster_moviemodule_providers",{"_index":472,"title":{},"body":{"modules/MovieModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":595,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":596,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":597,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["column",{"_index":388,"title":{},"body":{"entities/Movie.html":{},"entities/User.html":{}}}],["column({nullable",{"_index":565,"title":{},"body":{"entities/User.html":{}}}],["column({unique",{"_index":568,"title":{},"body":{"entities/User.html":{}}}],["compodoc/compodoc",{"_index":659,"title":{},"body":{"dependencies.html":{}}}],["compose",{"_index":740,"title":{},"body":{"index.html":{}}}],["configmodule",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{}}}],["configmodule.forroot",{"_index":29,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":179,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/DatabaseModule.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('jwt_expiration_time')}s",{"_index":194,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["configservice.get('jwt_refresh_token_secret",{"_index":350,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["configservice.get('jwt_secret",{"_index":191,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('postgres_db",{"_index":303,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('postgres_host",{"_index":297,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('postgres_password",{"_index":301,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('postgres_port",{"_index":298,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('postgres_user",{"_index":300,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('redis_host",{"_index":185,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["configservice.get('redis_port",{"_index":186,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["const",{"_index":133,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":124,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MovieNotFoundException.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{}}}],["constructor(authenticationservice",{"_index":365,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(configservice",{"_index":334,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["constructor(movieid",{"_index":480,"title":{},"body":{"classes/MovieNotFoundException.html":{}}}],["constructor(moviesrepository",{"_index":496,"title":{},"body":{"injectables/MovieService.html":{}}}],["constructor(private",{"_index":371,"title":{},"body":{"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"controllers/UsersController.html":{}}}],["constructor(usersrepository",{"_index":609,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":205,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["container",{"_index":754,"title":{},"body":{"index.html":{}}}],["context",{"_index":317,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["context.gethandler",{"_index":321,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["context.switchtohttp().getrequest",{"_index":322,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["controller",{"_index":51,"title":{"controllers/AuthenticationController.html":{},"controllers/MovieController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AuthenticationController.html":{},"controllers/MovieController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('authentication",{"_index":120,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["controller('movie",{"_index":447,"title":{},"body":{"controllers/MovieController.html":{}}}],["controller('users",{"_index":592,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["cookie",{"_index":137,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"dependencies.html":{}}}],["count",{"_index":469,"title":{},"body":{"interfaces/MovieCountResult.html":{}}}],["coverage",{"_index":637,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":556,"title":{},"body":{"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":593,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(createuserdto",{"_index":585,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(userdata",{"_index":612,"title":{},"body":{"injectables/UsersService.html":{}}}],["created",{"_index":727,"title":{},"body":{"index.html":{}}}],["createduser",{"_index":247,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["createduser.password",{"_index":250,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["createmovie",{"_index":406,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{}}}],["createmovie(@body",{"_index":456,"title":{},"body":{"controllers/MovieController.html":{}}}],["createmovie(movie",{"_index":500,"title":{},"body":{"injectables/MovieService.html":{}}}],["createmovie(post",{"_index":410,"title":{},"body":{"controllers/MovieController.html":{}}}],["createmoviedto",{"_index":271,"title":{"classes/CreateMovieDto.html":{}},"body":{"classes/CreateMovieDto.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"classes/UpdateMovieDto.html":{},"coverage.html":{}}}],["createuserdto",{"_index":285,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["credentials",{"_index":266,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["currenthashedrefreshtoken",{"_index":563,"title":{},"body":{"entities/User.html":{},"injectables/UsersService.html":{}}}],["database",{"_index":302,"title":{},"body":{"modules/DatabaseModule.html":{},"controllers/MovieController.html":{}}}],["database/database.module",{"_index":25,"title":{},"body":{"modules/AppModule.html":{}}}],["database/postgreserrorcodes.enum",{"_index":232,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["databasemodule",{"_index":8,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["decorators",{"_index":66,"title":{},"body":{"controllers/AuthenticationController.html":{},"classes/CreateMovieDto.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":291,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"classes/LogInDto.html":{},"interfaces/MovieCountResult.html":{},"classes/MovieNotFoundException.html":{},"interfaces/MovieSearchBody.html":{},"interfaces/MovieSearchResult.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":68,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"classes/MovieNotFoundException.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":435,"title":{},"body":{"controllers/MovieController.html":{}}}],["delete(':id",{"_index":462,"title":{},"body":{"controllers/MovieController.html":{}}}],["delete(':id')@useguards(jwtauthenticationguard",{"_index":414,"title":{},"body":{"controllers/MovieController.html":{}}}],["deletemovie",{"_index":407,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{}}}],["deletemovie(@param('id",{"_index":463,"title":{},"body":{"controllers/MovieController.html":{}}}],["deletemovie(id",{"_index":413,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{}}}],["deleteresponse",{"_index":519,"title":{},"body":{"injectables/MovieService.html":{}}}],["deleteresponse.affected",{"_index":521,"title":{},"body":{"injectables/MovieService.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/MovieModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploydocker",{"_index":742,"title":{},"body":{"index.html":{}}}],["deprecated",{"_index":546,"title":{},"body":{"classes/RegisterDto.html":{}}}],["description",{"_index":419,"title":{},"body":{"controllers/MovieController.html":{},"classes/RegisterDto.html":{},"index.html":{},"properties.html":{}}}],["details",{"_index":724,"title":{},"body":{"index.html":{}}}],["developer",{"_index":732,"title":{},"body":{"index.html":{},"properties.html":{}}}],["development",{"_index":765,"title":{},"body":{"index.html":{}}}],["director",{"_index":276,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["docker",{"_index":739,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":638,"title":{},"body":{"coverage.html":{}}}],["down",{"_index":758,"title":{},"body":{"index.html":{}}}],["dto/create",{"_index":438,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/login.dto",{"_index":113,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["dto/register.dto",{"_index":104,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["dto/update",{"_index":440,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{}}}],["e2e",{"_index":776,"title":{},"body":{"index.html":{}}}],["easier",{"_index":752,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":717,"title":{},"body":{"index.html":{}}}],["email",{"_index":212,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["entities",{"_index":304,"title":{},"body":{"modules/DatabaseModule.html":{},"entities/Movie.html":{},"entities/User.html":{},"overview.html":{}}}],["entities/user.entity",{"_index":601,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entity",{"_index":382,"title":{"entities/Movie.html":{},"entities/User.html":{}},"body":{"entities/Movie.html":{},"entities/User.html":{},"coverage.html":{}}}],["entity.ts",{"_index":306,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["enumerations",{"_index":697,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":252,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["error?.code",{"_index":253,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["example",{"_index":541,"title":{},"body":{"classes/RegisterDto.html":{}}}],["exceptions/movienotfound.exception",{"_index":508,"title":{},"body":{"injectables/MovieService.html":{}}}],["exclude",{"_index":577,"title":{},"body":{"entities/User.html":{}}}],["executioncontext",{"_index":315,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["exist",{"_index":451,"title":{},"body":{"controllers/MovieController.html":{},"injectables/UsersService.html":{}}}],["exist.'})@useguards(jwtauthenticationguard",{"_index":427,"title":{},"body":{"controllers/MovieController.html":{}}}],["exists",{"_index":258,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/MovieController.html":{}}}],["expiresin",{"_index":193,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{}}}],["export",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"interfaces/MovieCountResult.html":{},"modules/MovieModule.html":{},"classes/MovieNotFoundException.html":{},"interfaces/MovieSearchBody.html":{},"interfaces/MovieSearchResult.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":599,"title":{},"body":{"modules/UsersModule.html":{}}}],["expose",{"_index":756,"title":{},"body":{"index.html":{}}}],["express",{"_index":344,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{},"dependencies.html":{},"index.html":{}}}],["expression",{"_index":538,"title":{},"body":{"classes/RegisterDto.html":{}}}],["extends",{"_index":311,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/MovieNotFoundException.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{}}}],["extractjwt",{"_index":339,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["extractjwt.fromextractors",{"_index":347,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["fetched",{"_index":423,"title":{},"body":{"controllers/MovieController.html":{}}}],["file",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"interfaces/MovieCountResult.html":{},"modules/MovieModule.html":{},"classes/MovieNotFoundException.html":{},"interfaces/MovieSearchBody.html":{},"interfaces/MovieSearchResult.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["follow",{"_index":745,"title":{},"body":{"index.html":{}}}],["found",{"_index":483,"title":{},"body":{"classes/MovieNotFoundException.html":{}}}],["framework",{"_index":715,"title":{},"body":{"index.html":{}}}],["fullname",{"_index":524,"title":{},"body":{"classes/RegisterDto.html":{}}}],["function",{"_index":651,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":702,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["gender",{"_index":277,"title":{},"body":{"classes/CreateMovieDto.html":{},"entities/Movie.html":{},"interfaces/MovieSearchBody.html":{}}}],["get(':id",{"_index":449,"title":{},"body":{"controllers/MovieController.html":{}}}],["get(':id')@apiparam({name",{"_index":417,"title":{},"body":{"controllers/MovieController.html":{}}}],["get('refresh",{"_index":131,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["get_cache",{"_index":802,"title":{},"body":{"miscellaneous/variables.html":{}}}],["get_cache_key",{"_index":646,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getauthenticateduser",{"_index":199,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getauthenticateduser(email",{"_index":208,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getbyemail",{"_index":604,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyemail(email",{"_index":615,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyid",{"_index":605,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyid(id",{"_index":617,"title":{},"body":{"injectables/UsersService.html":{}}}],["getcookiesforlogout",{"_index":200,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwtaccesstoken",{"_index":201,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwtaccesstoken(userid",{"_index":214,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwtrefreshtoken",{"_index":202,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwtrefreshtoken(userid",{"_index":218,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwttoken",{"_index":203,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwttoken(userid",{"_index":220,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getmovie",{"_index":495,"title":{},"body":{"injectables/MovieService.html":{}}}],["getmovie(id",{"_index":503,"title":{},"body":{"injectables/MovieService.html":{}}}],["getmoviebyid",{"_index":408,"title":{},"body":{"controllers/MovieController.html":{}}}],["getmoviebyid(@param('id",{"_index":452,"title":{},"body":{"controllers/MovieController.html":{}}}],["getmoviebyid(id",{"_index":416,"title":{},"body":{"controllers/MovieController.html":{}}}],["getting",{"_index":704,"title":{"index.html":{}},"body":{}}],["getuserifrefreshtokenmatches",{"_index":606,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserifrefreshtokenmatches(refreshtoken",{"_index":619,"title":{},"body":{"injectables/UsersService.html":{}}}],["given",{"_index":426,"title":{},"body":{"controllers/MovieController.html":{}}}],["graph",{"_index":783,"title":{},"body":{"modules.html":{}}}],["guards/jwt",{"_index":109,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["guards/localauthentication.guard",{"_index":107,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["hapi/joi",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"injectables/MovieService.html":{},"dependencies.html":{}}}],["hashedpassword",{"_index":224,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["here",{"_index":725,"title":{},"body":{"index.html":{}}}],["hits",{"_index":488,"title":{},"body":{"interfaces/MovieSearchResult.html":{}}}],["host",{"_index":184,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{}}}],["httpcache.interceptor",{"_index":119,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["httpcacheinterceptor",{"_index":118,"title":{"injectables/HttpCacheInterceptor.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/HttpCacheInterceptor.html":{},"coverage.html":{}}}],["httpcode",{"_index":98,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["httpcode(200",{"_index":139,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["httpcode(200)@useguards(localauthenticationguard)@post('log",{"_index":77,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["httpexception",{"_index":226,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{}}}],["httponly",{"_index":238,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["httpstatus",{"_index":227,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{}}}],["httpstatus.bad_request",{"_index":259,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["httpstatus.internal_server_error",{"_index":263,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["httpstatus.not_found",{"_index":627,"title":{},"body":{"injectables/UsersService.html":{}}}],["id",{"_index":385,"title":{},"body":{"entities/Movie.html":{},"controllers/MovieController.html":{},"classes/MovieNotFoundException.html":{},"interfaces/MovieSearchBody.html":{},"injectables/MovieService.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":639,"title":{},"body":{"coverage.html":{}}}],["ignore",{"_index":123,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["import",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"modules/DatabaseModule.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"classes/MovieNotFoundException.html":{},"interfaces/MovieSearchResult.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{},"modules/MovieModule.html":{},"modules/UsersModule.html":{}}}],["in')@apibody({type",{"_index":78,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["index",{"_index":56,"title":{"index.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"interfaces/MovieCountResult.html":{},"interfaces/MovieSearchBody.html":{},"interfaces/MovieSearchResult.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["index('post_authorid_index",{"_index":402,"title":{},"body":{"entities/Movie.html":{}}}],["index('post_authorid_index')@manytoone(undefined",{"_index":393,"title":{},"body":{"entities/Movie.html":{}}}],["info",{"_index":14,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"interfaces/MovieCountResult.html":{},"modules/MovieModule.html":{},"classes/MovieNotFoundException.html":{},"interfaces/MovieSearchBody.html":{},"interfaces/MovieSearchResult.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["inject",{"_index":182,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{}}}],["injectable",{"_index":195,"title":{"injectables/AuthenticationService.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AuthenticationService.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":196,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":506,"title":{},"body":{"injectables/MovieService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(movie",{"_index":510,"title":{},"body":{"injectables/MovieService.html":{}}}],["injectrepository(user",{"_index":625,"title":{},"body":{"injectables/UsersService.html":{}}}],["installation",{"_index":761,"title":{},"body":{"index.html":{}}}],["installion",{"_index":743,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":763,"title":{},"body":{"index.html":{}}}],["instead",{"_index":530,"title":{},"body":{"classes/RegisterDto.html":{}}}],["interface",{"_index":465,"title":{"interfaces/MovieCountResult.html":{},"interfaces/MovieSearchBody.html":{},"interfaces/MovieSearchResult.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{}},"body":{"interfaces/MovieCountResult.html":{},"interfaces/MovieSearchBody.html":{},"interfaces/MovieSearchResult.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["interface/requestwithuser.interface",{"_index":105,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["interface/tokenpayload.interface",{"_index":230,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["interfaces",{"_index":467,"title":{},"body":{"interfaces/MovieCountResult.html":{},"interfaces/MovieSearchBody.html":{},"interfaces/MovieSearchResult.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"overview.html":{}}}],["isemail",{"_index":379,"title":{},"body":{"classes/LogInDto.html":{},"classes/RegisterDto.html":{}}}],["isemail()@isnotempty",{"_index":375,"title":{},"body":{"classes/LogInDto.html":{}}}],["isnotempty",{"_index":282,"title":{},"body":{"classes/CreateMovieDto.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{}}}],["isnotempty()@isstring",{"_index":278,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["ispasswordmatching",{"_index":268,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["isrefreshtokenmatching",{"_index":634,"title":{},"body":{"injectables/UsersService.html":{}}}],["isstring",{"_index":283,"title":{},"body":{"classes/CreateMovieDto.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{}}}],["isstring()@isnotempty",{"_index":532,"title":{},"body":{"classes/RegisterDto.html":{}}}],["isstring()@isnotempty()@minlength(7",{"_index":377,"title":{},"body":{"classes/LogInDto.html":{},"classes/RegisterDto.html":{}}}],["job",{"_index":793,"title":{},"body":{"properties.html":{}}}],["joi",{"_index":20,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.number",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.number().required",{"_index":35,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.object",{"_index":31,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().required",{"_index":33,"title":{},"body":{"modules/AppModule.html":{}}}],["jwt",{"_index":342,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt_expiration_time",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthenticationService.html":{}}}],["jwt_refresh_token_expiration_time",{"_index":243,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["jwt_secret",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["jwtauthenticationguard",{"_index":108,"title":{"injectables/JwtAuthenticationGuard.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/JwtAuthenticationGuard.html":{},"controllers/MovieController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":346,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":177,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["jwtmodule.registerasync",{"_index":189,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["jwtrefreshguard",{"_index":116,"title":{"injectables/JwtRefreshGuard.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/JwtRefreshGuard.html":{},"coverage.html":{}}}],["jwtrefreshtokenstrategy",{"_index":330,"title":{"injectables/JwtRefreshTokenStrategy.html":{}},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{}}}],["jwtservice",{"_index":206,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["jwtstrategy",{"_index":164,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kill",{"_index":759,"title":{},"body":{"index.html":{}}}],["license",{"_index":794,"title":{},"body":{"properties.html":{}}}],["linkedin",{"_index":706,"title":{},"body":{"index.html":{}}}],["linux",{"_index":749,"title":{},"body":{"index.html":{}}}],["list",{"_index":711,"title":{},"body":{"index.html":{}}}],["literal",{"_index":489,"title":{},"body":{"interfaces/MovieSearchResult.html":{}}}],["local",{"_index":369,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localauthenticationguard",{"_index":106,"title":{"injectables/LocalAuthenticationGuard.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/LocalAuthenticationGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["localstrategy",{"_index":165,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["login",{"_index":60,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["login(@req",{"_index":142,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["login(request",{"_index":76,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logindto",{"_index":79,"title":{"classes/LogInDto.html":{}},"body":{"controllers/AuthenticationController.html":{},"classes/LogInDto.html":{},"coverage.html":{}}}],["logout",{"_index":61,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logout(@req",{"_index":156,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logout(request",{"_index":82,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["makes",{"_index":750,"title":{},"body":{"index.html":{}}}],["manager",{"_index":169,"title":{},"body":{"modules/AuthenticationModule.html":{},"dependencies.html":{}}}],["manytoone",{"_index":399,"title":{},"body":{"entities/Movie.html":{}}}],["match",{"_index":536,"title":{},"body":{"classes/RegisterDto.html":{}}}],["matches",{"_index":544,"title":{},"body":{"classes/RegisterDto.html":{}}}],["matches(/^\\+[1",{"_index":549,"title":{},"body":{"classes/RegisterDto.html":{}}}],["matching",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"interfaces/MovieCountResult.html":{},"modules/MovieModule.html":{},"classes/MovieNotFoundException.html":{},"interfaces/MovieSearchBody.html":{},"interfaces/MovieSearchResult.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":240,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["metadata",{"_index":689,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":57,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minlength",{"_index":380,"title":{},"body":{"classes/LogInDto.html":{},"classes/RegisterDto.html":{}}}],["minlength(7",{"_index":381,"title":{},"body":{"classes/LogInDto.html":{},"classes/RegisterDto.html":{}}}],["miscellaneous",{"_index":696,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mks",{"_index":731,"title":{},"body":{"index.html":{}}}],["mode",{"_index":769,"title":{},"body":{"index.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{},"modules/MovieModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{},"modules/MovieModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{},"modules/MovieModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["movie",{"_index":383,"title":{"entities/Movie.html":{}},"body":{"entities/Movie.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"entities/User.html":{},"coverage.html":{}}}],["movie.controller",{"_index":474,"title":{},"body":{"modules/MovieModule.html":{}}}],["movie.dto",{"_index":439,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{},"classes/UpdateMovieDto.html":{}}}],["movie.dto.ts",{"_index":274,"title":{},"body":{"classes/CreateMovieDto.html":{},"classes/UpdateMovieDto.html":{},"coverage.html":{}}}],["movie.dto.ts:10",{"_index":280,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["movie.dto.ts:14",{"_index":279,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["movie.dto.ts:6",{"_index":281,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["movie.entity",{"_index":442,"title":{},"body":{"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{}}}],["movie.publisher",{"_index":397,"title":{},"body":{"entities/Movie.html":{},"entities/User.html":{}}}],["movie/movie.entity",{"_index":579,"title":{},"body":{"entities/User.html":{}}}],["movie/movie.module",{"_index":24,"title":{},"body":{"modules/AppModule.html":{}}}],["moviecontroller",{"_index":404,"title":{"controllers/MovieController.html":{}},"body":{"controllers/MovieController.html":{},"modules/MovieModule.html":{},"coverage.html":{}}}],["moviecountresult",{"_index":466,"title":{"interfaces/MovieCountResult.html":{}},"body":{"interfaces/MovieCountResult.html":{},"coverage.html":{}}}],["movieid",{"_index":453,"title":{},"body":{"controllers/MovieController.html":{},"classes/MovieNotFoundException.html":{}}}],["moviemodule",{"_index":9,"title":{"modules/MovieModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MovieModule.html":{},"modules.html":{},"overview.html":{}}}],["movienotfoundexception",{"_index":477,"title":{"classes/MovieNotFoundException.html":{}},"body":{"classes/MovieNotFoundException.html":{},"injectables/MovieService.html":{},"coverage.html":{}}}],["movienotfoundexception(id",{"_index":518,"title":{},"body":{"injectables/MovieService.html":{}}}],["movies",{"_index":564,"title":{},"body":{"entities/User.html":{}}}],["moviesearchbody",{"_index":484,"title":{"interfaces/MovieSearchBody.html":{}},"body":{"interfaces/MovieSearchBody.html":{},"interfaces/MovieSearchResult.html":{},"coverage.html":{}}}],["moviesearchbody.interface",{"_index":490,"title":{},"body":{"interfaces/MovieSearchResult.html":{}}}],["moviesearchresult",{"_index":486,"title":{"interfaces/MovieSearchResult.html":{}},"body":{"interfaces/MovieSearchResult.html":{},"coverage.html":{}}}],["movieservice",{"_index":436,"title":{"injectables/MovieService.html":{}},"body":{"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"coverage.html":{},"overview.html":{}}}],["moviesrepository",{"_index":499,"title":{},"body":{"injectables/MovieService.html":{}}}],["movie})@apiresponse({status",{"_index":424,"title":{},"body":{"controllers/MovieController.html":{}}}],["name",{"_index":71,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"classes/MovieNotFoundException.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["nestjs",{"_index":712,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/DatabaseModule.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"classes/MovieNotFoundException.html":{},"injectables/MovieService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/DatabaseModule.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":664,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":178,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":554,"title":{},"body":{"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":175,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":665,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":112,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/MovieController.html":{},"classes/RegisterDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":294,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":256,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newmovie",{"_index":511,"title":{},"body":{"injectables/MovieService.html":{}}}],["newuser",{"_index":628,"title":{},"body":{"injectables/UsersService.html":{}}}],["nilson",{"_index":798,"title":{},"body":{"properties.html":{}}}],["node.js",{"_index":714,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":479,"title":{},"body":{"classes/MovieNotFoundException.html":{}}}],["npm",{"_index":762,"title":{},"body":{"index.html":{}}}],["null",{"_index":636,"title":{},"body":{"injectables/UsersService.html":{}}}],["nullable",{"_index":581,"title":{},"body":{"entities/User.html":{}}}],["number",{"_index":215,"title":{},"body":{"injectables/AuthenticationService.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"interfaces/MovieCountResult.html":{},"classes/MovieNotFoundException.html":{},"interfaces/MovieSearchBody.html":{},"interfaces/MovieSearchResult.html":{},"injectables/MovieService.html":{},"interfaces/TokenPayload.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["number(id",{"_index":454,"title":{},"body":{"controllers/MovieController.html":{}}}],["number})@apiresponse({status",{"_index":420,"title":{},"body":{"controllers/MovieController.html":{}}}],["onetomany",{"_index":576,"title":{},"body":{"entities/User.html":{}}}],["optional",{"_index":73,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"classes/MovieNotFoundException.html":{},"injectables/MovieService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["options",{"_index":509,"title":{},"body":{"injectables/MovieService.html":{}}}],["options(id",{"_index":517,"title":{},"body":{"injectables/MovieService.html":{}}}],["out",{"_index":13,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"modules/MovieModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["out')@httpcode(200",{"_index":84,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["overview",{"_index":785,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":658,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":434,"title":{},"body":{"controllers/MovieController.html":{}}}],["parameters",{"_index":70,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"classes/MovieNotFoundException.html":{},"injectables/MovieService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parser",{"_index":681,"title":{},"body":{"dependencies.html":{}}}],["partialtype",{"_index":553,"title":{},"body":{"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createmoviedto",{"_index":557,"title":{},"body":{"classes/UpdateMovieDto.html":{}}}],["partialtype(createuserdto",{"_index":561,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["passport",{"_index":341,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":174,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["passportstrategy",{"_index":343,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":359,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passreqtocallback",{"_index":351,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["password",{"_index":249,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{}}}],["patch",{"_index":433,"title":{},"body":{"controllers/MovieController.html":{}}}],["patch(':id",{"_index":459,"title":{},"body":{"controllers/MovieController.html":{}}}],["patch(':id')@useguards(jwtauthenticationguard",{"_index":431,"title":{},"body":{"controllers/MovieController.html":{}}}],["path",{"_index":239,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["payload",{"_index":233,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["payload.userid",{"_index":354,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["pg",{"_index":686,"title":{},"body":{"dependencies.html":{}}}],["pgadmin",{"_index":738,"title":{},"body":{"index.html":{}}}],["phonenumber",{"_index":525,"title":{},"body":{"classes/RegisterDto.html":{},"entities/User.html":{}}}],["plaintextpassword",{"_index":210,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["port",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{}}}],["post",{"_index":99,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/MovieController.html":{},"controllers/UsersController.html":{}}}],["post('log",{"_index":141,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post('register",{"_index":91,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post()@apiokresponse()@apiconflictresponse()@useguards(localauthenticationguard",{"_index":586,"title":{},"body":{"controllers/UsersController.html":{}}}],["post()@useguards(jwtauthenticationguard",{"_index":411,"title":{},"body":{"controllers/MovieController.html":{}}}],["postgres",{"_index":296,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["postgres_db",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["postgres_host",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["postgres_password",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["postgres_port",{"_index":37,"title":{},"body":{"modules/AppModule.html":{}}}],["postgres_user",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["postgreserrorcode",{"_index":231,"title":{},"body":{"injectables/AuthenticationService.html":{},"miscellaneous/enumerations.html":{}}}],["postgreserrorcode.uniqueviolation",{"_index":254,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["postgresql",{"_index":737,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":54,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/MovieController.html":{},"controllers/UsersController.html":{}}}],["primarygeneratedcolumn",{"_index":390,"title":{},"body":{"entities/Movie.html":{},"entities/User.html":{}}}],["private",{"_index":125,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{}}}],["problem",{"_index":730,"title":{},"body":{"index.html":{}}}],["production",{"_index":771,"title":{},"body":{"index.html":{}}}],["profile",{"_index":707,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":713,"title":{},"body":{"index.html":{}}}],["project",{"_index":709,"title":{},"body":{"index.html":{}}}],["promise",{"_index":81,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{}}}],["properties",{"_index":275,"title":{"properties.html":{}},"body":{"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"interfaces/MovieCountResult.html":{},"interfaces/MovieSearchBody.html":{},"interfaces/MovieSearchResult.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"entities/User.html":{},"properties.html":{}}}],["property",{"_index":529,"title":{},"body":{"classes/RegisterDto.html":{}}}],["provided",{"_index":267,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["providers",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/MovieModule.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":198,"title":{},"body":{"injectables/AuthenticationService.html":{},"entities/User.html":{}}}],["publisher",{"_index":386,"title":{},"body":{"entities/Movie.html":{},"injectables/MovieService.html":{}}}],["publisher.movies",{"_index":394,"title":{},"body":{"entities/Movie.html":{}}}],["publisherid",{"_index":387,"title":{},"body":{"entities/Movie.html":{},"interfaces/MovieSearchBody.html":{}}}],["rafael",{"_index":797,"title":{},"body":{"properties.html":{}}}],["readonly",{"_index":126,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"controllers/MovieController.html":{},"controllers/UsersController.html":{}}}],["recommended",{"_index":744,"title":{},"body":{"index.html":{}}}],["redis",{"_index":170,"title":{},"body":{"modules/AuthenticationModule.html":{},"dependencies.html":{},"index.html":{}}}],["redis_host",{"_index":32,"title":{},"body":{"modules/AppModule.html":{}}}],["redis_port",{"_index":34,"title":{},"body":{"modules/AppModule.html":{}}}],["redisstore",{"_index":167,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["reflect",{"_index":688,"title":{},"body":{"dependencies.html":{}}}],["refresh",{"_index":62,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{}}}],["refresh(@req",{"_index":132,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refresh(request",{"_index":86,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refresh.guard",{"_index":117,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refresh.guard.ts",{"_index":329,"title":{},"body":{"injectables/JwtRefreshGuard.html":{},"coverage.html":{}}}],["refresh=${token",{"_index":242,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["refreshtoken",{"_index":147,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/UsersService.html":{}}}],["refreshtokencookie",{"_index":145,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["register",{"_index":63,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["register(@body",{"_index":127,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["register(registrationdata",{"_index":89,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["registerdto",{"_index":90,"title":{"classes/RegisterDto.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/RegisterDto.html":{},"coverage.html":{}}}],["registrationdata",{"_index":93,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["regular",{"_index":537,"title":{},"body":{"classes/RegisterDto.html":{}}}],["relationid",{"_index":400,"title":{},"body":{"entities/Movie.html":{}}}],["relationid((movie",{"_index":403,"title":{},"body":{"entities/Movie.html":{}}}],["relationid(movie",{"_index":396,"title":{},"body":{"entities/Movie.html":{}}}],["removerefreshtoken",{"_index":607,"title":{},"body":{"injectables/UsersService.html":{}}}],["removerefreshtoken(userid",{"_index":621,"title":{},"body":{"injectables/UsersService.html":{}}}],["repository",{"_index":497,"title":{},"body":{"injectables/MovieService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["req",{"_index":96,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/MovieController.html":{}}}],["req.user",{"_index":458,"title":{},"body":{"controllers/MovieController.html":{}}}],["request",{"_index":74,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{}}}],["request._parsedurl.query",{"_index":323,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["request.cookies?.refresh",{"_index":352,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["request.res.setheader",{"_index":158,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["request.res.setheader('set",{"_index":136,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["request.user",{"_index":138,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["request?.cookies?.authentication",{"_index":360,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["request?.cookies?.refresh",{"_index":348,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["requestwithuser",{"_index":65,"title":{"interfaces/RequestWithUser.html":{}},"body":{"controllers/AuthenticationController.html":{},"controllers/MovieController.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["required",{"_index":418,"title":{},"body":{"controllers/MovieController.html":{}}}],["reset",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/MovieModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["results",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"interfaces/MovieCountResult.html":{},"modules/MovieModule.html":{},"classes/MovieNotFoundException.html":{},"interfaces/MovieSearchBody.html":{},"interfaces/MovieSearchResult.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":128,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":75,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["rimraf",{"_index":691,"title":{},"body":{"dependencies.html":{}}}],["run",{"_index":766,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":693,"title":{},"body":{"dependencies.html":{}}}],["scalable",{"_index":718,"title":{},"body":{"index.html":{}}}],["secret",{"_index":190,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{}}}],["secretorkey",{"_index":349,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["server",{"_index":719,"title":{},"body":{"index.html":{}}}],["services/movie.service",{"_index":437,"title":{},"body":{"controllers/MovieController.html":{},"modules/MovieModule.html":{}}}],["set",{"_index":159,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["setcurrentrefreshtoken",{"_index":608,"title":{},"body":{"injectables/UsersService.html":{}}}],["setcurrentrefreshtoken(refreshtoken",{"_index":623,"title":{},"body":{"injectables/UsersService.html":{}}}],["setup",{"_index":751,"title":{},"body":{"index.html":{}}}],["side",{"_index":720,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":192,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["solution",{"_index":792,"title":{},"body":{"properties.html":{}}}],["solve",{"_index":728,"title":{},"body":{"index.html":{}}}],["something",{"_index":260,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["source",{"_index":15,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"interfaces/MovieCountResult.html":{},"modules/MovieModule.html":{},"classes/MovieNotFoundException.html":{},"interfaces/MovieSearchBody.html":{},"interfaces/MovieSearchResult.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["src/.../cachekey.constant.ts",{"_index":801,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":703,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../postgreserrorcodes.enum.ts",{"_index":698,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.module.ts",{"_index":17,"title":{},"body":{"modules/AppModule.html":{}}}],["src/authentication/authentication.controller.ts",{"_index":53,"title":{},"body":{"controllers/AuthenticationController.html":{},"coverage.html":{}}}],["src/authentication/authentication.controller.ts:36",{"_index":92,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:42",{"_index":88,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:54",{"_index":80,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:73",{"_index":69,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:82",{"_index":85,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.module.ts",{"_index":166,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["src/authentication/authentication.service.ts",{"_index":197,"title":{},"body":{"injectables/AuthenticationService.html":{},"coverage.html":{}}}],["src/authentication/authentication.service.ts:104",{"_index":213,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:12",{"_index":216,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:23",{"_index":219,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:36",{"_index":207,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:43",{"_index":222,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:66",{"_index":211,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:80",{"_index":225,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:96",{"_index":221,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/cachekey.constant.ts",{"_index":644,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/authentication/dto/login.dto.ts",{"_index":374,"title":{},"body":{"classes/LogInDto.html":{},"coverage.html":{}}}],["src/authentication/dto/login.dto.ts:11",{"_index":378,"title":{},"body":{"classes/LogInDto.html":{}}}],["src/authentication/dto/login.dto.ts:6",{"_index":376,"title":{},"body":{"classes/LogInDto.html":{}}}],["src/authentication/dto/register.dto.ts",{"_index":523,"title":{},"body":{"classes/RegisterDto.html":{},"coverage.html":{}}}],["src/authentication/dto/register.dto.ts:12",{"_index":526,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/dto/register.dto.ts:16",{"_index":533,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/dto/register.dto.ts:22",{"_index":531,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/dto/register.dto.ts:27",{"_index":534,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/dto/register.dto.ts:36",{"_index":543,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/guards/jwt",{"_index":325,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"coverage.html":{}}}],["src/authentication/guards/localauthentication.guard.ts",{"_index":362,"title":{},"body":{"injectables/LocalAuthenticationGuard.html":{},"coverage.html":{}}}],["src/authentication/httpcache.interceptor.ts",{"_index":310,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{},"coverage.html":{}}}],["src/authentication/httpcache.interceptor.ts:10",{"_index":316,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["src/authentication/interface/requestwithuser.interface",{"_index":446,"title":{},"body":{"controllers/MovieController.html":{}}}],["src/authentication/interface/requestwithuser.interface.ts",{"_index":550,"title":{},"body":{"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["src/authentication/interface/tokenpayload.interface.ts",{"_index":551,"title":{},"body":{"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["src/authentication/strategy/jwt",{"_index":331,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{}}}],["src/authentication/strategy/jwt.strategy.ts",{"_index":355,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/authentication/strategy/jwt.strategy.ts:10",{"_index":356,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/authentication/strategy/jwt.strategy.ts:25",{"_index":358,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/authentication/strategy/local.strategy.ts",{"_index":364,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/authentication/strategy/local.strategy.ts:14",{"_index":368,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/authentication/strategy/local.strategy.ts:8",{"_index":366,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/database/database.module.ts",{"_index":292,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/database/postgreserrorcodes.enum.ts",{"_index":699,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/main.ts",{"_index":650,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/movie/dto/create",{"_index":273,"title":{},"body":{"classes/CreateMovieDto.html":{},"coverage.html":{}}}],["src/movie/dto/update",{"_index":552,"title":{},"body":{"classes/UpdateMovieDto.html":{},"coverage.html":{}}}],["src/movie/exceptions/movienotfound.exception.ts",{"_index":478,"title":{},"body":{"classes/MovieNotFoundException.html":{},"coverage.html":{}}}],["src/movie/exceptions/movienotfound.exception.ts:3",{"_index":481,"title":{},"body":{"classes/MovieNotFoundException.html":{}}}],["src/movie/movie.controller.ts",{"_index":405,"title":{},"body":{"controllers/MovieController.html":{},"coverage.html":{}}}],["src/movie/movie.controller.ts:46",{"_index":428,"title":{},"body":{"controllers/MovieController.html":{}}}],["src/movie/movie.controller.ts:53",{"_index":412,"title":{},"body":{"controllers/MovieController.html":{}}}],["src/movie/movie.controller.ts:59",{"_index":432,"title":{},"body":{"controllers/MovieController.html":{}}}],["src/movie/movie.controller.ts:65",{"_index":415,"title":{},"body":{"controllers/MovieController.html":{}}}],["src/movie/movie.entity.ts",{"_index":384,"title":{},"body":{"entities/Movie.html":{},"coverage.html":{}}}],["src/movie/movie.entity.ts:14",{"_index":391,"title":{},"body":{"entities/Movie.html":{}}}],["src/movie/movie.entity.ts:17",{"_index":392,"title":{},"body":{"entities/Movie.html":{}}}],["src/movie/movie.entity.ts:20",{"_index":389,"title":{},"body":{"entities/Movie.html":{}}}],["src/movie/movie.entity.ts:24",{"_index":395,"title":{},"body":{"entities/Movie.html":{}}}],["src/movie/movie.entity.ts:27",{"_index":398,"title":{},"body":{"entities/Movie.html":{}}}],["src/movie/movie.module.ts",{"_index":473,"title":{},"body":{"modules/MovieModule.html":{}}}],["src/movie/services/movie.service.ts",{"_index":494,"title":{},"body":{"injectables/MovieService.html":{},"coverage.html":{}}}],["src/movie/services/movie.service.ts:12",{"_index":498,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/movie/services/movie.service.ts:18",{"_index":501,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/movie/services/movie.service.ts:27",{"_index":505,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/movie/services/movie.service.ts:38",{"_index":502,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/movie/services/movie.service.ts:45",{"_index":504,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/movie/types/moviecountbody.interface.ts",{"_index":468,"title":{},"body":{"interfaces/MovieCountResult.html":{},"coverage.html":{}}}],["src/movie/types/moviesearchbody.interface.ts",{"_index":485,"title":{},"body":{"interfaces/MovieSearchBody.html":{},"coverage.html":{}}}],["src/movie/types/moviesearchresponse.interface.ts",{"_index":487,"title":{},"body":{"interfaces/MovieSearchResult.html":{},"coverage.html":{}}}],["src/users/dto/create",{"_index":286,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":559,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/entities/user.entity",{"_index":507,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/users/entities/user.entity.ts",{"_index":562,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:11",{"_index":569,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:14",{"_index":575,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:17",{"_index":573,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:21",{"_index":574,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:25",{"_index":567,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:29",{"_index":572,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:8",{"_index":570,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":583,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:15",{"_index":587,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":475,"title":{},"body":{"modules/MovieModule.html":{}}}],["src/users/users.module.ts",{"_index":598,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":603,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:15",{"_index":618,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:26",{"_index":616,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:37",{"_index":613,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:43",{"_index":624,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:50",{"_index":620,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:63",{"_index":622,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:9",{"_index":610,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":767,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":770,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":772,"title":{},"body":{"index.html":{}}}],["started",{"_index":705,"title":{"index.html":{}},"body":{}}],["starting",{"_index":726,"title":{},"body":{"index.html":{}}}],["statements",{"_index":640,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":450,"title":{},"body":{"controllers/MovieController.html":{}}}],["steps",{"_index":746,"title":{},"body":{"index.html":{}}}],["store",{"_index":171,"title":{},"body":{"modules/AuthenticationModule.html":{},"dependencies.html":{}}}],["strategy",{"_index":340,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["strategy/jwt.strategy",{"_index":180,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["strategy/local.strategy",{"_index":176,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["string",{"_index":209,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"interfaces/MovieSearchBody.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["structure",{"_index":710,"title":{},"body":{"index.html":{}}}],["successfully",{"_index":422,"title":{},"body":{"controllers/MovieController.html":{}}}],["super",{"_index":345,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["super(`movie",{"_index":482,"title":{},"body":{"classes/MovieNotFoundException.html":{}}}],["super.trackby(context",{"_index":324,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["support",{"_index":780,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":781,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":736,"title":{},"body":{"index.html":{}}}],["synchronize",{"_index":307,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["table",{"_index":657,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":656,"title":{},"body":{"coverage.html":{}}}],["techs",{"_index":734,"title":{},"body":{"index.html":{}}}],["test",{"_index":775,"title":{},"body":{"index.html":{}}}],["test:cov",{"_index":778,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":777,"title":{},"body":{"index.html":{}}}],["tests",{"_index":774,"title":{},"body":{"index.html":{}}}],["this.authenticationservice.getauthenticateduser(email",{"_index":373,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.authenticationservice.getcookiesforlogout",{"_index":160,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authenticationservice.getcookiewithjwtaccesstoken(request.user.id",{"_index":135,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authenticationservice.getcookiewithjwtaccesstoken(user.id",{"_index":144,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authenticationservice.getcookiewithjwtrefreshtoken(user.id",{"_index":148,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authenticationservice.register(registrationdata",{"_index":129,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.configservice.get('jwt_expiration_time')}s",{"_index":236,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.configservice.get('jwt_secret",{"_index":235,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.getbyid(userid",{"_index":633,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.jwtservice.sign(payload",{"_index":234,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.movieservice.createmovie(post",{"_index":457,"title":{},"body":{"controllers/MovieController.html":{}}}],["this.movieservice.deletemovie(number(id",{"_index":464,"title":{},"body":{"controllers/MovieController.html":{}}}],["this.movieservice.getmovie(movieid",{"_index":455,"title":{},"body":{"controllers/MovieController.html":{}}}],["this.movieservice.updatemovie(number(id",{"_index":461,"title":{},"body":{"controllers/MovieController.html":{}}}],["this.moviesrepository.create",{"_index":512,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.moviesrepository.delete(id",{"_index":520,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.moviesrepository.findone",{"_index":516,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.moviesrepository.findonebyorfail",{"_index":522,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.moviesrepository.save(newmovie",{"_index":513,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.moviesrepository.update(id",{"_index":514,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.reflector.get",{"_index":320,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["this.userservice.getbyid(payload.userid",{"_index":361,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.userservice.getuserifrefreshtokenmatches",{"_index":353,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["this.usersrepository.create(userdata",{"_index":629,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findoneby",{"_index":626,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.save(newuser",{"_index":630,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.update(userid",{"_index":632,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.create",{"_index":248,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.usersservice.create(createuserdto",{"_index":594,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getbyemail(email",{"_index":264,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.usersservice.removerefreshtoken(request.user.id",{"_index":157,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.usersservice.setcurrentrefreshtoken(refreshtoken",{"_index":150,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.verifypassword(plaintextpassword",{"_index":265,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["throw",{"_index":255,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{}}}],["token",{"_index":146,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{}}}],["token.strategy.ts",{"_index":332,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{}}}],["token.strategy.ts:13",{"_index":336,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["token.strategy.ts:29",{"_index":338,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["tokenpayload",{"_index":229,"title":{"interfaces/TokenPayload.html":{}},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["total",{"_index":491,"title":{},"body":{"interfaces/MovieSearchResult.html":{}}}],["trackby",{"_index":313,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["trackby(context",{"_index":314,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["transformer",{"_index":578,"title":{},"body":{"entities/User.html":{},"dependencies.html":{}}}],["true",{"_index":308,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"controllers/MovieController.html":{},"classes/RegisterDto.html":{},"entities/User.html":{}}}],["true})@exclude",{"_index":566,"title":{},"body":{"entities/User.html":{}}}],["true})@onetomany(undefined",{"_index":571,"title":{},"body":{"entities/User.html":{}}}],["try",{"_index":246,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["ttl",{"_index":187,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["type",{"_index":72,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"interfaces/MovieCountResult.html":{},"classes/MovieNotFoundException.html":{},"interfaces/MovieSearchBody.html":{},"interfaces/MovieSearchResult.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":401,"title":{},"body":{"entities/Movie.html":{},"injectables/MovieService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"index.html":{}}}],["typeormmodule",{"_index":293,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/MovieModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([movie",{"_index":476,"title":{},"body":{"modules/MovieModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":602,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":295,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["types",{"_index":555,"title":{},"body":{"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["types/bcrypt",{"_index":668,"title":{},"body":{"dependencies.html":{}}}],["types/hapi__joi",{"_index":670,"title":{},"body":{"dependencies.html":{}}}],["types/passport",{"_index":672,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":735,"title":{},"body":{"index.html":{}}}],["undefined",{"_index":155,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/HttpCacheInterceptor.html":{}}}],["unique",{"_index":580,"title":{},"body":{"entities/User.html":{}}}],["uniqueviolation",{"_index":700,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["unit",{"_index":773,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":94,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":795,"title":{},"body":{"properties.html":{}}}],["up",{"_index":755,"title":{},"body":{"index.html":{}}}],["updatedmovie",{"_index":515,"title":{},"body":{"injectables/MovieService.html":{}}}],["updatemovie",{"_index":409,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{}}}],["updatemovie(@param('id",{"_index":460,"title":{},"body":{"controllers/MovieController.html":{}}}],["updatemovie(id",{"_index":429,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{}}}],["updatemoviedto",{"_index":430,"title":{"classes/UpdateMovieDto.html":{}},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{},"classes/UpdateMovieDto.html":{},"coverage.html":{}}}],["updateuserdto",{"_index":558,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["use",{"_index":528,"title":{},"body":{"classes/RegisterDto.html":{}}}],["usefactory",{"_index":183,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{}}}],["useguards",{"_index":100,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/MovieController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthenticationguard",{"_index":152,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/MovieController.html":{}}}],["useguards(jwtauthenticationguard)@get",{"_index":67,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(jwtauthenticationguard)@post('log",{"_index":83,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(jwtrefreshguard",{"_index":130,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(jwtrefreshguard)@get('refresh",{"_index":87,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(localauthenticationguard",{"_index":140,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/UsersController.html":{}}}],["useinterceptors",{"_index":101,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/MovieController.html":{}}}],["useinterceptors(classserializerinterceptor",{"_index":121,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/MovieController.html":{}}}],["useinterceptors(httpcacheinterceptor",{"_index":122,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["user",{"_index":143,"title":{"entities/User.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/LocalStrategy.html":{},"entities/Movie.html":{},"injectables/MovieService.html":{},"interfaces/RequestWithUser.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user.currenthashedrefreshtoken.tostring",{"_index":635,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.dto",{"_index":560,"title":{},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":287,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:2",{"_index":288,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:3",{"_index":289,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:4",{"_index":290,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.id",{"_index":151,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["user.password",{"_index":154,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["userdata",{"_index":614,"title":{},"body":{"injectables/UsersService.html":{}}}],["userid",{"_index":217,"title":{},"body":{"injectables/AuthenticationService.html":{},"interfaces/TokenPayload.html":{},"injectables/UsersService.html":{}}}],["username",{"_index":299,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["usernamefield",{"_index":372,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["users",{"_index":584,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":600,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":588,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/entities/user.entity",{"_index":370,"title":{},"body":{"injectables/LocalStrategy.html":{},"entities/Movie.html":{},"interfaces/RequestWithUser.html":{}}}],["users/users.module",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{}}}],["users/users.service",{"_index":115,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["userscontroller",{"_index":582,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":335,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["usersmodule",{"_index":10,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/MovieModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":611,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice",{"_index":114,"title":{"injectables/UsersService.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":733,"title":{},"body":{"index.html":{}}}],["validate",{"_index":333,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(email",{"_index":367,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":357,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(request",{"_index":337,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["validationschema",{"_index":30,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":284,"title":{},"body":{"classes/CreateMovieDto.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{},"dependencies.html":{}}}],["value",{"_index":492,"title":{},"body":{"interfaces/MovieSearchResult.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":645,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":800,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verifypassword",{"_index":204,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["verifypassword(plaintextpassword",{"_index":223,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["version",{"_index":790,"title":{},"body":{"properties.html":{}}}],["watch",{"_index":768,"title":{},"body":{"index.html":{}}}],["went",{"_index":261,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["windows",{"_index":747,"title":{},"body":{"index.html":{}}}],["witt",{"_index":799,"title":{},"body":{"properties.html":{}}}],["wrong",{"_index":262,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["wsl",{"_index":748,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":11,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/MovieModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthenticationModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nMovieModule\n\nMovieModule\n\nAppModule -->\n\nMovieModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthenticationModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            MovieModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import * as Joi from '@hapi/joi';\nimport { ConfigModule } from '@nestjs/config';\nimport { MovieModule } from './movie/movie.module';\nimport { DatabaseModule } from './database/database.module';\nimport { UsersModule } from './users/users.module';\nimport { AuthenticationModule } from './authentication/authentication.module';\nimport { Module } from '@nestjs/common';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      validationSchema: Joi.object({\n        REDIS_HOST: Joi.string().required(),\n        REDIS_PORT: Joi.number().required(),\n        POSTGRES_HOST: Joi.string().required(),\n        POSTGRES_PORT: Joi.number().required(),\n        POSTGRES_USER: Joi.string().required(),\n        POSTGRES_PASSWORD: Joi.string().required(),\n        POSTGRES_DB: Joi.string().required(),\n        PORT: Joi.number(),\n        JWT_SECRET: Joi.string().required(),\n        JWT_EXPIRATION_TIME: Joi.string().required(),\n      }),\n    }),\n    DatabaseModule,\n    UsersModule,\n    MovieModule,\n    AuthenticationModule,\n  ],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthenticationController.html":{"url":"controllers/AuthenticationController.html","title":"controller - AuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/authentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                authentication\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                authenticate\n                            \n                            \n                                    Async\n                                logIn\n                            \n                            \n                                    Async\n                                logOut\n                            \n                            \n                                refresh\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        authenticate\n                        \n                    \n                \n            \n            \n                \nauthenticate(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthenticationGuard)@Get()\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    logIn(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(200)@UseGuards(LocalAuthenticationGuard)@Post('log-in')@ApiBody({type: LogInDto})\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logOut\n                        \n                    \n                \n            \n            \n                \n                    \n                    logOut(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthenticationGuard)@Post('log-out')@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refresh\n                        \n                    \n                \n            \n            \n                \nrefresh(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtRefreshGuard)@Get('refresh')\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(registrationData: RegisterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    registrationData\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Req,\n  ClassSerializerInterceptor,\n  Controller,\n  HttpCode,\n  Post,\n  UseGuards,\n  Get,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { AuthenticationService } from './authentication.service';\nimport RegisterDto from './dto/register.dto';\nimport RequestWithUser from './interface/requestWithUser.interface';\nimport { LocalAuthenticationGuard } from './guards/localAuthentication.guard';\nimport JwtAuthenticationGuard from './guards/jwt-authentication.guard';\nimport { ApiBody } from '@nestjs/swagger';\nimport LogInDto from './dto/login.dto';\nimport { UsersService } from '../users/users.service';\nimport JwtRefreshGuard from './guards/jwt-refresh.guard';\nimport { HttpCacheInterceptor } from './httpCache.interceptor';\n\n@Controller('authentication')\n@UseInterceptors(ClassSerializerInterceptor)\n@UseInterceptors(HttpCacheInterceptor)\nexport class AuthenticationController {\n  /**\n   * @ignore\n   */\n  constructor(\n    private readonly authenticationService: AuthenticationService,\n    private readonly usersService: UsersService,\n  ) {}\n\n  @Post('register')\n  async register(@Body() registrationData: RegisterDto) {\n    return this.authenticationService.register(registrationData);\n  }\n\n  @UseGuards(JwtRefreshGuard)\n  @Get('refresh')\n  refresh(@Req() request: RequestWithUser) {\n    const accessTokenCookie =\n      this.authenticationService.getCookieWithJwtAccessToken(request.user.id);\n\n    request.res.setHeader('Set-Cookie', accessTokenCookie);\n    return request.user;\n  }\n\n  @HttpCode(200)\n  @UseGuards(LocalAuthenticationGuard)\n  @Post('log-in')\n  @ApiBody({ type: LogInDto })\n  async logIn(@Req() request: RequestWithUser): Promise {\n    const { user } = request;\n    const accessTokenCookie =\n      this.authenticationService.getCookieWithJwtAccessToken(user.id);\n    const { cookie: refreshTokenCookie, token: refreshToken } =\n      this.authenticationService.getCookieWithJwtRefreshToken(user.id);\n\n    await this.usersService.setCurrentRefreshToken(refreshToken, user.id);\n\n    request.res.setHeader('Set-Cookie', [\n      accessTokenCookie,\n      refreshTokenCookie,\n    ]);\n\n    return user;\n  }\n\n  @UseGuards(JwtAuthenticationGuard)\n  @Get()\n  authenticate(@Req() request: RequestWithUser) {\n    const user = request.user;\n    user.password = undefined;\n    return user;\n  }\n\n  @UseGuards(JwtAuthenticationGuard)\n  @Post('log-out')\n  @HttpCode(200)\n  async logOut(@Req() request: RequestWithUser) {\n    await this.usersService.removeRefreshToken(request.user.id);\n    request.res.setHeader(\n      'Set-Cookie',\n      this.authenticationService.getCookiesForLogOut(),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthenticationModule.html":{"url":"modules/AuthenticationModule.html","title":"module - AuthenticationModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthenticationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthenticationModule\n\n\n\ncluster_AuthenticationModule_imports\n\n\n\ncluster_AuthenticationModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\nAuthenticationModule -->\n\nUsersModule->AuthenticationModule\n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nAuthenticationModule -->\n\nAuthenticationService->AuthenticationModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthenticationModule -->\n\nJwtStrategy->AuthenticationModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthenticationModule -->\n\nLocalStrategy->AuthenticationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/authentication/authentication.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthenticationService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthenticationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import * as redisStore from 'cache-manager-redis-store';\nimport { CacheModule, Module } from '@nestjs/common';\nimport { AuthenticationService } from './authentication.service';\nimport { UsersModule } from '../users/users.module';\nimport { AuthenticationController } from './authentication.controller';\nimport { PassportModule } from '@nestjs/passport';\nimport { LocalStrategy } from './strategy/local.strategy';\nimport { JwtModule } from '@nestjs/jwt';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { JwtStrategy } from './strategy/jwt.strategy';\n\n@Module({\n  imports: [\n    CacheModule.registerAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        store: redisStore,\n        host: configService.get('REDIS_HOST'),\n        port: configService.get('REDIS_PORT'),\n        ttl: 120,\n      }),\n    }),\n    UsersModule,\n    PassportModule,\n    ConfigModule,\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: async (configService: ConfigService) => ({\n        secret: configService.get('JWT_SECRET'),\n        signOptions: {\n          expiresIn: `${configService.get('JWT_EXPIRATION_TIME')}s`,\n        },\n      }),\n    }),\n  ],\n  providers: [AuthenticationService, LocalStrategy, JwtStrategy],\n  controllers: [AuthenticationController],\n})\nexport class AuthenticationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthenticationService.html":{"url":"injectables/AuthenticationService.html","title":"injectable - AuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/authentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                getAuthenticatedUser\n                            \n                            \n                                    Public\n                                getCookiesForLogOut\n                            \n                            \n                                    Public\n                                getCookieWithJwtAccessToken\n                            \n                            \n                                    Public\n                                getCookieWithJwtRefreshToken\n                            \n                            \n                                    Public\n                                getCookieWithJwtToken\n                            \n                            \n                                    Public\n                                    Async\n                                register\n                            \n                            \n                                    Private\n                                    Async\n                                verifyPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/authentication.service.ts:36\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getAuthenticatedUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAuthenticatedUser(email: string, plainTextPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    plainTextPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCookiesForLogOut\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookiesForLogOut()\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCookieWithJwtAccessToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookieWithJwtAccessToken(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCookieWithJwtRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookieWithJwtRefreshToken(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { cookie: string; token: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCookieWithJwtToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookieWithJwtToken(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(registrationData: RegisterDto)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    registrationData\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        verifyPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyPassword(plainTextPassword: string, hashedPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    plainTextPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    hashedPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { UsersService } from '../users/users.service';\nimport RegisterDto from './dto/register.dto';\nimport * as bcrypt from 'bcrypt';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { TokenPayload } from './interface/tokenPayload.interface';\nimport { PostgresErrorCode } from '../database/postgresErrorCodes.enum';\n\n@Injectable()\nexport class AuthenticationService {\n  public getCookieWithJwtAccessToken(userId: number) {\n    const payload: TokenPayload = { userId };\n    const token = this.jwtService.sign(payload, {\n      secret: this.configService.get('JWT_SECRET'),\n      expiresIn: `${this.configService.get('JWT_EXPIRATION_TIME')}s`,\n    });\n    return `Authentication=${token}; HttpOnly; Path=/; Max-Age=${this.configService.get(\n      'JWT_EXPIRATION_TIME',\n    )}`;\n  }\n\n  public getCookieWithJwtRefreshToken(userId: number) {\n    const payload: TokenPayload = { userId };\n    const token = this.jwtService.sign(payload, {\n      secret: this.configService.get('JWT_SECRET'),\n      expiresIn: `${this.configService.get('JWT_EXPIRATION_TIME')}s`,\n    });\n    const cookie = `Refresh=${token}; HttpOnly; Path=/; Max-Age=${this.configService.get(\n      'JWT_REFRESH_TOKEN_EXPIRATION_TIME',\n    )}`;\n    return {\n      cookie,\n      token,\n    };\n  }\n  constructor(\n    private readonly usersService: UsersService,\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n  ) {}\n\n  public async register(registrationData: RegisterDto) {\n    const hashedPassword = await bcrypt.hash(registrationData.password, 10);\n    try {\n      const createdUser = await this.usersService.create({\n        ...registrationData,\n        password: hashedPassword,\n      });\n      createdUser.password = undefined;\n      return createdUser;\n    } catch (error) {\n      if (error?.code === PostgresErrorCode.UniqueViolation) {\n        throw new HttpException(\n          'User with that email already exists',\n          HttpStatus.BAD_REQUEST,\n        );\n      }\n      throw new HttpException(\n        'Something went wrong',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  public async getAuthenticatedUser(email: string, plainTextPassword: string) {\n    try {\n      const user = await this.usersService.getByEmail(email);\n      await this.verifyPassword(plainTextPassword, user.password);\n      user.password = undefined;\n      return user;\n    } catch (error) {\n      throw new HttpException(\n        'Wrong credentials provided',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n  }\n\n  private async verifyPassword(\n    plainTextPassword: string,\n    hashedPassword: string,\n  ) {\n    const isPasswordMatching = await bcrypt.compare(\n      plainTextPassword,\n      hashedPassword,\n    );\n    if (!isPasswordMatching) {\n      throw new HttpException(\n        'Wrong credentials provided',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n  }\n\n  public getCookieWithJwtToken(userId: number) {\n    const payload: TokenPayload = { userId };\n    const token = this.jwtService.sign(payload);\n    return `Authentication=${token}; HttpOnly; Path=/; Max-Age=${this.configService.get(\n      'JWT_EXPIRATION_TIME',\n    )}`;\n  }\n\n  public getCookiesForLogOut() {\n    return [\n      'Authentication=; HttpOnly; Path=/; Max-Age=0',\n      'Refresh=; HttpOnly; Path=/; Max-Age=0',\n    ];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateMovieDto.html":{"url":"classes/CreateMovieDto.html","title":"class - CreateMovieDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateMovieDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/movie/dto/create-movie.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                director\n                            \n                            \n                                gender\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        director\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/movie/dto/create-movie.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/movie/dto/create-movie.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/movie/dto/create-movie.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class CreateMovieDto {\n  @IsNotEmpty()\n  @IsString()\n  name: string;\n\n  @IsNotEmpty()\n  @IsString()\n  gender: string;\n\n  @IsNotEmpty()\n  @IsString()\n  director: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateUserDto {\n  email: string;\n  name: string;\n  password: string;\n}\n\nexport default CreateUserDto;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        host: configService.get('POSTGRES_HOST'),\n        port: configService.get('POSTGRES_PORT'),\n        username: configService.get('POSTGRES_USER'),\n        password: configService.get('POSTGRES_PASSWORD'),\n        database: configService.get('POSTGRES_DB'),\n        entities: [__dirname + '/../**/*.entity.ts'],\n        synchronize: true,\n        autoLoadEntities: true,\n      }),\n    }),\n  ],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HttpCacheInterceptor.html":{"url":"injectables/HttpCacheInterceptor.html","title":"injectable - HttpCacheInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HttpCacheInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/httpCache.interceptor.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    CacheInterceptor\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                trackBy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        trackBy\n                        \n                    \n                \n            \n            \n                \ntrackBy(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/httpCache.interceptor.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CACHE_KEY_METADATA,\n  CacheInterceptor,\n  ExecutionContext,\n  Injectable,\n} from '@nestjs/common';\n\n@Injectable()\nexport class HttpCacheInterceptor extends CacheInterceptor {\n  trackBy(context: ExecutionContext): string | undefined {\n    const cacheKey = this.reflector.get(\n      CACHE_KEY_METADATA,\n      context.getHandler(),\n    );\n\n    if (cacheKey) {\n      const request = context.switchToHttp().getRequest();\n      return `${cacheKey}-${request._parsedUrl.query}`;\n    }\n\n    return super.trackBy(context);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthenticationGuard.html":{"url":"injectables/JwtAuthenticationGuard.html","title":"injectable - JwtAuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/guards/jwt-authentication.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport default class JwtAuthenticationGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtRefreshGuard.html":{"url":"injectables/JwtRefreshGuard.html","title":"injectable - JwtRefreshGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtRefreshGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/guards/jwt-refresh.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport default class JwtRefreshGuard extends AuthGuard('jwt-refresh-token') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtRefreshTokenStrategy.html":{"url":"injectables/JwtRefreshTokenStrategy.html","title":"injectable - JwtRefreshTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtRefreshTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/strategy/jwt-refresh-token.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/strategy/jwt-refresh-token.strategy.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(request: Request, payload: TokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/strategy/jwt-refresh-token.strategy.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                TokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Request } from 'express';\nimport { UsersService } from '../../users/users.service';\nimport { TokenPayload } from '../interface/tokenPayload.interface';\n\n@Injectable()\nexport class JwtRefreshTokenStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-refresh-token',\n) {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly userService: UsersService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (request: Request) => {\n          return request?.cookies?.Refresh;\n        },\n      ]),\n      secretOrKey: configService.get('JWT_REFRESH_TOKEN_SECRET'),\n      passReqToCallback: true,\n    });\n  }\n\n  async validate(request: Request, payload: TokenPayload) {\n    const refreshToken = request.cookies?.Refresh;\n    return this.userService.getUserIfRefreshTokenMatches(\n      refreshToken,\n      payload.userId,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/strategy/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/strategy/jwt.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: TokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/strategy/jwt.strategy.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                TokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Request } from 'express';\nimport { UsersService } from '../../users/users.service';\nimport { TokenPayload } from '../interface/tokenPayload.interface';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly userService: UsersService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (request: Request) => {\n          return request?.cookies?.Authentication;\n        },\n      ]),\n      secretOrKey: configService.get('JWT_SECRET'),\n    });\n  }\n\n  async validate(payload: TokenPayload) {\n    return this.userService.getById(payload.userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthenticationGuard.html":{"url":"injectables/LocalAuthenticationGuard.html","title":"injectable - LocalAuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/guards/localAuthentication.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthenticationGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/strategy/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authenticationService: AuthenticationService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/strategy/local.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authenticationService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/strategy/local.strategy.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { AuthenticationService } from '../authentication.service';\nimport { User } from '../../users/entities/user.entity';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authenticationService: AuthenticationService) {\n    super({\n      usernameField: 'email',\n    });\n  }\n  async validate(email: string, password: string): Promise {\n    return this.authenticationService.getAuthenticatedUser(email, password);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LogInDto.html":{"url":"classes/LogInDto.html","title":"class - LogInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LogInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/dto/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/login.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(7)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/login.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsString, IsNotEmpty, MinLength } from 'class-validator';\n\nexport class LogInDto {\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(7)\n  password: string;\n}\n\nexport default LogInDto;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Movie.html":{"url":"entities/Movie.html","title":"entity - Movie","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Movie\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/movie/movie.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                gender\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                publisher\n                            \n                            \n                                publisherId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/movie/movie.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/movie/movie.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/movie/movie.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        publisher\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Index('post_authorId_index')@ManyToOne(undefined, publisher => publisher.movies)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/movie/movie.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        publisherId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @RelationId(movie => movie.publisher)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/movie/movie.entity.ts:27\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  Index,\n  ManyToOne,\n  RelationId,\n} from 'typeorm';\nimport { User } from '../users/entities/user.entity';\n\n@Entity()\nexport class Movie {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  name: string;\n\n  @Column()\n  gender: string;\n\n  @Index('post_authorId_index')\n  @ManyToOne(() => User, (publisher: User) => publisher.movies)\n  publisher: User;\n\n  @RelationId((movie: Movie) => movie.publisher)\n  publisherId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MovieController.html":{"url":"controllers/MovieController.html","title":"controller - MovieController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MovieController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/movie/movie.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                movie\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createMovie\n                            \n                            \n                                    Async\n                                deleteMovie\n                            \n                            \n                                getMovieById\n                            \n                            \n                                    Async\n                                updateMovie\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createMovie\n                        \n                    \n                \n            \n            \n                \n                    \n                    createMovie(post: CreateMovieDto, req: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/movie/movie.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                                CreateMovieDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteMovie\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteMovie(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/movie/movie.controller.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMovieById\n                        \n                    \n                \n            \n            \n                \ngetMovieById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiParam({name: 'id', required: true, description: 'Should be an id of a post that exists in the database', type: Number})@ApiResponse({status: 200, description: 'A post has been successfully fetched', type: Movie})@ApiResponse({status: 404, description: 'A post with given id does not exist.'})@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/movie/movie.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateMovie\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateMovie(id: string, movie: UpdateMovieDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/movie/movie.controller.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    movie\n                                    \n                                                UpdateMovieDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n  ClassSerializerInterceptor,\n  UseInterceptors,\n  Req,\n} from '@nestjs/common';\nimport { MovieService } from './services/movie.service';\nimport { CreateMovieDto } from './dto/create-movie.dto';\nimport { UpdateMovieDto } from './dto/update-movie.dto';\nimport JwtAuthenticationGuard from '../authentication/guards/jwt-authentication.guard';\nimport { Movie } from './movie.entity';\nimport { ApiParam, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport RequestWithUser from 'src/authentication/interface/requestWithUser.interface';\n\n@Controller('movie')\n@ApiTags('movies')\n@UseInterceptors(ClassSerializerInterceptor)\n@UseGuards(JwtAuthenticationGuard)\nexport class MovieController {\n  constructor(private readonly movieService: MovieService) {}\n\n  @Get(':id')\n  @ApiParam({\n    name: 'id',\n    required: true,\n    description: 'Should be an id of a post that exists in the database',\n    type: Number,\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'A post has been successfully fetched',\n    type: Movie,\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'A post with given id does not exist.',\n  })\n  @UseGuards(JwtAuthenticationGuard)\n  getMovieById(@Param('id') id: string): Promise {\n    const movieId = Number(id);\n    return this.movieService.getMovie(movieId);\n  }\n\n  @Post()\n  @UseGuards(JwtAuthenticationGuard)\n  async createMovie(@Body() post: CreateMovieDto, @Req() req: RequestWithUser) {\n    return this.movieService.createMovie(post, req.user);\n  }\n\n  @Patch(':id')\n  @UseGuards(JwtAuthenticationGuard)\n  async updateMovie(@Param('id') id: string, @Body() movie: UpdateMovieDto) {\n    return this.movieService.updateMovie(Number(id), movie);\n  }\n\n  @Delete(':id')\n  @UseGuards(JwtAuthenticationGuard)\n  async deleteMovie(@Param('id') id: string) {\n    return this.movieService.deleteMovie(Number(id));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MovieCountResult.html":{"url":"interfaces/MovieCountResult.html","title":"interface - MovieCountResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MovieCountResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/movie/types/movieCountBody.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            count\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface MovieCountResult {\n  count: number;\n}\n\nexport default MovieCountResult;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MovieModule.html":{"url":"modules/MovieModule.html","title":"module - MovieModule","body":"\n                   \n\n\n\n\n    Modules\n    MovieModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_MovieModule\n\n\n\ncluster_MovieModule_imports\n\n\n\ncluster_MovieModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nMovieModule\n\nMovieModule\n\nMovieModule -->\n\nUsersModule->MovieModule\n\n\n\n\n\nMovieService\n\nMovieService\n\nMovieModule -->\n\nMovieService->MovieModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/movie/movie.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MovieService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MovieController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MovieService } from './services/movie.service';\nimport { MovieController } from './movie.controller';\nimport { Movie } from './movie.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Movie]), UsersModule],\n  controllers: [MovieController],\n  providers: [MovieService],\n})\nexport class MovieModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MovieNotFoundException.html":{"url":"classes/MovieNotFoundException.html","title":"class - MovieNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MovieNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/movie/exceptions/movieNotFound.exception.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(movieId: number)\n                    \n                \n                        \n                            \n                                Defined in src/movie/exceptions/movieNotFound.exception.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        movieId\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\n\nclass MovieNotFoundException extends NotFoundException {\n  constructor(movieId: number) {\n    super(`Movie with id ${movieId} not found`);\n  }\n}\n\nexport default MovieNotFoundException;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MovieSearchBody.html":{"url":"interfaces/MovieSearchBody.html","title":"interface - MovieSearchBody","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MovieSearchBody\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/movie/types/movieSearchBody.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            gender\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            publisherId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        gender\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        gender:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        publisherId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        publisherId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface MovieSearchBody {\n  id: number;\n  gender: string;\n  publisherId: number;\n}\n\nexport default MovieSearchBody;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MovieSearchResult.html":{"url":"interfaces/MovieSearchResult.html","title":"interface - MovieSearchResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MovieSearchResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/movie/types/movieSearchResponse.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            hits\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        hits\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hits:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import MovieSearchBody from './movieSearchBody.interface';\n\ninterface MovieSearchResult {\n  hits: {\n    total: {\n      value: number;\n    };\n    hits: Array;\n  };\n}\n\nexport default MovieSearchResult;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MovieService.html":{"url":"injectables/MovieService.html","title":"injectable - MovieService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MovieService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/movie/services/movie.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createMovie\n                            \n                            \n                                    Async\n                                deleteMovie\n                            \n                            \n                                getMovie\n                            \n                            \n                                    Async\n                                updateMovie\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(moviesRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/movie/services/movie.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        moviesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createMovie\n                        \n                    \n                \n            \n            \n                \n                    \n                    createMovie(movie: CreateMovieDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/movie/services/movie.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    movie\n                                    \n                                                CreateMovieDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteMovie\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteMovie(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/movie/services/movie.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMovie\n                        \n                    \n                \n            \n            \n                \ngetMovie(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/movie/services/movie.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateMovie\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateMovie(id: number, movie: UpdateMovieDto)\n                \n            \n\n\n            \n                \n                    Defined in src/movie/services/movie.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    movie\n                                    \n                                                UpdateMovieDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CreateMovieDto } from '../dto/create-movie.dto';\nimport { UpdateMovieDto } from '../dto/update-movie.dto';\nimport { Movie } from '../movie.entity';\nimport { User } from 'src/users/entities/user.entity';\nimport MovieNotFoundException from '../exceptions/movieNotFound.exception';\nimport { options } from '@hapi/joi';\n\n@Injectable()\nexport class MovieService {\n  constructor(\n    @InjectRepository(Movie)\n    private moviesRepository: Repository,\n  ) {}\n\n  async createMovie(movie: CreateMovieDto, user: User) {\n    const newMovie = await this.moviesRepository.create({\n      ...movie,\n      publisher: user,\n    });\n    await this.moviesRepository.save(newMovie);\n    return newMovie;\n  }\n\n  async updateMovie(id: number, movie: UpdateMovieDto) {\n    await this.moviesRepository.update(id, movie);\n    const updatedMovie = await this.moviesRepository.findOne(\n      options(id, 'publisher'),\n    );\n    if (updatedMovie) {\n      return updatedMovie;\n    }\n    throw new MovieNotFoundException(id);\n  }\n\n  async deleteMovie(id: number) {\n    const deleteResponse = await this.moviesRepository.delete(id);\n    if (!deleteResponse.affected) {\n      throw new MovieNotFoundException(id);\n    }\n  }\n\n  getMovie(id: number) {\n    return this.moviesRepository.findOneByOrFail({ id: id });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/dto/register.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                fullName\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                phoneNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({deprecated: true, description: 'Use the name property instead'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(7)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Has to match a regular expression: /^\\+[1-9]\\d{1,14}$/', example: '+123123123123'})@IsString()@IsNotEmpty()@Matches(/^\\+[1-9]\\d{1,14}$/)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:36\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsString,\n  IsNotEmpty,\n  MinLength,\n  Matches,\n} from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class RegisterDto {\n  @IsEmail()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  @ApiProperty({\n    deprecated: true,\n    description: 'Use the name property instead',\n  })\n  fullName: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(7)\n  password: string;\n\n  @ApiProperty({\n    description: 'Has to match a regular expression: /^\\\\+[1-9]\\\\d{1,14}$/',\n    example: '+123123123123',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^\\+[1-9]\\d{1,14}$/)\n  phoneNumber: string;\n}\n\nexport default RegisterDto;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithUser.html":{"url":"interfaces/RequestWithUser.html","title":"interface - RequestWithUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/interface/requestWithUser.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         User\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         User\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Request } from 'express';\nimport { User } from '../../users/entities/user.entity';\n\ninterface RequestWithUser extends Request {\n  user: User;\n}\n\nexport default RequestWithUser;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenPayload.html":{"url":"interfaces/TokenPayload.html","title":"interface - TokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/interface/tokenPayload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            userId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface TokenPayload {\n  userId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateMovieDto.html":{"url":"classes/UpdateMovieDto.html","title":"class - UpdateMovieDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateMovieDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/movie/dto/update-movie.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateMovieDto } from './create-movie.dto';\n\nexport class UpdateMovieDto extends PartialType(CreateMovieDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                currentHashedRefreshToken\n                            \n                            \n                                    Public\n                                email\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                movies\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                password\n                            \n                            \n                                    Public\n                                    Optional\n                                phoneNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        currentHashedRefreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        movies\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Movie[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@OneToMany(undefined, movie => movie.publisher)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:14\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\nimport { Exclude } from 'class-transformer';\nimport { Movie } from '../../movie/movie.entity';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column({ unique: true })\n  public email: string;\n\n  @Column({ nullable: true })\n  public phoneNumber?: string;\n\n  @Column()\n  public name: string;\n\n  @Column({ nullable: true })\n  @Exclude()\n  public password?: string;\n\n  @Column({ nullable: true })\n  @Exclude()\n  public currentHashedRefreshToken?: string;\n\n  @Column({ nullable: true })\n  @OneToMany(() => Movie, (movie: Movie) => movie.publisher)\n  public movies?: Movie[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOkResponse()@ApiConflictResponse()@UseGuards(LocalAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Body, UseGuards } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { ApiConflictResponse, ApiOkResponse } from '@nestjs/swagger';\nimport { LocalAuthenticationGuard } from '../authentication/guards/localAuthentication.guard';\n\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Post()\n  @ApiOkResponse()\n  @ApiConflictResponse()\n  @UseGuards(LocalAuthenticationGuard)\n  create(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.create(createUserDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './entities/user.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                getByEmail\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                getUserIfRefreshTokenMatches\n                            \n                            \n                                    Async\n                                removeRefreshToken\n                            \n                            \n                                    Async\n                                setCurrentRefreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(userData: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userData\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserIfRefreshTokenMatches\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserIfRefreshTokenMatches(refreshToken: string, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeRefreshToken(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        setCurrentRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    setCurrentRefreshToken(refreshToken: string, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from './entities/user.entity';\nimport CreateUserDto from './dto/create-user.dto';\nimport * as bcrypt from 'bcrypt';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository,\n  ) {}\n\n  async getById(id: number) {\n    const user = await this.usersRepository.findOneBy({ id });\n    if (user) {\n      return user;\n    }\n    throw new HttpException(\n      'User with this id does not exist',\n      HttpStatus.NOT_FOUND,\n    );\n  }\n\n  async getByEmail(email: string) {\n    const user = await this.usersRepository.findOneBy({ email });\n    if (user) {\n      return user;\n    }\n    throw new HttpException(\n      'User with this email does not exist',\n      HttpStatus.NOT_FOUND,\n    );\n  }\n\n  async create(userData: CreateUserDto) {\n    const newUser = await this.usersRepository.create(userData);\n    await this.usersRepository.save(newUser);\n    return newUser;\n  }\n\n  async setCurrentRefreshToken(refreshToken: string, userId: number) {\n    const currentHashedRefreshToken = await bcrypt.hash(refreshToken, 10);\n    await this.usersRepository.update(userId, {\n      currentHashedRefreshToken,\n    });\n  }\n\n  async getUserIfRefreshTokenMatches(refreshToken: string, userId: number) {\n    const user = await this.getById(userId);\n\n    const isRefreshTokenMatching = await bcrypt.compare(\n      refreshToken,\n      user.currentHashedRefreshToken.toString(),\n    );\n\n    if (isRefreshTokenMatching) {\n      return user;\n    }\n  }\n\n  async removeRefreshToken(userId: number) {\n    return this.usersRepository.update(userId, {\n      currentHashedRefreshToken: null,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/authentication/authentication.controller.ts\n            \n            controller\n            AuthenticationController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/authentication/authentication.service.ts\n            \n            injectable\n            AuthenticationService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/authentication/cacheKey.constant.ts\n            \n            variable\n            GET_CACHE_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/dto/login.dto.ts\n            \n            class\n            LogInDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/dto/register.dto.ts\n            \n            class\n            RegisterDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/authentication/guards/jwt-authentication.guard.ts\n            \n            injectable\n            JwtAuthenticationGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/guards/jwt-refresh.guard.ts\n            \n            injectable\n            JwtRefreshGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/guards/localAuthentication.guard.ts\n            \n            injectable\n            LocalAuthenticationGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/httpCache.interceptor.ts\n            \n            injectable\n            HttpCacheInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/authentication/interface/requestWithUser.interface.ts\n            \n            interface\n            RequestWithUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/authentication/interface/tokenPayload.interface.ts\n            \n            interface\n            TokenPayload\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/authentication/strategy/jwt-refresh-token.strategy.ts\n            \n            injectable\n            JwtRefreshTokenStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/strategy/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/strategy/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/movie/dto/create-movie.dto.ts\n            \n            class\n            CreateMovieDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/movie/dto/update-movie.dto.ts\n            \n            class\n            UpdateMovieDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/movie/exceptions/movieNotFound.exception.ts\n            \n            class\n            MovieNotFoundException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/movie/movie.controller.ts\n            \n            controller\n            MovieController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/movie/movie.entity.ts\n            \n            entity\n            Movie\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/movie/services/movie.service.ts\n            \n            injectable\n            MovieService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/movie/types/movieCountBody.interface.ts\n            \n            interface\n            MovieCountResult\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/movie/types/movieSearchBody.interface.ts\n            \n            interface\n            MovieSearchBody\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/movie/types/movieSearchResponse.interface.ts\n            \n            interface\n            MovieSearchResult\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/8)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.19\n        \n            @hapi/joi : ^17.1.1\n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^9.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/swagger : ^6.1.1\n        \n            @nestjs/typeorm : ^9.0.1\n        \n            @types/bcrypt : ^5.0.0\n        \n            @types/hapi__joi : ^17.1.8\n        \n            @types/passport-jwt : ^3.0.6\n        \n            @types/passport-local : ^1.0.34\n        \n            bcrypt : ^5.0.1\n        \n            cache-manager : ^4.1.0\n        \n            cache-manager-redis-store : ^2.0.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            cookie : ^0.5.0\n        \n            cookie-parser : ^1.4.6\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            pg : ^8.8.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            typeorm : ^0.3.9\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PostgresErrorCode   (src/.../postgresErrorCodes.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/database/postgresErrorCodes.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostgresErrorCode\n                    \n                \n                        \n                            \n                                 UniqueViolation\n                            \n                        \n                        \n                            \n                                Value : 23505\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n   My LinkedIn Profile\n Check project structure and To Do list   \n\n  NestJS is a progressive Node.js framework for building efficient and scalable server-side applications.\n  \n Checck API details here after starting project\nDescription\nThis repository is created to solve the backend problem to MKS Developer,\nUsing Techs like:\nTypeScript\nTypeORM\nSWAGGER\nPOSTGRESQL\nPGADMIN\nDOCKER\nDOCKER-COMPOSE\nREDIS\nExpress Framework\nNestJS\nAzure DeployDocker Installion (RECOMMENDED)\nIf you do not have Docker neither docker-compose you can follow this steps:\n\nWindows with WSL\nLinux\n\nDocker makes the setup easier\n$ docker-compose build # THIS WILL BUILD THE CONTAINER\n$ docker-compose up # THIS WILL EXPOSE THE APPLICATION \n$ docker-compose down # THIS WILL KILL THE APPLICATIONLocal Installation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:cov\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthenticationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MovieModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthenticationModule\n\n\n\ncluster_AuthenticationModule_providers\n\n\n\ncluster_MovieModule\n\n\n\ncluster_MovieModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthenticationModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nMovieModule\n\nMovieModule\n\nAppModule -->\n\nMovieModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthenticationModule -->\n\nUsersModule->AuthenticationModule\n\n\n\nMovieModule -->\n\nUsersModule->MovieModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nAuthenticationModule -->\n\nAuthenticationService->AuthenticationModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthenticationModule -->\n\nJwtStrategy->AuthenticationModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthenticationModule -->\n\nLocalStrategy->AuthenticationModule\n\n\n\n\n\nMovieService\n\nMovieService\n\nMovieModule -->\n\nMovieService->MovieModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    2 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    10 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    5 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : Backend API solution to developer job\n        \n            License : UNLICENSED\n        \n            Author : Rafael Nilson Witt\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            GET_CACHE_KEY   (src/.../cacheKey.constant.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/authentication/cacheKey.constant.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GET_CACHE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'GET_CACHE'\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
