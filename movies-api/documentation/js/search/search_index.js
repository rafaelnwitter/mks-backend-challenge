var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.267,1,2.138]],["body/modules/AppModule.html",[0,1.608,1,4.105,2,1.338,3,2.047,4,2.473,5,2.473,6,3.364,7,0.029,8,3.364,9,3.364,10,3.065,11,2.451,12,1.742,13,1.587,14,0.25,15,0.25,16,0.217,17,2.947,18,2.451,19,0.648,20,2.947,21,2.473,22,2.473,23,1.928,24,1.928,25,1.742,26,1.928,27,2.473,28,0.617,29,2.161,30,1.455,31,2.947,32,2.947,33,2.473,34,2.947,35,2.947,36,2.947,37,2.947,38,2.947,39,5.846,40,2.947,41,4.146,42,2.947,43,2.947,44,2.947,45,2.947,46,2.947,47,2.161,48,2.947,49,2.947,50,2.473,51,1.338,52,1.928,53,0.25,54,0.067,55,0.018,56,0.018]],["title/controllers/AuthenticationController.html",[57,1.613,58,2.138]],["body/controllers/AuthenticationController.html",[7,0.029,13,1.02,14,0.161,15,0.161,16,0.139,19,0.61,23,2.411,24,1.239,25,1.12,26,1.239,28,0.397,51,0.86,53,0.161,54,0.043,55,0.013,56,0.013,57,0.935,58,1.95,59,1.59,60,1.389,61,1.59,62,0.336,63,1.25,64,2.981,65,2.445,66,2.981,67,2.981,68,1.762,69,2.502,70,1.894,71,3.79,72,2.064,73,1.894,74,1.205,75,1.894,76,1.905,77,1.301,78,0.931,79,1.762,80,3.522,81,1.905,82,1.894,83,1.894,84,1.894,85,2.411,86,1.894,87,1.605,88,1.894,89,1.894,90,1.894,91,1.894,92,1.894,93,1.894,94,1.894,95,1.59,96,2.471,97,2.981,98,1.894,99,2.502,100,1.389,101,1.894,102,1.894,103,1.894,104,1.389,105,1.389,106,1.894,107,1.389,108,1.894,109,1.819,110,1.389,111,1.59,112,1.894,113,1.12,114,1.894,115,1.12,116,2.981,117,1.59,118,2.981,119,1.12,120,1.894,121,1.429,122,1.239,123,1.239,124,1.894,125,1.894,126,1.894,127,1.894,128,0.935,129,1.985,130,1.605,131,1.894,132,1.894,133,1.894,134,1.752,135,1.894,136,1.894,137,1.894,138,1.894,139,2.687,140,4.18,141,1.894,142,2.981,143,3.065,144,2.981,145,2.981,146,1.59,147,2.981,148,1.894,149,1.752,150,1.894,151,2.981,152,1.239,153,1.389,154,1.894,155,1.95,156,1.894,157,1.894,158,2.502,159,1.894,160,1.59,161,1.59,162,1.894,163,1.894,164,1.894,165,1.894,166,1.894]],["title/modules/AuthenticationModule.html",[0,1.267,6,1.931]],["body/modules/AuthenticationModule.html",[0,1.495,2,1.209,3,1.903,6,3.64,7,0.03,10,2.963,11,2.279,12,1.574,13,1.434,14,0.226,15,0.226,16,0.196,18,2.938,19,0.653,22,3.236,23,1.742,24,1.742,25,1.574,26,2.523,27,2.234,28,0.558,29,3.645,30,1.314,33,2.234,47,1.952,51,1.751,52,2.523,53,0.226,54,0.06,55,0.017,56,0.017,58,2.966,65,1.209,107,2.828,109,2.715,110,1.952,167,2.234,168,2.662,169,2.234,170,3.252,171,3.252,172,2.662,173,2.662,174,3.856,175,1.209,176,2.662,177,2.662,178,1.952,179,3.354,180,2.662,181,2.662,182,3.236,183,2.234,184,2.662,185,2.662,186,2.662,187,2.662,188,2.662,189,2.234,190,2.234,191,2.662,192,2.234,193,2.662]],["title/injectables/AuthenticationService.html",[109,1.613,194,0.63]],["body/injectables/AuthenticationService.html",[7,0.03,14,0.12,15,0.12,16,0.104,19,0.508,28,0.297,30,0.699,50,1.976,53,0.12,54,0.032,55,0.01,56,0.01,61,1.188,62,0.251,63,0.987,65,2.209,68,0.837,69,1.976,74,1.242,76,1.876,77,1.28,78,0.863,79,1.735,81,1.876,87,1.268,95,1.976,96,2.083,99,1.976,109,1.162,111,1.188,121,1.636,122,0.926,128,1.162,129,2.273,130,1.628,134,1.769,139,3.044,143,2.217,149,1.267,152,2.559,155,2.559,160,1.976,161,1.976,178,1.038,179,2.645,189,1.976,192,1.976,194,0.454,195,0.549,196,1.188,197,4.207,198,2.355,199,3.523,200,2.355,201,2.355,202,2.355,203,3.023,204,1.416,205,4.474,206,1.416,207,2.355,208,1.988,209,4.221,210,1.416,211,1.162,212,1.416,213,2.355,214,2.4,215,1.416,216,3.096,217,2.355,218,1.416,219,2.355,220,1.416,221,1.416,222,1.416,223,4.221,224,1.416,225,2.868,226,1.038,227,1.727,228,1.897,229,1.038,230,1.188,231,1.416,232,2.217,233,3.023,234,2.355,235,2.355,236,2.355,237,3.911,238,3.911,239,3.911,240,3.023,241,1.416,242,1.416,243,1.416,244,1.188,245,2.355,246,2.355,247,1.416,248,0.699,249,1.416,250,2.355,251,2.355,252,1.416,253,1.416,254,2.584,255,2.305,256,1.416,257,1.188,258,3.023,259,1.416,260,1.416,261,3.023,262,1.416,263,1.416,264,1.416,265,2.355,266,2.355,267,2.355,268,1.188,269,2.355]],["title/classes/CreateMovieDto.html",[54,0.074,270,1.76]],["body/classes/CreateMovieDto.html",[7,0.029,14,0.315,15,0.315,16,0.273,19,0.404,53,0.315,54,0.11,55,0.021,56,0.021,62,0.659,72,2.455,74,1.433,77,1.547,78,1.043,208,2.189,270,2.615,271,1.836,272,4.81,273,2.728,274,1.882,275,3.965,276,3.965,277,5.406,278,3.719,279,3.719,280,3.719,281,4.203,282,4.203,283,2.433]],["title/classes/CreateUserDto.html",[54,0.074,284,1.76]],["body/classes/CreateUserDto.html",[7,0.028,14,0.343,15,0.343,16,0.297,53,0.434,54,0.092,55,0.023,56,0.023,62,0.716,74,1.491,77,1.61,78,1.085,208,2.239,211,2.776,248,2.776,271,1.996,274,1.987,284,3.03,285,4.963,286,2.966,287,4.044,288,4.044,289,4.044,290,1.837]],["title/modules/DatabaseModule.html",[0,1.267,8,1.931]],["body/modules/DatabaseModule.html",[0,1.893,2,1.704,7,0.029,8,2.886,14,0.318,15,0.318,16,0.276,18,2.886,19,0.589,28,0.786,29,3.581,30,1.851,47,2.751,53,0.318,54,0.085,55,0.021,56,0.021,78,0.724,107,2.751,179,3.399,182,3.148,183,3.148,248,1.851,291,3.751,292,2.751,293,2.02,294,3.751,295,3.751,296,3.751,297,3.751,298,3.751,299,3.751,300,3.751,301,3.148,302,3.751,303,2.454,304,3.751,305,3.751,306,3.751,307,2.886,308,3.751]],["title/injectables/JwtAuthenticationGuard.html",[115,1.931,194,0.63]],["body/injectables/JwtAuthenticationGuard.html",[7,0.029,14,0.383,15,0.383,16,0.332,19,0.596,28,0.947,53,0.383,54,0.102,55,0.024,56,0.024,115,3.247,175,2.054,194,1.059,195,1.753,290,2.054,309,3.316,310,3.795,311,3.316,312,1.895,313,3.795]],["title/injectables/JwtRefreshGuard.html",[123,2.138,194,0.63]],["body/injectables/JwtRefreshGuard.html",[7,0.028,14,0.379,15,0.379,16,0.329,19,0.592,28,0.938,53,0.379,54,0.101,55,0.024,56,0.024,68,2.646,123,3.571,152,2.928,175,2.033,194,1.053,195,1.735,290,2.033,309,3.282,311,3.282,312,1.876,313,3.756,314,3.756]],["title/injectables/JwtRefreshTokenStrategy.html",[194,0.63,315,2.396]],["body/injectables/JwtRefreshTokenStrategy.html",[7,0.029,14,0.236,15,0.236,16,0.204,19,0.624,28,0.582,30,1.372,53,0.236,54,0.063,55,0.018,56,0.018,62,0.492,63,1.667,65,2.11,68,2.998,74,1.055,76,1.667,77,1.138,78,0.767,79,1.542,80,3.761,81,1.165,87,1.497,121,1.966,122,1.819,128,1.963,129,2.142,130,2.142,134,1.667,139,1.643,152,1.819,153,2.917,175,1.262,179,3.3,194,0.767,195,1.078,228,2.731,229,2.038,232,3.407,307,1.643,312,1.165,315,2.917,316,3.898,317,2.333,318,2.917,319,2.333,320,3.898,321,2.779,322,3.978,323,2.779,324,2.333,325,2.917,326,1.819,327,2.917,328,2.917,329,1.643,330,2.038,331,2.333,332,2.779,333,2.779,334,2.333,335,2.779,336,2.779,337,2.779,338,2.779,339,2.779]],["title/injectables/JwtStrategy.html",[170,1.931,194,0.63]],["body/injectables/JwtStrategy.html",[7,0.029,14,0.258,15,0.258,16,0.224,19,0.64,28,0.639,30,1.505,53,0.258,54,0.069,55,0.019,56,0.019,62,0.54,63,1.78,65,2.219,74,1.126,76,1.78,77,1.215,78,0.819,79,1.646,80,2.778,81,1.278,87,1.642,121,2.049,122,1.995,128,2.096,129,2.287,130,2.287,134,1.78,170,2.51,175,1.385,179,3.4,190,2.559,194,0.819,195,1.182,228,2.846,229,2.236,232,2.236,312,1.278,318,3.114,319,2.559,320,4.1,324,2.559,325,2.236,326,1.995,327,2.236,328,2.236,329,1.803,330,2.236,331,2.559,334,2.559,340,2.559,341,3.049,342,4.246,343,3.049,344,2.559,345,3.049,346,3.049,347,3.049]],["title/injectables/LocalAuthenticationGuard.html",[113,1.931,194,0.63]],["body/injectables/LocalAuthenticationGuard.html",[7,0.029,14,0.387,15,0.387,16,0.336,19,0.6,28,0.957,53,0.387,54,0.103,55,0.024,56,0.024,113,3.267,175,2.075,194,1.066,195,1.771,311,3.351,312,1.915,348,3.834,349,4.569]],["title/injectables/LocalStrategy.html",[171,1.931,194,0.63]],["body/injectables/LocalStrategy.html",[7,0.029,14,0.282,15,0.282,16,0.244,19,0.622,28,0.697,53,0.282,54,0.075,55,0.02,56,0.02,62,0.589,63,1.889,65,2.322,74,1.195,76,1.889,77,1.29,78,0.87,79,1.747,81,1.394,109,2.915,110,2.439,128,1.641,134,1.394,149,1.394,171,2.665,175,1.51,194,0.87,195,1.289,208,2.121,211,2.225,248,2.705,312,1.394,318,3.306,325,2.439,326,2.176,328,2.439,330,2.439,344,2.791,350,2.791,351,3.326,352,3.326,353,4.507,354,3.326,355,3.783,356,2.791,357,2.791,358,2.439,359,3.326,360,3.326]],["title/classes/LogInDto.html",[54,0.074,85,2.138]],["body/classes/LogInDto.html",[7,0.029,14,0.334,15,0.334,16,0.289,19,0.427,53,0.427,54,0.114,55,0.022,56,0.022,62,0.697,72,2.287,74,1.335,78,0.972,85,3.634,208,2.102,211,2.741,248,2.741,271,1.942,274,1.952,281,3.693,282,3.693,283,2.575,290,1.787,361,3.303,362,4.661,363,3.935,364,3.303,365,3.935,366,3.303,367,3.303]],["title/entities/Movie.html",[368,1.931,369,1.76]],["body/entities/Movie.html",[7,0.029,14,0.289,15,0.289,16,0.251,19,0.371,53,0.289,54,0.077,55,0.02,56,0.02,62,0.605,72,2.517,74,1.469,77,1.483,78,1.069,197,4.716,208,2.138,214,2.265,274,1.779,275,3.801,276,3.801,290,1.552,303,2.235,368,2.713,369,2.792,370,2.867,371,2.792,372,5.105,373,3.416,374,3.416,375,4.35,376,3.416,377,3.416,378,1.84]],["title/controllers/MovieController.html",[57,1.613,379,2.138]],["body/controllers/MovieController.html",[7,0.029,14,0.187,15,0.187,16,0.162,19,0.579,28,0.462,51,1.003,53,0.187,54,0.05,55,0.015,56,0.015,57,1.09,60,1.619,62,0.391,63,1.407,72,2.215,74,1.293,76,1.901,77,1.396,78,0.991,79,1.758,81,2.045,100,2.461,104,3.326,105,1.619,115,1.305,117,1.853,119,1.305,130,1.189,134,2.045,158,4.094,208,2.023,214,1.09,257,2.816,270,2.767,301,2.816,307,1.984,355,2.816,358,1.619,369,1.807,371,3.095,379,2.196,380,1.853,381,1.807,382,3.806,383,3.356,384,2.816,385,2.816,386,2.208,387,2.208,388,2.208,389,2.208,390,2.208,391,2.208,392,2.208,393,3.356,394,2.196,395,2.208,396,2.208,397,1.853,398,2.208,399,2.208,400,1.853,401,3.252,402,2.208,403,2.208,404,2.208,405,2.208,406,1.853,407,2.186,408,1.853,409,1.445,410,2.461,411,1.853,412,2.208,413,1.619,414,4.535,415,3.806,416,3.356,417,2.208,418,2.208,419,2.208,420,1.853,421,2.208,422,2.208,423,1.853,424,1.853,425,2.208,426,1.853,427,1.853,428,2.208,429,1.853,430,1.853,431,2.208]],["title/modules/MovieModule.html",[0,1.267,9,1.931]],["body/modules/MovieModule.html",[0,1.914,2,1.733,3,2.437,7,0.029,9,3.63,11,2.919,12,2.256,13,2.055,14,0.323,15,0.323,16,0.28,18,2.256,19,0.65,28,0.799,51,2.242,52,3.23,53,0.323,54,0.086,55,0.022,56,0.022,292,2.799,293,2.055,369,2.055,379,3.581,407,3.307,408,3.203,413,2.799,432,3.203,433,3.203,434,3.816,435,3.816,436,3.816]],["title/injectables/MovieService.html",[194,0.63,407,1.76]],["body/injectables/MovieService.html",[7,0.029,14,0.181,15,0.181,16,0.157,19,0.55,28,0.447,53,0.181,54,0.048,55,0.014,56,0.014,62,0.378,63,1.37,65,2.669,74,1.344,76,2.013,77,1.45,78,0.927,79,1.862,81,2.013,87,2.14,128,1.613,129,1.149,134,1.867,139,2.633,155,3.316,194,0.631,195,0.827,214,2.754,225,1.564,226,1.564,254,2.397,255,2.139,270,2.399,275,1.564,276,1.564,293,1.149,369,3.067,371,2.587,378,1.149,381,1.149,384,2.743,385,3.335,397,2.743,400,2.743,401,2.633,406,1.79,407,2.14,409,1.396,410,2.397,411,1.79,413,1.564,437,2.133,438,1.79,439,3.269,440,4.455,441,3.269,442,2.133,443,3.523,444,2.133,445,3.269,446,3.269,447,2.133,448,2.133,449,3.269,450,2.133,451,2.133,452,2.133,453,2.133,454,2.133,455,2.133,456,2.133,457,1.79,458,2.133,459,3.269,460,2.133,461,2.133,462,2.133,463,2.133,464,3.269,465,3.269,466,2.743,467,2.133,468,3.974,469,2.133,470,2.133,471,2.133,472,2.133]],["title/classes/RegisterDto.html",[54,0.074,96,1.931]],["body/classes/RegisterDto.html",[7,0.029,14,0.245,15,0.245,16,0.212,19,0.444,53,0.346,54,0.093,55,0.018,56,0.018,62,0.512,72,2.473,74,1.444,77,1.558,78,1.05,96,2.805,119,1.708,208,2.198,211,2.342,248,2.342,271,1.426,274,1.585,281,3.784,282,3.784,283,1.89,290,1.312,307,2.417,362,3.983,364,2.425,366,2.425,367,2.425,394,3.105,473,2.425,474,4.745,475,3.983,476,2.889,477,2.889,478,4.089,479,4.089,480,4.089,481,2.889,482,2.889,483,2.889,484,2.889,485,2.889,486,4.089,487,4.089,488,4.089,489,4.089,490,4.745,491,4.089,492,2.889,493,2.889,494,2.889,495,4.745,496,2.889,497,2.889,498,2.889,499,2.889]],["title/interfaces/RequestWithUser.html",[71,2.138,500,1.931]],["body/interfaces/RequestWithUser.html",[7,0.028,14,0.361,15,0.361,16,0.313,19,0.574,53,0.361,55,0.023,56,0.023,62,0.755,71,3.769,78,0.822,80,3.769,149,2.713,274,2.052,290,1.934,312,2.219,329,2.518,357,3.574,500,2.518,501,3.124,502,3.574]],["title/interfaces/TokenPayload.html",[228,1.76,500,1.931]],["body/interfaces/TokenPayload.html",[7,0.028,14,0.387,15,0.387,16,0.336,53,0.387,55,0.024,56,0.024,62,0.809,78,0.881,214,2.932,216,4.527,228,2.976,274,2.143,500,2.701,501,3.351,503,3.834]],["title/classes/UpdateMovieDto.html",[54,0.074,401,1.931]],["body/classes/UpdateMovieDto.html",[7,0.029,14,0.383,15,0.383,16,0.332,19,0.596,53,0.383,54,0.102,55,0.024,56,0.024,270,2.435,271,2.232,273,3.316,312,1.895,381,2.435,401,3.247,410,3.316,504,3.795,505,3.795,506,3.316,507,3.316,508,4.522]],["title/classes/UpdateUserDto.html",[54,0.074,509,2.138]],["body/classes/UpdateUserDto.html",[7,0.029,14,0.383,15,0.383,16,0.332,19,0.596,53,0.383,54,0.102,55,0.024,56,0.024,271,2.232,284,2.435,286,3.316,312,1.895,381,2.435,505,3.795,506,3.316,507,3.316,509,3.593,510,3.795,511,3.316,512,4.522]],["title/entities/User.html",[149,1.37,368,1.931]],["body/entities/User.html",[7,0.029,14,0.233,15,0.233,16,0.202,19,0.429,53,0.233,54,0.089,55,0.017,56,0.017,62,0.488,72,2.527,74,1.475,77,1.322,78,1.073,79,2.157,149,1.937,197,4.724,208,2.176,211,2.281,214,1.95,248,2.281,274,1.532,290,1.251,303,1.802,307,3.289,368,2.336,371,2.489,372,4.81,375,3.878,378,1.483,475,3.878,513,2.311,514,3.878,515,4.621,516,3.951,517,2.753,518,2.753,519,2.753,520,2.753,521,2.753,522,2.753,523,2.753,524,4.621,525,2.311,526,2.753,527,4.621]],["title/controllers/UsersController.html",[57,1.613,528,2.138]],["body/controllers/UsersController.html",[7,0.03,14,0.249,15,0.249,16,0.216,19,0.595,28,0.615,51,1.334,53,0.249,54,0.067,55,0.018,56,0.018,57,1.45,60,2.154,62,0.52,63,1.734,72,1.334,74,0.779,76,1.231,77,0.84,78,0.567,79,1.139,81,1.231,100,3.034,104,3.034,105,2.154,113,1.736,119,1.736,121,1.856,130,1.582,134,2.297,146,2.465,208,1.719,284,3.061,358,2.154,371,2.579,381,2.228,382,2.465,409,1.922,415,3.472,420,2.465,423,2.465,424,2.465,426,2.465,427,2.465,429,2.465,430,2.465,509,3.133,511,2.154,528,2.707,529,2.465,530,2.937,531,2.937,532,2.937,533,2.937,534,2.465,535,4.137,536,2.937,537,2.937,538,2.937,539,2.937,540,2.937,541,2.937,542,2.937]],["title/modules/UsersModule.html",[0,1.267,10,1.76]],["body/modules/UsersModule.html",[0,1.857,2,1.654,3,2.364,7,0.029,10,3.328,11,2.831,12,2.153,13,1.962,14,0.309,15,0.309,16,0.268,18,2.153,19,0.641,28,0.763,51,2.175,52,3.134,53,0.309,54,0.082,55,0.021,56,0.021,121,2.518,149,1.527,292,2.671,293,1.962,528,3.501,534,3.057,543,3.057,544,3.057,545,3.057,546,3.642,547,4.789,548,3.642,549,3.057,550,3.642]],["title/injectables/UsersService.html",[121,1.267,194,0.63]],["body/injectables/UsersService.html",[7,0.029,14,0.161,15,0.161,16,0.139,19,0.524,28,0.397,53,0.161,54,0.043,55,0.013,56,0.013,62,0.336,63,1.25,65,2.763,74,1.339,76,2.117,77,1.445,78,0.974,79,1.958,81,2.023,87,2.448,121,1.156,128,1.471,129,1.02,134,1.905,139,2.853,149,2.355,153,2.703,155,3.423,194,0.575,195,0.734,208,1.933,211,1.819,214,2.819,216,3.704,225,2.703,226,1.389,227,2.186,244,1.59,254,2.186,255,1.95,268,1.59,284,2.251,293,1.02,371,1.985,378,1.02,381,1.605,409,1.239,443,3.065,457,1.59,466,2.502,511,1.389,514,3.093,549,1.59,551,1.59,552,2.981,553,2.981,554,2.981,555,2.981,556,2.981,557,1.894,558,1.894,559,2.981,560,2.981,561,1.894,562,1.894,563,2.981,564,1.894,565,2.981,566,1.894,567,2.981,568,1.894,569,2.981,570,1.894,571,2.981,572,1.894,573,1.894,574,2.981,575,2.981,576,2.981,577,1.894,578,1.894,579,1.894,580,2.981,581,1.894,582,2.981,583,1.894,584,1.894]],["title/coverage.html",[585,3.266]],["body/coverage.html",[7,0.029,16,0.199,54,0.125,55,0.017,56,0.017,57,2.261,58,1.774,59,2.275,68,1.603,71,1.774,78,0.523,85,1.774,96,1.603,109,1.338,113,1.603,115,1.603,121,1.051,123,1.774,149,1.136,170,1.603,171,1.603,194,1.147,196,2.275,228,1.46,255,1.774,270,1.46,272,2.275,273,2.865,284,1.46,285,2.275,286,2.865,309,2.865,310,2.275,314,2.275,315,1.988,316,2.275,317,2.275,340,2.275,348,2.275,350,2.275,361,2.275,368,2.31,369,1.46,370,2.275,379,1.774,380,2.275,401,1.603,407,1.46,438,2.275,473,2.275,500,2.31,502,2.275,503,2.275,504,2.275,509,1.774,510,2.275,513,2.275,528,1.774,529,2.275,551,2.275,585,1.988,586,2.711,587,2.711,588,2.711,589,6.543,590,4.581,591,2.711,592,5.013,593,5.839,594,4.581,595,2.275,596,2.711,597,2.275,598,3.907,599,2.711,600,2.711,601,2.711,602,2.711]],["title/dependencies.html",[3,1.939,603,2.292]],["body/dependencies.html",[3,1.582,7,0.03,21,2.689,23,2.876,24,2.876,25,1.894,26,2.097,28,0.671,30,1.582,54,0.1,55,0.019,56,0.019,119,1.894,143,3.223,175,1.455,178,2.35,227,2.35,283,2.097,293,1.726,326,3.282,327,3.223,329,1.894,356,3.688,378,1.726,506,2.35,507,2.35,525,2.689,604,3.205,605,3.205,606,3.205,607,5.655,608,3.205,609,3.205,610,3.205,611,3.205,612,3.205,613,3.205,614,3.205,615,3.205,616,3.205,617,4.395,618,3.205,619,3.205,620,3.205,621,3.205,622,3.205,623,3.205,624,3.205,625,3.205,626,3.205,627,3.205,628,3.205,629,3.205,630,3.205,631,3.205,632,3.205,633,3.205,634,3.205,635,3.205,636,3.205,637,3.205,638,3.205,639,3.205,640,3.205]],["title/miscellaneous/enumerations.html",[641,1.787,642,3.297]],["body/miscellaneous/enumerations.html",[7,0.027,55,0.025,56,0.025,62,0.863,230,4.82,641,3.188,642,4.089,643,4.872,644,4.872,645,4.872,646,4.872,647,4.872]],["title/miscellaneous/functions.html",[641,1.787,648,3.297]],["body/miscellaneous/functions.html",[7,0.026,55,0.026,56,0.026,62,0.878,595,4.158,597,5.161,641,3.242,648,4.158,649,4.954]],["title/index.html",[62,0.484,650,2.731,651,2.731]],["body/index.html",[7,0.029,25,1.809,55,0.019,56,0.019,329,1.809,378,1.648,394,2.002,443,2.244,585,2.244,652,3.06,653,3.06,654,4.257,655,3.06,656,3.06,657,4.257,658,3.06,659,3.06,660,3.06,661,3.06,662,3.06,663,3.06,664,3.06,665,3.06,666,2.568,667,3.06,668,3.06,669,2.568,670,3.06,671,3.06,672,3.06,673,3.06,674,3.06,675,3.06,676,6.118,677,5.562,678,3.06,679,3.06,680,3.06,681,3.06,682,3.06,683,3.06,684,3.06,685,3.06,686,3.06,687,3.06,688,3.06,689,3.06,690,4.257,691,3.06,692,3.06,693,3.06,694,3.06,695,3.06,696,3.06,697,3.06,698,3.06,699,5.907,700,3.06,701,3.06,702,3.06,703,5.758,704,3.06,705,3.06,706,4.257,707,3.06,708,3.06,709,3.06,710,3.06,711,4.257,712,4.257,713,3.06,714,3.06,715,3.06]],["title/modules.html",[2,2.023]],["body/modules.html",[1,2.959,2,2.054,6,2.673,7,0.024,8,2.673,9,2.673,10,2.435,55,0.024,56,0.024,716,6.152,717,6.152,718,6.152,719,6.303,720,4.522,721,4.522]],["title/overview.html",[722,3.738]],["body/overview.html",[1,4.123,2,1.516,3,2.23,4,2.802,5,2.802,6,3.759,7,0.028,8,3.028,9,3.391,10,3.257,11,2.671,12,1.973,13,1.798,51,1.516,55,0.02,56,0.02,109,2.529,121,2.344,167,2.802,169,2.802,170,3.028,171,3.028,195,1.294,271,1.648,303,2.184,407,2.759,432,2.802,433,2.802,501,2.448,543,2.802,544,2.802,545,2.802,722,2.802,723,3.338,724,3.338,725,4.519,726,3.338,727,3.338]],["title/properties.html",[274,1.523,603,2.292]],["body/properties.html",[7,0.028,55,0.025,56,0.025,274,1.809,394,3.053,666,3.916,669,3.916,728,4.665,729,4.665,730,4.665,731,4.665,732,4.665,733,4.665,734,4.665,735,4.665,736,4.665,737,4.665,738,4.665]]],"invertedIndex":[["",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":589,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":729,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":635,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":624,"title":{},"body":{"dependencies.html":{}}}],["0.3.9",{"_index":640,"title":{},"body":{"dependencies.html":{}}}],["0.5.0",{"_index":625,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":623,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":628,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":593,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":594,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":592,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":598,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":590,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":599,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":600,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":591,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":489,"title":{},"body":{"classes/RegisterDto.html":{}}}],["1.0.0",{"_index":630,"title":{},"body":{"dependencies.html":{}}}],["1.0.34",{"_index":619,"title":{},"body":{"dependencies.html":{}}}],["1.1.19",{"_index":605,"title":{},"body":{"dependencies.html":{}}}],["1.4.6",{"_index":627,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":244,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{}}}],["120",{"_index":187,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["123123123123",{"_index":498,"title":{},"body":{"classes/RegisterDto.html":{}}}],["123123123123'})@isstring()@isnotempty()@matches(/^\\+[1",{"_index":492,"title":{},"body":{"classes/RegisterDto.html":{}}}],["17.1.1",{"_index":606,"title":{},"body":{"dependencies.html":{}}}],["17.1.8",{"_index":616,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":725,"title":{},"body":{"overview.html":{}}}],["2.0.0",{"_index":622,"title":{},"body":{"dependencies.html":{}}}],["2.2.0",{"_index":608,"title":{},"body":{"dependencies.html":{}}}],["23505",{"_index":647,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["3",{"_index":724,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":637,"title":{},"body":{"dependencies.html":{}}}],["3.0.6",{"_index":618,"title":{},"body":{"dependencies.html":{}}}],["4.0.0",{"_index":629,"title":{},"body":{"dependencies.html":{}}}],["4.1.0",{"_index":621,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":723,"title":{},"body":{"overview.html":{}}}],["5.0.0",{"_index":614,"title":{},"body":{"dependencies.html":{}}}],["5.0.1",{"_index":620,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":727,"title":{},"body":{"overview.html":{}}}],["6.1.1",{"_index":611,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":639,"title":{},"body":{"dependencies.html":{}}}],["8.8.0",{"_index":632,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":726,"title":{},"body":{"overview.html":{}}}],["9.0.0",{"_index":607,"title":{},"body":{"dependencies.html":{}}}],["9.0.1",{"_index":612,"title":{},"body":{"dependencies.html":{}}}],["9]\\\\d{1,14",{"_index":497,"title":{},"body":{"classes/RegisterDto.html":{}}}],["9]\\d{1,14",{"_index":490,"title":{},"body":{"classes/RegisterDto.html":{}}}],["__dirname",{"_index":304,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["accesstokencookie",{"_index":140,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["age=${this.configservice.get",{"_index":240,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["age=0",{"_index":269,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["already",{"_index":256,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["api",{"_index":730,"title":{},"body":{"properties.html":{}}}],["apibody",{"_index":118,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["apiconflictresponse",{"_index":535,"title":{},"body":{"controllers/UsersController.html":{}}}],["apinotfoundresponse",{"_index":414,"title":{},"body":{"controllers/MovieController.html":{}}}],["apiokresponse",{"_index":415,"title":{},"body":{"controllers/MovieController.html":{},"controllers/UsersController.html":{}}}],["apiparam",{"_index":416,"title":{},"body":{"controllers/MovieController.html":{}}}],["apiproperty",{"_index":495,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apiproperty({deprecated",{"_index":477,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apiproperty({description",{"_index":485,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apitags",{"_index":417,"title":{},"body":{"controllers/MovieController.html":{}}}],["apitags('movies",{"_index":419,"title":{},"body":{"controllers/MovieController.html":{}}}],["app",{"_index":701,"title":{},"body":{"index.html":{}}}],["application",{"_index":694,"title":{},"body":{"index.html":{}}}],["applicationlocal",{"_index":697,"title":{},"body":{"index.html":{}}}],["applications",{"_index":663,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["async",{"_index":65,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{}}}],["authenticate",{"_index":64,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["authenticate(@req",{"_index":159,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["authenticate(request",{"_index":70,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["authentication",{"_index":61,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["authentication.controller",{"_index":173,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["authentication.guard",{"_index":117,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/MovieController.html":{}}}],["authentication.guard.ts",{"_index":310,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"coverage.html":{}}}],["authentication.service",{"_index":110,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/LocalStrategy.html":{}}}],["authentication/authentication.module",{"_index":34,"title":{},"body":{"modules/AppModule.html":{}}}],["authentication/guards/jwt",{"_index":412,"title":{},"body":{"controllers/MovieController.html":{}}}],["authentication=${token",{"_index":236,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["authenticationcontroller",{"_index":58,"title":{"controllers/AuthenticationController.html":{}},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"coverage.html":{}}}],["authenticationmodule",{"_index":6,"title":{"modules/AuthenticationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules.html":{},"overview.html":{}}}],["authenticationservice",{"_index":109,"title":{"injectables/AuthenticationService.html":{}},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["authguard",{"_index":311,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/LocalAuthenticationGuard.html":{}}}],["authguard('jwt",{"_index":313,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{}}}],["authguard('local",{"_index":349,"title":{},"body":{"injectables/LocalAuthenticationGuard.html":{}}}],["author",{"_index":735,"title":{},"body":{"properties.html":{}}}],["autoloadentities",{"_index":308,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["available",{"_index":721,"title":{},"body":{"modules.html":{}}}],["await",{"_index":155,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{}}}],["azure",{"_index":678,"title":{},"body":{"index.html":{}}}],["backend",{"_index":666,"title":{},"body":{"index.html":{},"properties.html":{}}}],["bcrypt",{"_index":227,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcrypt.compare",{"_index":268,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{}}}],["bcrypt.hash(refreshtoken",{"_index":579,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt.hash(registrationdata.password",{"_index":243,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["body",{"_index":100,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/MovieController.html":{},"controllers/UsersController.html":{}}}],["bootstrap",{"_index":597,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":719,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":716,"title":{},"body":{"modules.html":{}}}],["build",{"_index":690,"title":{},"body":{"index.html":{}}}],["building",{"_index":658,"title":{},"body":{"index.html":{}}}],["cache",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"dependencies.html":{}}}],["cache_manager",{"_index":106,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["cachemanager",{"_index":132,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["cachemodule",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{}}}],["cachemodule.registerasync",{"_index":181,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["catch",{"_index":250,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["class",{"_index":54,"title":{"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":271,"title":{},"body":{"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"overview.html":{}}}],["classserializerinterceptor",{"_index":102,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["cluster_appmodule",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule",{"_index":167,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule_imports",{"_index":168,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["cluster_authenticationmodule_providers",{"_index":169,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_moviemodule",{"_index":432,"title":{},"body":{"modules/MovieModule.html":{},"overview.html":{}}}],["cluster_moviemodule_providers",{"_index":433,"title":{},"body":{"modules/MovieModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":543,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":545,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":544,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["column",{"_index":372,"title":{},"body":{"entities/Movie.html":{},"entities/User.html":{}}}],["column({nullable",{"_index":515,"title":{},"body":{"entities/User.html":{}}}],["column({unique",{"_index":518,"title":{},"body":{"entities/User.html":{}}}],["compodoc/compodoc",{"_index":604,"title":{},"body":{"dependencies.html":{}}}],["compose",{"_index":677,"title":{},"body":{"index.html":{}}}],["configmodule",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{}}}],["configmodule.forroot",{"_index":35,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":179,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/DatabaseModule.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('jwt_expiration_time')}s",{"_index":193,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["configservice.get('jwt_refresh_token_secret",{"_index":335,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["configservice.get('jwt_secret",{"_index":190,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('postgres_db",{"_index":302,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('postgres_host",{"_index":296,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('postgres_password",{"_index":300,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('postgres_port",{"_index":297,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('postgres_user",{"_index":299,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('redis_host",{"_index":184,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["configservice.get('redis_port",{"_index":185,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["const",{"_index":139,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":128,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{}}}],["constructor(authenticationservice",{"_index":351,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(configservice",{"_index":319,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["constructor(movierepository",{"_index":442,"title":{},"body":{"injectables/MovieService.html":{}}}],["constructor(private",{"_index":358,"title":{},"body":{"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"controllers/UsersController.html":{}}}],["constructor(usersrepository",{"_index":557,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":204,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["container",{"_index":691,"title":{},"body":{"index.html":{}}}],["contains",{"_index":456,"title":{},"body":{"injectables/MovieService.html":{}}}],["controller",{"_index":57,"title":{"controllers/AuthenticationController.html":{},"controllers/MovieController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AuthenticationController.html":{},"controllers/MovieController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('authentication",{"_index":125,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["controller('movie",{"_index":418,"title":{},"body":{"controllers/MovieController.html":{}}}],["controller('users",{"_index":537,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["cookie",{"_index":143,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"dependencies.html":{}}}],["coverage",{"_index":585,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":381,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":420,"title":{},"body":{"controllers/MovieController.html":{},"controllers/UsersController.html":{}}}],["create(createmoviedto",{"_index":386,"title":{},"body":{"controllers/MovieController.html":{}}}],["create(createuserdto",{"_index":531,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(userdata",{"_index":560,"title":{},"body":{"injectables/UsersService.html":{}}}],["created",{"_index":664,"title":{},"body":{"index.html":{}}}],["createduser",{"_index":246,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["createduser.password",{"_index":249,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["createmovie",{"_index":439,"title":{},"body":{"injectables/MovieService.html":{}}}],["createmovie(movie",{"_index":446,"title":{},"body":{"injectables/MovieService.html":{}}}],["createmoviedto",{"_index":270,"title":{"classes/CreateMovieDto.html":{}},"body":{"classes/CreateMovieDto.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"classes/UpdateMovieDto.html":{},"coverage.html":{}}}],["createuserdto",{"_index":284,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["credentials",{"_index":265,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["currenthashedrefreshtoken",{"_index":514,"title":{},"body":{"entities/User.html":{},"injectables/UsersService.html":{}}}],["database",{"_index":301,"title":{},"body":{"modules/DatabaseModule.html":{},"controllers/MovieController.html":{}}}],["database/database.module",{"_index":32,"title":{},"body":{"modules/AppModule.html":{}}}],["database/postgreserrorcodes.enum",{"_index":231,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["databasemodule",{"_index":8,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["decorators",{"_index":72,"title":{},"body":{"controllers/AuthenticationController.html":{},"classes/CreateMovieDto.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":290,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"entities/User.html":{}}}],["defined",{"_index":74,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":406,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{}}}],["delete(':id",{"_index":429,"title":{},"body":{"controllers/MovieController.html":{},"controllers/UsersController.html":{}}}],["delete(':id')@apiokresponse()@apinotfoundresponse()@useguards(jwtauthenticationguard",{"_index":398,"title":{},"body":{"controllers/MovieController.html":{}}}],["deleteresponse",{"_index":470,"title":{},"body":{"injectables/MovieService.html":{}}}],["deleteresponse.affected",{"_index":472,"title":{},"body":{"injectables/MovieService.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/MovieModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":679,"title":{},"body":{"index.html":{}}}],["deprecated",{"_index":496,"title":{},"body":{"classes/RegisterDto.html":{}}}],["description",{"_index":394,"title":{},"body":{"controllers/MovieController.html":{},"classes/RegisterDto.html":{},"index.html":{},"properties.html":{}}}],["developer",{"_index":669,"title":{},"body":{"index.html":{},"properties.html":{}}}],["development",{"_index":702,"title":{},"body":{"index.html":{}}}],["director",{"_index":275,"title":{},"body":{"classes/CreateMovieDto.html":{},"entities/Movie.html":{},"injectables/MovieService.html":{}}}],["docker",{"_index":676,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":586,"title":{},"body":{"coverage.html":{}}}],["down",{"_index":695,"title":{},"body":{"index.html":{}}}],["dto/create",{"_index":409,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/login.dto",{"_index":120,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["dto/register.dto",{"_index":111,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["dto/update",{"_index":411,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{}}}],["e2e",{"_index":713,"title":{},"body":{"index.html":{}}}],["easier",{"_index":689,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":659,"title":{},"body":{"index.html":{}}}],["email",{"_index":211,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["entities",{"_index":303,"title":{},"body":{"modules/DatabaseModule.html":{},"entities/Movie.html":{},"entities/User.html":{},"overview.html":{}}}],["entities/movie.entity",{"_index":413,"title":{},"body":{"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{}}}],["entities/user.entity",{"_index":549,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entity",{"_index":368,"title":{"entities/Movie.html":{},"entities/User.html":{}},"body":{"entities/Movie.html":{},"entities/User.html":{},"coverage.html":{}}}],["entity.ts",{"_index":305,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["enumerations",{"_index":642,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":251,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["error?.code",{"_index":252,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["example",{"_index":491,"title":{},"body":{"classes/RegisterDto.html":{}}}],["exclude",{"_index":524,"title":{},"body":{"entities/User.html":{}}}],["exist",{"_index":575,"title":{},"body":{"injectables/UsersService.html":{}}}],["exists",{"_index":257,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/MovieController.html":{}}}],["expiresin",{"_index":192,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{}}}],["export",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":547,"title":{},"body":{"modules/UsersModule.html":{}}}],["expose",{"_index":693,"title":{},"body":{"index.html":{}}}],["express",{"_index":329,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{},"dependencies.html":{},"index.html":{}}}],["expression",{"_index":488,"title":{},"body":{"classes/RegisterDto.html":{}}}],["extends",{"_index":312,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{}}}],["extractjwt",{"_index":324,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["extractjwt.fromextractors",{"_index":332,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["extractjwt.fromextractors([(request",{"_index":345,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["file",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["findall",{"_index":382,"title":{},"body":{"controllers/MovieController.html":{},"controllers/UsersController.html":{}}}],["findone",{"_index":383,"title":{},"body":{"controllers/MovieController.html":{}}}],["findone(@param('id",{"_index":424,"title":{},"body":{"controllers/MovieController.html":{},"controllers/UsersController.html":{}}}],["findone(id",{"_index":391,"title":{},"body":{"controllers/MovieController.html":{}}}],["follow",{"_index":682,"title":{},"body":{"index.html":{}}}],["found",{"_index":465,"title":{},"body":{"injectables/MovieService.html":{}}}],["framework",{"_index":657,"title":{},"body":{"index.html":{}}}],["fullname",{"_index":474,"title":{},"body":{"classes/RegisterDto.html":{}}}],["function",{"_index":596,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":648,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["gender",{"_index":276,"title":{},"body":{"classes/CreateMovieDto.html":{},"entities/Movie.html":{},"injectables/MovieService.html":{}}}],["get(':id",{"_index":423,"title":{},"body":{"controllers/MovieController.html":{},"controllers/UsersController.html":{}}}],["get(':id')@apiparam({name",{"_index":392,"title":{},"body":{"controllers/MovieController.html":{}}}],["get('refresh",{"_index":137,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["get()@useguards(jwtauthenticationguard",{"_index":389,"title":{},"body":{"controllers/MovieController.html":{}}}],["getallmovies",{"_index":440,"title":{},"body":{"injectables/MovieService.html":{}}}],["getauthenticateduser",{"_index":198,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getauthenticateduser(email",{"_index":207,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getbyemail",{"_index":552,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyemail(email",{"_index":563,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyid",{"_index":553,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyid(id",{"_index":565,"title":{},"body":{"injectables/UsersService.html":{}}}],["getcookiesforlogout",{"_index":199,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwtaccesstoken",{"_index":200,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwtaccesstoken(userid",{"_index":213,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwtrefreshtoken",{"_index":201,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwtrefreshtoken(userid",{"_index":217,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwttoken",{"_index":202,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwttoken(userid",{"_index":219,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getmoviebyid",{"_index":441,"title":{},"body":{"injectables/MovieService.html":{}}}],["getmoviebyid(id",{"_index":449,"title":{},"body":{"injectables/MovieService.html":{}}}],["getting",{"_index":650,"title":{"index.html":{}},"body":{}}],["getuserifrefreshtokenmatches",{"_index":554,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserifrefreshtokenmatches(refreshtoken",{"_index":567,"title":{},"body":{"injectables/UsersService.html":{}}}],["graph",{"_index":720,"title":{},"body":{"modules.html":{}}}],["guards/jwt",{"_index":116,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["guards/localauthentication.guard",{"_index":114,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["hapi/joi",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["hashedpassword",{"_index":223,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["host",{"_index":183,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{}}}],["httpcode",{"_index":103,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["httpcode(200",{"_index":145,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["httpcode(200)@useguards(localauthenticationguard)@post('log",{"_index":83,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["httpexception",{"_index":225,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{}}}],["httpexception('movie",{"_index":464,"title":{},"body":{"injectables/MovieService.html":{}}}],["httponly",{"_index":237,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["httpstatus",{"_index":226,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{}}}],["httpstatus.bad_request",{"_index":258,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["httpstatus.internal_server_error",{"_index":262,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["httpstatus.not_found",{"_index":466,"title":{},"body":{"injectables/MovieService.html":{},"injectables/UsersService.html":{}}}],["id",{"_index":371,"title":{},"body":{"entities/Movie.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":587,"title":{},"body":{"coverage.html":{}}}],["ignore",{"_index":127,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["import",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{},"modules/MovieModule.html":{},"modules/UsersModule.html":{}}}],["in')@apibody({type",{"_index":84,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["index",{"_index":62,"title":{"index.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":14,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["inject",{"_index":107,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{}}}],["inject(cache_manager",{"_index":131,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["injectable",{"_index":194,"title":{"injectables/AuthenticationService.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":195,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":457,"title":{},"body":{"injectables/MovieService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(movie",{"_index":458,"title":{},"body":{"injectables/MovieService.html":{}}}],["injectrepository(user",{"_index":573,"title":{},"body":{"injectables/UsersService.html":{}}}],["installation",{"_index":698,"title":{},"body":{"index.html":{}}}],["installion",{"_index":680,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":700,"title":{},"body":{"index.html":{}}}],["instead",{"_index":480,"title":{},"body":{"classes/RegisterDto.html":{}}}],["interface",{"_index":500,"title":{"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{}},"body":{"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["interface/requestwithuser.interface",{"_index":112,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["interface/tokenpayload.interface",{"_index":229,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["interfaces",{"_index":501,"title":{},"body":{"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"overview.html":{}}}],["isemail",{"_index":362,"title":{},"body":{"classes/LogInDto.html":{},"classes/RegisterDto.html":{}}}],["isnotempty",{"_index":281,"title":{},"body":{"classes/CreateMovieDto.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{}}}],["isnotempty()@isstring",{"_index":277,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["ispasswordmatching",{"_index":267,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["isrefreshtokenmatching",{"_index":582,"title":{},"body":{"injectables/UsersService.html":{}}}],["isstring",{"_index":282,"title":{},"body":{"classes/CreateMovieDto.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{}}}],["isstring()@isnotempty",{"_index":482,"title":{},"body":{"classes/RegisterDto.html":{}}}],["isstring()@isnotempty()@minlength(7",{"_index":364,"title":{},"body":{"classes/LogInDto.html":{},"classes/RegisterDto.html":{}}}],["job",{"_index":732,"title":{},"body":{"properties.html":{}}}],["joi",{"_index":20,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.number",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.number().required",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.object",{"_index":37,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().required",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["jwt",{"_index":327,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt_expiration_time",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthenticationService.html":{}}}],["jwt_refresh_token_expiration_time",{"_index":242,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["jwt_secret",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["jwtauthenticationguard",{"_index":115,"title":{"injectables/JwtAuthenticationGuard.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/JwtAuthenticationGuard.html":{},"controllers/MovieController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":331,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":177,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["jwtmodule.registerasync",{"_index":188,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["jwtrefreshguard",{"_index":123,"title":{"injectables/JwtRefreshGuard.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/JwtRefreshGuard.html":{},"coverage.html":{}}}],["jwtrefreshtokenstrategy",{"_index":315,"title":{"injectables/JwtRefreshTokenStrategy.html":{}},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{}}}],["jwtservice",{"_index":205,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["jwtstrategy",{"_index":170,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kill",{"_index":696,"title":{},"body":{"index.html":{}}}],["license",{"_index":733,"title":{},"body":{"properties.html":{}}}],["linkedin",{"_index":652,"title":{},"body":{"index.html":{}}}],["linux",{"_index":686,"title":{},"body":{"index.html":{}}}],["local",{"_index":356,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localauthenticationguard",{"_index":113,"title":{"injectables/LocalAuthenticationGuard.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/LocalAuthenticationGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["localstrategy",{"_index":171,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["login",{"_index":66,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["login(@req",{"_index":148,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["login(request",{"_index":82,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logindto",{"_index":85,"title":{"classes/LogInDto.html":{}},"body":{"controllers/AuthenticationController.html":{},"classes/LogInDto.html":{},"coverage.html":{}}}],["logout",{"_index":67,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logout(@req",{"_index":162,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logout(request",{"_index":88,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["makes",{"_index":687,"title":{},"body":{"index.html":{}}}],["manager",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"dependencies.html":{}}}],["match",{"_index":486,"title":{},"body":{"classes/RegisterDto.html":{}}}],["matches",{"_index":494,"title":{},"body":{"classes/RegisterDto.html":{}}}],["matches(/^\\+[1",{"_index":499,"title":{},"body":{"classes/RegisterDto.html":{}}}],["matching",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["max",{"_index":239,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["metadata",{"_index":634,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":63,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minlength",{"_index":366,"title":{},"body":{"classes/LogInDto.html":{},"classes/RegisterDto.html":{}}}],["minlength(7",{"_index":367,"title":{},"body":{"classes/LogInDto.html":{},"classes/RegisterDto.html":{}}}],["miscellaneous",{"_index":641,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mks",{"_index":668,"title":{},"body":{"index.html":{}}}],["mode",{"_index":706,"title":{},"body":{"index.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{},"modules/MovieModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{},"modules/MovieModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{},"modules/MovieModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["movie",{"_index":369,"title":{"entities/Movie.html":{}},"body":{"entities/Movie.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"coverage.html":{}}}],["movie.controller",{"_index":435,"title":{},"body":{"modules/MovieModule.html":{}}}],["movie.dto",{"_index":410,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{},"classes/UpdateMovieDto.html":{}}}],["movie.dto.ts",{"_index":273,"title":{},"body":{"classes/CreateMovieDto.html":{},"classes/UpdateMovieDto.html":{},"coverage.html":{}}}],["movie.dto.ts:10",{"_index":279,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["movie.dto.ts:14",{"_index":278,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["movie.dto.ts:6",{"_index":280,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["movie.service",{"_index":408,"title":{},"body":{"controllers/MovieController.html":{},"modules/MovieModule.html":{}}}],["movie/movie.module",{"_index":31,"title":{},"body":{"modules/AppModule.html":{}}}],["moviecontroller",{"_index":379,"title":{"controllers/MovieController.html":{}},"body":{"controllers/MovieController.html":{},"modules/MovieModule.html":{},"coverage.html":{}}}],["moviemodule",{"_index":9,"title":{"modules/MovieModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MovieModule.html":{},"modules.html":{},"overview.html":{}}}],["movierepository",{"_index":445,"title":{},"body":{"injectables/MovieService.html":{}}}],["movies",{"_index":455,"title":{},"body":{"injectables/MovieService.html":{}}}],["movieservice",{"_index":407,"title":{"injectables/MovieService.html":{}},"body":{"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"coverage.html":{},"overview.html":{}}}],["name",{"_index":77,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["nestjs",{"_index":654,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/DatabaseModule.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":609,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":178,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":506,"title":{},"body":{"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":175,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":610,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":119,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/MovieController.html":{},"classes/RegisterDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":293,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":255,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newmovie",{"_index":459,"title":{},"body":{"injectables/MovieService.html":{}}}],["newuser",{"_index":576,"title":{},"body":{"injectables/UsersService.html":{}}}],["nilson",{"_index":737,"title":{},"body":{"properties.html":{}}}],["node.js",{"_index":656,"title":{},"body":{"index.html":{}}}],["npm",{"_index":699,"title":{},"body":{"index.html":{}}}],["null",{"_index":584,"title":{},"body":{"injectables/UsersService.html":{}}}],["nullable",{"_index":527,"title":{},"body":{"entities/User.html":{}}}],["number",{"_index":214,"title":{},"body":{"injectables/AuthenticationService.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"interfaces/TokenPayload.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["number})@apiokresponse()@apinotfoundresponse()@useguards(jwtauthenticationguard",{"_index":395,"title":{},"body":{"controllers/MovieController.html":{}}}],["optional",{"_index":79,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["out",{"_index":13,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"modules/MovieModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["out')@httpcode(200",{"_index":90,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["overview",{"_index":722,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":603,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":405,"title":{},"body":{"controllers/MovieController.html":{}}}],["parameters",{"_index":76,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parser",{"_index":626,"title":{},"body":{"dependencies.html":{}}}],["partialtype",{"_index":505,"title":{},"body":{"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createmoviedto",{"_index":508,"title":{},"body":{"classes/UpdateMovieDto.html":{}}}],["partialtype(createuserdto",{"_index":512,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["passport",{"_index":326,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":174,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["passportstrategy",{"_index":328,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":344,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passreqtocallback",{"_index":336,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["password",{"_index":248,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{}}}],["patch",{"_index":404,"title":{},"body":{"controllers/MovieController.html":{}}}],["patch(':id",{"_index":426,"title":{},"body":{"controllers/MovieController.html":{},"controllers/UsersController.html":{}}}],["patch(':id')@apiokresponse()@apinotfoundresponse()@useguards(jwtauthenticationguard",{"_index":402,"title":{},"body":{"controllers/MovieController.html":{}}}],["path",{"_index":238,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["payload",{"_index":232,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["payload.userid",{"_index":339,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["pg",{"_index":631,"title":{},"body":{"dependencies.html":{}}}],["pgadmin",{"_index":675,"title":{},"body":{"index.html":{}}}],["phonenumber",{"_index":475,"title":{},"body":{"classes/RegisterDto.html":{},"entities/User.html":{}}}],["plaintextpassword",{"_index":209,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["port",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{}}}],["post",{"_index":104,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/MovieController.html":{},"controllers/UsersController.html":{}}}],["post('log",{"_index":147,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post('register",{"_index":97,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post()@apiokresponse()@apiconflictresponse()@useguards(localauthenticationguard",{"_index":532,"title":{},"body":{"controllers/UsersController.html":{}}}],["post()@useguards(jwtauthenticationguard",{"_index":387,"title":{},"body":{"controllers/MovieController.html":{}}}],["postgres",{"_index":295,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["postgres_db",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["postgres_host",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["postgres_password",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["postgres_port",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["postgres_user",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["postgreserrorcode",{"_index":230,"title":{},"body":{"injectables/AuthenticationService.html":{},"miscellaneous/enumerations.html":{}}}],["postgreserrorcode.uniqueviolation",{"_index":253,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["postgresql",{"_index":674,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":60,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/MovieController.html":{},"controllers/UsersController.html":{}}}],["primarygeneratedcolumn",{"_index":375,"title":{},"body":{"entities/Movie.html":{},"entities/User.html":{}}}],["private",{"_index":129,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{}}}],["problem",{"_index":667,"title":{},"body":{"index.html":{}}}],["production",{"_index":708,"title":{},"body":{"index.html":{}}}],["profile",{"_index":653,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":655,"title":{},"body":{"index.html":{}}}],["promise",{"_index":355,"title":{},"body":{"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{}}}],["properties",{"_index":274,"title":{"properties.html":{}},"body":{"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"entities/User.html":{},"properties.html":{}}}],["property",{"_index":479,"title":{},"body":{"classes/RegisterDto.html":{}}}],["provided",{"_index":266,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["providers",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/MovieModule.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":197,"title":{},"body":{"injectables/AuthenticationService.html":{},"entities/Movie.html":{},"entities/User.html":{}}}],["rafael",{"_index":736,"title":{},"body":{"properties.html":{}}}],["read",{"_index":454,"title":{},"body":{"injectables/MovieService.html":{}}}],["readme",{"_index":437,"title":{},"body":{"injectables/MovieService.html":{}}}],["readonly",{"_index":130,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"controllers/MovieController.html":{},"controllers/UsersController.html":{}}}],["recommended",{"_index":681,"title":{},"body":{"index.html":{}}}],["redis",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"dependencies.html":{},"index.html":{}}}],["redis_host",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["redis_port",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["redisstore",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{}}}],["reflect",{"_index":633,"title":{},"body":{"dependencies.html":{}}}],["refresh",{"_index":68,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{}}}],["refresh(@req",{"_index":138,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refresh(request",{"_index":92,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refresh.guard",{"_index":124,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refresh.guard.ts",{"_index":314,"title":{},"body":{"injectables/JwtRefreshGuard.html":{},"coverage.html":{}}}],["refresh=${token",{"_index":241,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["refreshtoken",{"_index":153,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/UsersService.html":{}}}],["refreshtokencookie",{"_index":151,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["register",{"_index":69,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["register(@body",{"_index":133,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["register(registrationdata",{"_index":95,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["registerdto",{"_index":96,"title":{"classes/RegisterDto.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/RegisterDto.html":{},"coverage.html":{}}}],["registrationdata",{"_index":99,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["regular",{"_index":487,"title":{},"body":{"classes/RegisterDto.html":{}}}],["remove",{"_index":384,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{}}}],["remove(@param('id",{"_index":430,"title":{},"body":{"controllers/MovieController.html":{},"controllers/UsersController.html":{}}}],["remove(id",{"_index":397,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{}}}],["removerefreshtoken",{"_index":555,"title":{},"body":{"injectables/UsersService.html":{}}}],["removerefreshtoken(userid",{"_index":569,"title":{},"body":{"injectables/UsersService.html":{}}}],["repository",{"_index":443,"title":{},"body":{"injectables/MovieService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["req",{"_index":101,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["request",{"_index":80,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{}}}],["request.cookies?.refresh",{"_index":337,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["request.res.setheader",{"_index":164,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["request.res.setheader('set",{"_index":142,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["request.user",{"_index":144,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["request?.cookies?.authentication",{"_index":346,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["request?.cookies?.refresh",{"_index":333,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["requestwithuser",{"_index":71,"title":{"interfaces/RequestWithUser.html":{}},"body":{"controllers/AuthenticationController.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["required",{"_index":393,"title":{},"body":{"controllers/MovieController.html":{}}}],["reset",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/MovieModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["responsable",{"_index":453,"title":{},"body":{"injectables/MovieService.html":{}}}],["results",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":134,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":81,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["rimraf",{"_index":636,"title":{},"body":{"dependencies.html":{}}}],["run",{"_index":703,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":638,"title":{},"body":{"dependencies.html":{}}}],["scalable",{"_index":660,"title":{},"body":{"index.html":{}}}],["secret",{"_index":189,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{}}}],["secretorkey",{"_index":334,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["server",{"_index":661,"title":{},"body":{"index.html":{}}}],["set",{"_index":165,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["setcurrentrefreshtoken",{"_index":556,"title":{},"body":{"injectables/UsersService.html":{}}}],["setcurrentrefreshtoken(refreshtoken",{"_index":571,"title":{},"body":{"injectables/UsersService.html":{}}}],["setup",{"_index":688,"title":{},"body":{"index.html":{}}}],["side",{"_index":662,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":191,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["solution",{"_index":731,"title":{},"body":{"properties.html":{}}}],["solve",{"_index":665,"title":{},"body":{"index.html":{}}}],["something",{"_index":259,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["source",{"_index":15,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["src/.../main.ts",{"_index":649,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../postgreserrorcodes.enum.ts",{"_index":643,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.module.ts",{"_index":17,"title":{},"body":{"modules/AppModule.html":{}}}],["src/authentication/authentication.controller.ts",{"_index":59,"title":{},"body":{"controllers/AuthenticationController.html":{},"coverage.html":{}}}],["src/authentication/authentication.controller.ts:38",{"_index":98,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:44",{"_index":94,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:56",{"_index":86,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:75",{"_index":75,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:84",{"_index":91,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.module.ts",{"_index":172,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["src/authentication/authentication.service.ts",{"_index":196,"title":{},"body":{"injectables/AuthenticationService.html":{},"coverage.html":{}}}],["src/authentication/authentication.service.ts:104",{"_index":212,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:12",{"_index":215,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:23",{"_index":218,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:36",{"_index":206,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:43",{"_index":221,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:66",{"_index":210,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:80",{"_index":224,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:96",{"_index":220,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/dto/login.dto.ts",{"_index":361,"title":{},"body":{"classes/LogInDto.html":{},"coverage.html":{}}}],["src/authentication/dto/login.dto.ts:10",{"_index":365,"title":{},"body":{"classes/LogInDto.html":{}}}],["src/authentication/dto/login.dto.ts:5",{"_index":363,"title":{},"body":{"classes/LogInDto.html":{}}}],["src/authentication/dto/register.dto.ts",{"_index":473,"title":{},"body":{"classes/RegisterDto.html":{},"coverage.html":{}}}],["src/authentication/dto/register.dto.ts:12",{"_index":476,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/dto/register.dto.ts:16",{"_index":483,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/dto/register.dto.ts:22",{"_index":481,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/dto/register.dto.ts:27",{"_index":484,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/dto/register.dto.ts:36",{"_index":493,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/guards/jwt",{"_index":309,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"coverage.html":{}}}],["src/authentication/guards/localauthentication.guard",{"_index":536,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/authentication/guards/localauthentication.guard.ts",{"_index":348,"title":{},"body":{"injectables/LocalAuthenticationGuard.html":{},"coverage.html":{}}}],["src/authentication/interface/requestwithuser.interface.ts",{"_index":502,"title":{},"body":{"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["src/authentication/interface/tokenpayload.interface.ts",{"_index":503,"title":{},"body":{"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["src/authentication/strategy/jwt",{"_index":316,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{}}}],["src/authentication/strategy/jwt.strategy.ts",{"_index":340,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/authentication/strategy/jwt.strategy.ts:10",{"_index":341,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/authentication/strategy/jwt.strategy.ts:23",{"_index":343,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/authentication/strategy/local.strategy.ts",{"_index":350,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/authentication/strategy/local.strategy.ts:14",{"_index":354,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/authentication/strategy/local.strategy.ts:8",{"_index":352,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/database/database.module.ts",{"_index":291,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/database/postgreserrorcodes.enum.ts",{"_index":644,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/main.ts",{"_index":595,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/movie/dto/create",{"_index":272,"title":{},"body":{"classes/CreateMovieDto.html":{},"coverage.html":{}}}],["src/movie/dto/update",{"_index":504,"title":{},"body":{"classes/UpdateMovieDto.html":{},"coverage.html":{}}}],["src/movie/entities/movie.entity.ts",{"_index":370,"title":{},"body":{"entities/Movie.html":{},"coverage.html":{}}}],["src/movie/entities/movie.entity.ts:12",{"_index":374,"title":{},"body":{"entities/Movie.html":{}}}],["src/movie/entities/movie.entity.ts:15",{"_index":373,"title":{},"body":{"entities/Movie.html":{}}}],["src/movie/entities/movie.entity.ts:6",{"_index":376,"title":{},"body":{"entities/Movie.html":{}}}],["src/movie/entities/movie.entity.ts:9",{"_index":377,"title":{},"body":{"entities/Movie.html":{}}}],["src/movie/movie.controller.ts",{"_index":380,"title":{},"body":{"controllers/MovieController.html":{},"coverage.html":{}}}],["src/movie/movie.controller.ts:30",{"_index":388,"title":{},"body":{"controllers/MovieController.html":{}}}],["src/movie/movie.controller.ts:36",{"_index":390,"title":{},"body":{"controllers/MovieController.html":{}}}],["src/movie/movie.controller.ts:50",{"_index":396,"title":{},"body":{"controllers/MovieController.html":{}}}],["src/movie/movie.controller.ts:58",{"_index":403,"title":{},"body":{"controllers/MovieController.html":{}}}],["src/movie/movie.controller.ts:66",{"_index":399,"title":{},"body":{"controllers/MovieController.html":{}}}],["src/movie/movie.module.ts",{"_index":434,"title":{},"body":{"modules/MovieModule.html":{}}}],["src/movie/movie.service.ts",{"_index":438,"title":{},"body":{"injectables/MovieService.html":{},"coverage.html":{}}}],["src/movie/movie.service.ts:15",{"_index":447,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/movie/movie.service.ts:21",{"_index":448,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/movie/movie.service.ts:25",{"_index":450,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/movie/movie.service.ts:33",{"_index":452,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/movie/movie.service.ts:41",{"_index":451,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/movie/movie.service.ts:9",{"_index":444,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/users/dto/create",{"_index":285,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":510,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts",{"_index":513,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:10",{"_index":519,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:13",{"_index":523,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:16",{"_index":521,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:20",{"_index":522,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:24",{"_index":517,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:7",{"_index":520,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":529,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:15",{"_index":533,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":546,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":551,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:15",{"_index":566,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:26",{"_index":564,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:37",{"_index":561,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:43",{"_index":572,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:50",{"_index":568,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:63",{"_index":570,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:9",{"_index":558,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":704,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":707,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":709,"title":{},"body":{"index.html":{}}}],["started",{"_index":651,"title":{"index.html":{}},"body":{}}],["statements",{"_index":588,"title":{},"body":{"coverage.html":{}}}],["steps",{"_index":683,"title":{},"body":{"index.html":{}}}],["store",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"dependencies.html":{}}}],["strategy",{"_index":325,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["strategy/jwt.strategy",{"_index":180,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["strategy/local.strategy",{"_index":176,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["string",{"_index":208,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["super",{"_index":330,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["support",{"_index":717,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":718,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":673,"title":{},"body":{"index.html":{}}}],["synchronize",{"_index":306,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["table",{"_index":602,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":601,"title":{},"body":{"coverage.html":{}}}],["techs",{"_index":671,"title":{},"body":{"index.html":{}}}],["test",{"_index":712,"title":{},"body":{"index.html":{}}}],["test:cov",{"_index":715,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":714,"title":{},"body":{"index.html":{}}}],["tests",{"_index":711,"title":{},"body":{"index.html":{}}}],["this.authenticationservice.getauthenticateduser(email",{"_index":360,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.authenticationservice.getcookiesforlogout",{"_index":166,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authenticationservice.getcookiewithjwtaccesstoken(request.user.id",{"_index":141,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authenticationservice.getcookiewithjwtaccesstoken(user.id",{"_index":150,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authenticationservice.getcookiewithjwtrefreshtoken(user.id",{"_index":154,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authenticationservice.register(registrationdata",{"_index":135,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.configservice.get('jwt_expiration_time')}s",{"_index":235,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.configservice.get('jwt_secret",{"_index":234,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.getbyid(userid",{"_index":581,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.jwtservice.sign(payload",{"_index":233,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.movierepository.create(movie",{"_index":460,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.movierepository.delete(id",{"_index":471,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.movierepository.find",{"_index":462,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.movierepository.findoneby",{"_index":463,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.movierepository.findonebyorfail",{"_index":469,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.movierepository.save(newmovie",{"_index":461,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.movierepository.update(id",{"_index":467,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.movieservice.createmovie(createmoviedto",{"_index":421,"title":{},"body":{"controllers/MovieController.html":{}}}],["this.movieservice.getallmovies",{"_index":422,"title":{},"body":{"controllers/MovieController.html":{}}}],["this.movieservice.getmoviebyid(+id",{"_index":425,"title":{},"body":{"controllers/MovieController.html":{}}}],["this.movieservice.remove(+id",{"_index":431,"title":{},"body":{"controllers/MovieController.html":{}}}],["this.movieservice.update(+id",{"_index":428,"title":{},"body":{"controllers/MovieController.html":{}}}],["this.userservice.getbyid(payload.userid",{"_index":347,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.userservice.getuserifrefreshtokenmatches",{"_index":338,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["this.usersrepository.create(userdata",{"_index":577,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findoneby",{"_index":574,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.save(newuser",{"_index":578,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.update(userid",{"_index":580,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.create",{"_index":247,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.usersservice.create(createuserdto",{"_index":538,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall",{"_index":539,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(+id",{"_index":540,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getbyemail(email",{"_index":263,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.usersservice.remove(+id",{"_index":542,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.removerefreshtoken(request.user.id",{"_index":163,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.usersservice.setcurrentrefreshtoken(refreshtoken",{"_index":156,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.usersservice.update(+id",{"_index":541,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.verifypassword(plaintextpassword",{"_index":264,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["throw",{"_index":254,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{}}}],["token",{"_index":152,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{}}}],["token.strategy.ts",{"_index":317,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{}}}],["token.strategy.ts:13",{"_index":321,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["token.strategy.ts:29",{"_index":323,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["tokenpayload",{"_index":228,"title":{"interfaces/TokenPayload.html":{}},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["transformer",{"_index":525,"title":{},"body":{"entities/User.html":{},"dependencies.html":{}}}],["true",{"_index":307,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"controllers/MovieController.html":{},"classes/RegisterDto.html":{},"entities/User.html":{}}}],["true})@exclude",{"_index":516,"title":{},"body":{"entities/User.html":{}}}],["try",{"_index":245,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["ttl",{"_index":186,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["type",{"_index":78,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["typeorm",{"_index":378,"title":{},"body":{"entities/Movie.html":{},"injectables/MovieService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"index.html":{}}}],["typeormmodule",{"_index":292,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/MovieModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([movie",{"_index":436,"title":{},"body":{"modules/MovieModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":550,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":294,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["types",{"_index":507,"title":{},"body":{"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["types/bcrypt",{"_index":613,"title":{},"body":{"dependencies.html":{}}}],["types/hapi__joi",{"_index":615,"title":{},"body":{"dependencies.html":{}}}],["types/passport",{"_index":617,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":672,"title":{},"body":{"index.html":{}}}],["undefined",{"_index":161,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["unique",{"_index":526,"title":{},"body":{"entities/User.html":{}}}],["uniqueviolation",{"_index":645,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["unit",{"_index":710,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":87,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":734,"title":{},"body":{"properties.html":{}}}],["up",{"_index":692,"title":{},"body":{"index.html":{}}}],["update",{"_index":385,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{}}}],["update(@param('id",{"_index":427,"title":{},"body":{"controllers/MovieController.html":{},"controllers/UsersController.html":{}}}],["update(id",{"_index":400,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{}}}],["updatedmovie",{"_index":468,"title":{},"body":{"injectables/MovieService.html":{}}}],["updatemoviedto",{"_index":401,"title":{"classes/UpdateMovieDto.html":{}},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{},"classes/UpdateMovieDto.html":{},"coverage.html":{}}}],["updateuserdto",{"_index":509,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["use",{"_index":478,"title":{},"body":{"classes/RegisterDto.html":{}}}],["usefactory",{"_index":182,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{}}}],["useguards",{"_index":105,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/MovieController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthenticationguard",{"_index":158,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/MovieController.html":{}}}],["useguards(jwtauthenticationguard)@get",{"_index":73,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(jwtauthenticationguard)@post('log",{"_index":89,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(jwtrefreshguard",{"_index":136,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(jwtrefreshguard)@get('refresh",{"_index":93,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(localauthenticationguard",{"_index":146,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/UsersController.html":{}}}],["useinterceptors",{"_index":108,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useinterceptors(classserializerinterceptor",{"_index":126,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["user",{"_index":149,"title":{"entities/User.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/LocalStrategy.html":{},"interfaces/RequestWithUser.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user.currenthashedrefreshtoken.tostring",{"_index":583,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.dto",{"_index":511,"title":{},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":286,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:2",{"_index":287,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:3",{"_index":288,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:4",{"_index":289,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.id",{"_index":157,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["user.password",{"_index":160,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["userdata",{"_index":562,"title":{},"body":{"injectables/UsersService.html":{}}}],["userid",{"_index":216,"title":{},"body":{"injectables/AuthenticationService.html":{},"interfaces/TokenPayload.html":{},"injectables/UsersService.html":{}}}],["username",{"_index":298,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["usernamefield",{"_index":359,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["users",{"_index":530,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":548,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":534,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/entities/user.entity",{"_index":357,"title":{},"body":{"injectables/LocalStrategy.html":{},"interfaces/RequestWithUser.html":{}}}],["users/users.module",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{}}}],["users/users.service",{"_index":122,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["userscontroller",{"_index":528,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":320,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["usersmodule",{"_index":10,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":559,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice",{"_index":121,"title":{"injectables/UsersService.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":670,"title":{},"body":{"index.html":{}}}],["validate",{"_index":318,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(email",{"_index":353,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":342,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(request",{"_index":322,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["validationschema",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":283,"title":{},"body":{"classes/CreateMovieDto.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{},"dependencies.html":{}}}],["value",{"_index":646,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["verifypassword",{"_index":203,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["verifypassword(plaintextpassword",{"_index":222,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["version",{"_index":728,"title":{},"body":{"properties.html":{}}}],["watch",{"_index":705,"title":{},"body":{"index.html":{}}}],["went",{"_index":260,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["windows",{"_index":684,"title":{},"body":{"index.html":{}}}],["witt",{"_index":738,"title":{},"body":{"properties.html":{}}}],["wrong",{"_index":261,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["wsl",{"_index":685,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":11,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/MovieModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthenticationModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nMovieModule\n\nMovieModule\n\nAppModule -->\n\nMovieModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthenticationModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            MovieModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import * as Joi from '@hapi/joi';\nimport * as redisStore from 'cache-manager-redis-store'\nimport { CacheModule, Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { MovieModule } from './movie/movie.module';\nimport { DatabaseModule } from './database/database.module';\nimport { UsersModule } from './users/users.module';\nimport { AuthenticationModule } from './authentication/authentication.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      validationSchema: Joi.object({\n        REDIS_HOST: Joi.string().required(),\n        REDIS_PORT: Joi.number().required(),\n        POSTGRES_HOST: Joi.string().required(),\n        POSTGRES_PORT: Joi.number().required(),\n        POSTGRES_USER: Joi.string().required(),\n        POSTGRES_PASSWORD: Joi.string().required(),\n        POSTGRES_DB: Joi.string().required(),\n        PORT: Joi.number(),\n        JWT_SECRET: Joi.string().required(),\n        JWT_EXPIRATION_TIME: Joi.string().required(),\n      })\n    }),\n    DatabaseModule,\n    UsersModule,    \n    MovieModule, \n    AuthenticationModule\n  ],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthenticationController.html":{"url":"controllers/AuthenticationController.html","title":"controller - AuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/authentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                authentication\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                authenticate\n                            \n                            \n                                    Async\n                                logIn\n                            \n                            \n                                    Async\n                                logOut\n                            \n                            \n                                refresh\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        authenticate\n                        \n                    \n                \n            \n            \n                \nauthenticate(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthenticationGuard)@Get()\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    logIn(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(200)@UseGuards(LocalAuthenticationGuard)@Post('log-in')@ApiBody({type: LogInDto})\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logOut\n                        \n                    \n                \n            \n            \n                \n                    \n                    logOut(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthenticationGuard)@Post('log-out')@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refresh\n                        \n                    \n                \n            \n            \n                \nrefresh(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtRefreshGuard)@Get('refresh')\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(registrationData: RegisterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    registrationData\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Req,\n  ClassSerializerInterceptor,\n  Controller,\n  HttpCode,\n  Post,\n  UseGuards,\n  Get,\n  CACHE_MANAGER,\n  Inject,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { AuthenticationService } from './authentication.service';\nimport RegisterDto from './dto/register.dto';\nimport RequestWithUser from './interface/requestWithUser.interface';\nimport { LocalAuthenticationGuard } from './guards/localAuthentication.guard';\nimport JwtAuthenticationGuard from './guards/jwt-authentication.guard';\nimport { ApiBody } from '@nestjs/swagger';\nimport LogInDto from './dto/login.dto';\nimport { UsersService } from '../users/users.service';\nimport Cache from 'cache-manager-redis-store';\nimport JwtRefreshGuard from './guards/jwt-refresh.guard';\n\n@Controller('authentication')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class AuthenticationController {\n  /**\n   * @ignore\n   */\n  constructor(\n    private readonly authenticationService: AuthenticationService,\n    private readonly usersService: UsersService,\n    @Inject(CACHE_MANAGER) private cacheManager: Cache,\n  ) {}\n\n  @Post('register')\n  async register(@Body() registrationData: RegisterDto) {\n    return this.authenticationService.register(registrationData);\n  }\n\n  @UseGuards(JwtRefreshGuard)\n  @Get('refresh')\n  refresh(@Req() request: RequestWithUser) {\n    const accessTokenCookie =\n      this.authenticationService.getCookieWithJwtAccessToken(request.user.id);\n\n    request.res.setHeader('Set-Cookie', accessTokenCookie);\n    return request.user;\n  }\n\n  @HttpCode(200)\n  @UseGuards(LocalAuthenticationGuard)\n  @Post('log-in')\n  @ApiBody({ type: LogInDto })\n  async logIn(@Req() request: RequestWithUser) {\n    const { user } = request;\n    const accessTokenCookie =\n      this.authenticationService.getCookieWithJwtAccessToken(user.id);\n    const { cookie: refreshTokenCookie, token: refreshToken } =\n      this.authenticationService.getCookieWithJwtRefreshToken(user.id);\n\n    await this.usersService.setCurrentRefreshToken(refreshToken, user.id);\n\n    request.res.setHeader('Set-Cookie', [\n      accessTokenCookie,\n      refreshTokenCookie,\n    ]);\n\n    return user;\n  }\n\n  @UseGuards(JwtAuthenticationGuard)\n  @Get()\n  authenticate(@Req() request: RequestWithUser) {\n    const user = request.user;\n    user.password = undefined;\n    return user;\n  }\n\n  @UseGuards(JwtAuthenticationGuard)\n  @Post('log-out')\n  @HttpCode(200)\n  async logOut(@Req() request: RequestWithUser) {\n    await this.usersService.removeRefreshToken(request.user.id);\n    request.res.setHeader(\n      'Set-Cookie',\n      this.authenticationService.getCookiesForLogOut(),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthenticationModule.html":{"url":"modules/AuthenticationModule.html","title":"module - AuthenticationModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthenticationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthenticationModule\n\n\n\ncluster_AuthenticationModule_imports\n\n\n\ncluster_AuthenticationModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\nAuthenticationModule -->\n\nUsersModule->AuthenticationModule\n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nAuthenticationModule -->\n\nAuthenticationService->AuthenticationModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthenticationModule -->\n\nJwtStrategy->AuthenticationModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthenticationModule -->\n\nLocalStrategy->AuthenticationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/authentication/authentication.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthenticationService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthenticationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { CacheModule, Module } from '@nestjs/common';\nimport { AuthenticationService } from './authentication.service';\nimport { UsersModule } from '../users/users.module';\nimport { AuthenticationController } from './authentication.controller';\nimport { PassportModule } from '@nestjs/passport';\nimport { LocalStrategy } from './strategy/local.strategy';\nimport { JwtModule } from '@nestjs/jwt';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { JwtStrategy } from './strategy/jwt.strategy';\nimport * as redisStore from 'cache-manager-redis-store'\n\n \n@Module({\n  imports: [\n    CacheModule.registerAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n        useFactory: (configService: ConfigService) => ({\n          store: redisStore,\n          host: configService.get('REDIS_HOST'),\n          port: configService.get('REDIS_PORT'),\n          ttl: 120\n        }),\n    }),\n    UsersModule,\n    PassportModule,\n    ConfigModule,\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: async (configService: ConfigService) => ({\n        secret: configService.get('JWT_SECRET'),\n        signOptions: {\n          expiresIn: `${configService.get('JWT_EXPIRATION_TIME')}s`,\n        },\n      }),\n    }),\n  ],\n  providers: [AuthenticationService, LocalStrategy, JwtStrategy],\n  controllers: [AuthenticationController]\n})\nexport class AuthenticationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthenticationService.html":{"url":"injectables/AuthenticationService.html","title":"injectable - AuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/authentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                getAuthenticatedUser\n                            \n                            \n                                    Public\n                                getCookiesForLogOut\n                            \n                            \n                                    Public\n                                getCookieWithJwtAccessToken\n                            \n                            \n                                    Public\n                                getCookieWithJwtRefreshToken\n                            \n                            \n                                    Public\n                                getCookieWithJwtToken\n                            \n                            \n                                    Public\n                                    Async\n                                register\n                            \n                            \n                                    Private\n                                    Async\n                                verifyPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/authentication.service.ts:36\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getAuthenticatedUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAuthenticatedUser(email: string, plainTextPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    plainTextPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCookiesForLogOut\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookiesForLogOut()\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCookieWithJwtAccessToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookieWithJwtAccessToken(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCookieWithJwtRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookieWithJwtRefreshToken(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { cookie: string; token: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCookieWithJwtToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookieWithJwtToken(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(registrationData: RegisterDto)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    registrationData\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        verifyPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyPassword(plainTextPassword: string, hashedPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    plainTextPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    hashedPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { UsersService } from '../users/users.service';\nimport RegisterDto from './dto/register.dto';\nimport * as bcrypt from 'bcrypt';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { TokenPayload } from './interface/tokenPayload.interface';\nimport { PostgresErrorCode } from '../database/postgresErrorCodes.enum';\n\n@Injectable()\nexport class AuthenticationService {\n  public getCookieWithJwtAccessToken(userId: number) {\n    const payload: TokenPayload = { userId };\n    const token = this.jwtService.sign(payload, {\n      secret: this.configService.get('JWT_SECRET'),\n      expiresIn: `${this.configService.get('JWT_EXPIRATION_TIME')}s`,\n    });\n    return `Authentication=${token}; HttpOnly; Path=/; Max-Age=${this.configService.get(\n      'JWT_EXPIRATION_TIME',\n    )}`;\n  }\n\n  public getCookieWithJwtRefreshToken(userId: number) {\n    const payload: TokenPayload = { userId };\n    const token = this.jwtService.sign(payload, {\n      secret: this.configService.get('JWT_SECRET'),\n      expiresIn: `${this.configService.get('JWT_EXPIRATION_TIME')}s`,\n    });\n    const cookie = `Refresh=${token}; HttpOnly; Path=/; Max-Age=${this.configService.get(\n      'JWT_REFRESH_TOKEN_EXPIRATION_TIME',\n    )}`;\n    return {\n      cookie,\n      token,\n    };\n  }\n  constructor(\n    private readonly usersService: UsersService,\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n  ) {}\n\n  public async register(registrationData: RegisterDto) {\n    const hashedPassword = await bcrypt.hash(registrationData.password, 10);\n    try {\n      const createdUser = await this.usersService.create({\n        ...registrationData,\n        password: hashedPassword,\n      });\n      createdUser.password = undefined;\n      return createdUser;\n    } catch (error) {\n      if (error?.code === PostgresErrorCode.UniqueViolation) {\n        throw new HttpException(\n          'User with that email already exists',\n          HttpStatus.BAD_REQUEST,\n        );\n      }\n      throw new HttpException(\n        'Something went wrong',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  public async getAuthenticatedUser(email: string, plainTextPassword: string) {\n    try {\n      const user = await this.usersService.getByEmail(email);\n      await this.verifyPassword(plainTextPassword, user.password);\n      user.password = undefined;\n      return user;\n    } catch (error) {\n      throw new HttpException(\n        'Wrong credentials provided',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n  }\n\n  private async verifyPassword(\n    plainTextPassword: string,\n    hashedPassword: string,\n  ) {\n    const isPasswordMatching = await bcrypt.compare(\n      plainTextPassword,\n      hashedPassword,\n    );\n    if (!isPasswordMatching) {\n      throw new HttpException(\n        'Wrong credentials provided',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n  }\n\n  public getCookieWithJwtToken(userId: number) {\n    const payload: TokenPayload = { userId };\n    const token = this.jwtService.sign(payload);\n    return `Authentication=${token}; HttpOnly; Path=/; Max-Age=${this.configService.get(\n      'JWT_EXPIRATION_TIME',\n    )}`;\n  }\n\n  public getCookiesForLogOut() {\n    return [\n      'Authentication=; HttpOnly; Path=/; Max-Age=0',\n      'Refresh=; HttpOnly; Path=/; Max-Age=0',\n    ];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateMovieDto.html":{"url":"classes/CreateMovieDto.html","title":"class - CreateMovieDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateMovieDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/movie/dto/create-movie.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                director\n                            \n                            \n                                gender\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        director\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/movie/dto/create-movie.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/movie/dto/create-movie.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/movie/dto/create-movie.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class CreateMovieDto {\n  @IsNotEmpty()\n  @IsString()\n  name: string;\n\n  @IsNotEmpty()\n  @IsString()\n  gender: string;\n\n  @IsNotEmpty()\n  @IsString()\n  director: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateUserDto {\n    email: string;\n    name: string;\n    password: string;\n}\n   \nexport default CreateUserDto;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n \n@Module({\n  imports: [\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        host: configService.get('POSTGRES_HOST'),\n        port: configService.get('POSTGRES_PORT'),\n        username: configService.get('POSTGRES_USER'),\n        password: configService.get('POSTGRES_PASSWORD'),\n        database: configService.get('POSTGRES_DB'),\n        entities: [\n          __dirname + '/../**/*.entity.ts',\n        ],\n        synchronize: true,\n        autoLoadEntities: true,\n      })\n    }),\n  ],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthenticationGuard.html":{"url":"injectables/JwtAuthenticationGuard.html","title":"injectable - JwtAuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/guards/jwt-authentication.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n \n@Injectable()\nexport default class JwtAuthenticationGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtRefreshGuard.html":{"url":"injectables/JwtRefreshGuard.html","title":"injectable - JwtRefreshGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtRefreshGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/guards/jwt-refresh.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport default class JwtRefreshGuard extends AuthGuard('jwt-refresh-token') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtRefreshTokenStrategy.html":{"url":"injectables/JwtRefreshTokenStrategy.html","title":"injectable - JwtRefreshTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtRefreshTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/strategy/jwt-refresh-token.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/strategy/jwt-refresh-token.strategy.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(request: Request, payload: TokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/strategy/jwt-refresh-token.strategy.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                TokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Request } from 'express';\nimport { UsersService } from '../../users/users.service';\nimport { TokenPayload } from '../interface/tokenPayload.interface';\n\n@Injectable()\nexport class JwtRefreshTokenStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-refresh-token',\n) {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly userService: UsersService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (request: Request) => {\n          return request?.cookies?.Refresh;\n        },\n      ]),\n      secretOrKey: configService.get('JWT_REFRESH_TOKEN_SECRET'),\n      passReqToCallback: true,\n    });\n  }\n\n  async validate(request: Request, payload: TokenPayload) {\n    const refreshToken = request.cookies?.Refresh;\n    return this.userService.getUserIfRefreshTokenMatches(\n      refreshToken,\n      payload.userId,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/strategy/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/strategy/jwt.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: TokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/strategy/jwt.strategy.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                TokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Request } from 'express';\nimport { UsersService } from '../../users/users.service';\nimport { TokenPayload } from '../interface/tokenPayload.interface';\n \n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly userService: UsersService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([(request: Request) => {\n        return request?.cookies?.Authentication;\n      }]),\n      secretOrKey: configService.get('JWT_SECRET')\n    });\n  }\n \n  async validate(payload: TokenPayload) {\n    return this.userService.getById(payload.userId);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthenticationGuard.html":{"url":"injectables/LocalAuthenticationGuard.html","title":"injectable - LocalAuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/guards/localAuthentication.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthenticationGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/strategy/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authenticationService: AuthenticationService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/strategy/local.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authenticationService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/strategy/local.strategy.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { AuthenticationService } from '../authentication.service';\nimport User from '../../users/entities/user.entity';\n \n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authenticationService: AuthenticationService) {\n    super({\n      usernameField: 'email'\n    });\n  }\n  async validate(email: string, password: string): Promise {\n    return this.authenticationService.getAuthenticatedUser(email, password);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LogInDto.html":{"url":"classes/LogInDto.html","title":"class - LogInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LogInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/dto/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/login.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(7)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/login.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsString, IsNotEmpty, MinLength } from 'class-validator';\n\nexport class LogInDto {\n  @IsEmail()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(7)\n  password: string;\n}\n\nexport default LogInDto;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Movie.html":{"url":"entities/Movie.html","title":"entity - Movie","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Movie\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/movie/entities/movie.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                director\n                            \n                            \n                                    Public\n                                gender\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        director\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/movie/entities/movie.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/movie/entities/movie.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/movie/entities/movie.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/movie/entities/movie.entity.ts:9\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nclass Movie {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public name: string;\n\n  @Column()\n  public gender: string;\n\n  @Column()\n  public director: string;\n}\n\nexport default Movie;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MovieController.html":{"url":"controllers/MovieController.html","title":"controller - MovieController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MovieController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/movie/movie.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                movie\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createMovieDto: CreateMovieDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/movie/movie.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createMovieDto\n                                    \n                                                CreateMovieDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/movie/movie.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiParam({name: 'id', required: true, description: 'Should be an id of a post that exists in the database', type: Number})@ApiOkResponse()@ApiNotFoundResponse()@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/movie/movie.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOkResponse()@ApiNotFoundResponse()@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/movie/movie.controller.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateMovieDto: UpdateMovieDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiOkResponse()@ApiNotFoundResponse()@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/movie/movie.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateMovieDto\n                                    \n                                                UpdateMovieDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n} from '@nestjs/common';\nimport { MovieService } from './movie.service';\nimport { CreateMovieDto } from './dto/create-movie.dto';\nimport { UpdateMovieDto } from './dto/update-movie.dto';\nimport JwtAuthenticationGuard from '../authentication/guards/jwt-authentication.guard';\nimport Movie from './entities/movie.entity';\nimport {\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiParam,\n  ApiTags,\n} from '@nestjs/swagger';\n\n@Controller('movie')\n@ApiTags('movies')\nexport class MovieController {\n  constructor(private readonly movieService: MovieService) {}\n\n  @Post()\n  @UseGuards(JwtAuthenticationGuard)\n  create(@Body() createMovieDto: CreateMovieDto) {\n    return this.movieService.createMovie(createMovieDto);\n  }\n\n  @Get()\n  @UseGuards(JwtAuthenticationGuard)\n  findAll() {\n    return this.movieService.getAllMovies();\n  }\n\n  @Get(':id')\n  @ApiParam({\n    name: 'id',\n    required: true,\n    description: 'Should be an id of a post that exists in the database',\n    type: Number,\n  })\n  @ApiOkResponse()\n  @ApiNotFoundResponse()\n  @UseGuards(JwtAuthenticationGuard)\n  findOne(@Param('id') id: string): Promise {\n    return this.movieService.getMovieById(+id);\n  }\n\n  @Patch(':id')\n  @ApiOkResponse()\n  @ApiNotFoundResponse()\n  @UseGuards(JwtAuthenticationGuard)\n  update(@Param('id') id: string, @Body() updateMovieDto: UpdateMovieDto) {\n    return this.movieService.update(+id, updateMovieDto);\n  }\n\n  @Delete(':id')\n  @ApiOkResponse()\n  @ApiNotFoundResponse()\n  @UseGuards(JwtAuthenticationGuard)\n  remove(@Param('id') id: string) {\n    return this.movieService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MovieModule.html":{"url":"modules/MovieModule.html","title":"module - MovieModule","body":"\n                   \n\n\n\n\n    Modules\n    MovieModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_MovieModule\n\n\n\ncluster_MovieModule_providers\n\n\n\n\nMovieService\n\nMovieService\n\n\n\nMovieModule\n\nMovieModule\n\nMovieModule -->\n\nMovieService->MovieModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/movie/movie.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MovieService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MovieController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MovieService } from './movie.service';\nimport { MovieController } from './movie.controller';\nimport Movie from './entities/movie.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Movie])],\n  controllers: [MovieController],\n  providers: [MovieService]\n})\nexport class MovieModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MovieService.html":{"url":"injectables/MovieService.html","title":"injectable - MovieService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MovieService\n\n\n\n        \n            Info\n        \n        \n            README\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/movie/movie.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createMovie\n                            \n                            \n                                getAllMovies\n                            \n                            \n                                    Async\n                                getMovieById\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(movieRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/movie/movie.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        movieRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createMovie\n                        \n                    \n                \n            \n            \n                \n                    \n                    createMovie(movie: CreateMovieDto)\n                \n            \n\n\n            \n                \n                    Defined in src/movie/movie.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    movie\n                                    \n                                                CreateMovieDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllMovies\n                        \n                    \n                \n            \n            \n                \ngetAllMovies()\n                \n            \n\n\n            \n                \n                    Defined in src/movie/movie.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getMovieById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMovieById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/movie/movie.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/movie/movie.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, movie: UpdateMovieDto)\n                \n            \n\n\n            \n                \n                    Defined in src/movie/movie.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    movie\n                                    \n                                                UpdateMovieDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n    \n        MovieService\nThis repository is responsable to create, read, update and delete movies\nA Movie contains: name, gender and director\n\n    \n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CreateMovieDto } from './dto/create-movie.dto';\nimport { UpdateMovieDto } from './dto/update-movie.dto';\nimport Movie from './entities/movie.entity';\n\n@Injectable()\nexport class MovieService {\n  constructor(\n    @InjectRepository(Movie)\n    private movieRepository: Repository,\n  ) {}\n\n  async createMovie(movie: CreateMovieDto) {\n    const newMovie = await this.movieRepository.create(movie);\n    await this.movieRepository.save(newMovie);\n    return newMovie;\n  }\n\n  getAllMovies() {\n    return this.movieRepository.find();\n  }\n\n  async getMovieById(id: number) {\n    const movie = await this.movieRepository.findOneBy({ id });\n    if (movie) {\n      return movie;\n    }\n    throw new HttpException('Movie not found', HttpStatus.NOT_FOUND);\n  }\n\n  async update(id: number, movie: UpdateMovieDto) {\n    await this.movieRepository.update(id, movie);\n    const updatedMovie = await this.movieRepository.findOneByOrFail({ id });\n    if (updatedMovie) {\n      return updatedMovie;\n    }\n  }\n\n  async remove(id: number) {\n    const deleteResponse = await this.movieRepository.delete(id);\n    if (!deleteResponse.affected) {\n      throw new HttpException('Movie not found', HttpStatus.NOT_FOUND);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/dto/register.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                fullName\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                phoneNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({deprecated: true, description: 'Use the name property instead'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(7)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Has to match a regular expression: /^\\+[1-9]\\d{1,14}$/', example: '+123123123123'})@IsString()@IsNotEmpty()@Matches(/^\\+[1-9]\\d{1,14}$/)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:36\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsString,\n  IsNotEmpty,\n  MinLength,\n  Matches,\n} from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class RegisterDto {\n  @IsEmail()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  @ApiProperty({\n    deprecated: true,\n    description: 'Use the name property instead',\n  })\n  fullName: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(7)\n  password: string;\n\n  @ApiProperty({\n    description: 'Has to match a regular expression: /^\\\\+[1-9]\\\\d{1,14}$/',\n    example: '+123123123123',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^\\+[1-9]\\d{1,14}$/)\n  phoneNumber: string;\n}\n\nexport default RegisterDto;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithUser.html":{"url":"interfaces/RequestWithUser.html","title":"interface - RequestWithUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/interface/requestWithUser.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         User\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         User\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Request } from 'express';\nimport User from '../../users/entities/user.entity';\n\ninterface RequestWithUser extends Request {\n  user: User;\n}\n\nexport default RequestWithUser;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenPayload.html":{"url":"interfaces/TokenPayload.html","title":"interface - TokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/interface/tokenPayload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            userId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface TokenPayload {\n  userId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateMovieDto.html":{"url":"classes/UpdateMovieDto.html","title":"class - UpdateMovieDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateMovieDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/movie/dto/update-movie.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateMovieDto } from './create-movie.dto';\n\nexport class UpdateMovieDto extends PartialType(CreateMovieDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                currentHashedRefreshToken\n                            \n                            \n                                    Public\n                                email\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                password\n                            \n                            \n                                    Public\n                                    Optional\n                                phoneNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        currentHashedRefreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:13\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\nimport { Exclude } from 'class-transformer';\n\n@Entity()\nclass User {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column({ unique: true })\n  public email: string;\n\n  @Column({ nullable: true })\n  public phoneNumber?: string;\n\n  @Column()\n  public name: string;\n\n  @Column({ nullable: true })\n  @Exclude()\n  public password?: string;\n\n  @Column({ nullable: true })\n  @Exclude()\n  public currentHashedRefreshToken?: string;\n}\n\nexport default User;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOkResponse()@ApiConflictResponse()@UseGuards(LocalAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Body, UseGuards } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { ApiConflictResponse, ApiOkResponse } from '@nestjs/swagger';\nimport { LocalAuthenticationGuard } from 'src/authentication/guards/localAuthentication.guard';\n\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Post()\n  @ApiOkResponse()\n  @ApiConflictResponse()\n  @UseGuards(LocalAuthenticationGuard)\n  create(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.create(createUserDto);\n  }\n\n  // @Get()\n  // findAll() {\n  //   return this.usersService.findAll();\n  // }\n\n  // @Get(':id')\n  // findOne(@Param('id') id: string) {\n  //   return this.usersService.findOne(+id);\n  // }\n\n  // @Patch(':id')\n  // update(@Param('id') id: string, @Body() updateUserDto: UpdateUserDto) {\n  //   return this.usersService.update(+id, updateUserDto);\n  // }\n\n  // @Delete(':id')\n  // remove(@Param('id') id: string) {\n  //   return this.usersService.remove(+id);\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport User from './entities/user.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService]\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                getByEmail\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                getUserIfRefreshTokenMatches\n                            \n                            \n                                    Async\n                                removeRefreshToken\n                            \n                            \n                                    Async\n                                setCurrentRefreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(userData: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userData\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserIfRefreshTokenMatches\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserIfRefreshTokenMatches(refreshToken: string, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeRefreshToken(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        setCurrentRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    setCurrentRefreshToken(refreshToken: string, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport User from './entities/user.entity';\nimport CreateUserDto from './dto/create-user.dto';\nimport * as bcrypt from 'bcrypt';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository,\n  ) {}\n\n  async getById(id: number) {\n    const user = await this.usersRepository.findOneBy({ id });\n    if (user) {\n      return user;\n    }\n    throw new HttpException(\n      'User with this id does not exist',\n      HttpStatus.NOT_FOUND,\n    );\n  }\n\n  async getByEmail(email: string) {\n    const user = await this.usersRepository.findOneBy({ email });\n    if (user) {\n      return user;\n    }\n    throw new HttpException(\n      'User with this email does not exist',\n      HttpStatus.NOT_FOUND,\n    );\n  }\n\n  async create(userData: CreateUserDto) {\n    const newUser = await this.usersRepository.create(userData);\n    await this.usersRepository.save(newUser);\n    return newUser;\n  }\n\n  async setCurrentRefreshToken(refreshToken: string, userId: number) {\n    const currentHashedRefreshToken = await bcrypt.hash(refreshToken, 10);\n    await this.usersRepository.update(userId, {\n      currentHashedRefreshToken,\n    });\n  }\n\n  async getUserIfRefreshTokenMatches(refreshToken: string, userId: number) {\n    const user = await this.getById(userId);\n\n    const isRefreshTokenMatching = await bcrypt.compare(\n      refreshToken,\n      user.currentHashedRefreshToken.toString(),\n    );\n\n    if (isRefreshTokenMatching) {\n      return user;\n    }\n  }\n\n  async removeRefreshToken(userId: number) {\n    return this.usersRepository.update(userId, {\n      currentHashedRefreshToken: null,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/authentication/authentication.controller.ts\n            \n            controller\n            AuthenticationController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/authentication/authentication.service.ts\n            \n            injectable\n            AuthenticationService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/authentication/dto/login.dto.ts\n            \n            class\n            LogInDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/dto/register.dto.ts\n            \n            class\n            RegisterDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/authentication/guards/jwt-authentication.guard.ts\n            \n            injectable\n            JwtAuthenticationGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/guards/jwt-refresh.guard.ts\n            \n            injectable\n            JwtRefreshGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/guards/localAuthentication.guard.ts\n            \n            injectable\n            LocalAuthenticationGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/interface/requestWithUser.interface.ts\n            \n            interface\n            RequestWithUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/authentication/interface/tokenPayload.interface.ts\n            \n            interface\n            TokenPayload\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/authentication/strategy/jwt-refresh-token.strategy.ts\n            \n            injectable\n            JwtRefreshTokenStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/strategy/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/strategy/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/movie/dto/create-movie.dto.ts\n            \n            class\n            CreateMovieDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/movie/dto/update-movie.dto.ts\n            \n            class\n            UpdateMovieDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/movie/entities/movie.entity.ts\n            \n            entity\n            Movie\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/movie/movie.controller.ts\n            \n            controller\n            MovieController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/movie/movie.service.ts\n            \n            injectable\n            MovieService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/8)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.19\n        \n            @hapi/joi : ^17.1.1\n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^9.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/swagger : ^6.1.1\n        \n            @nestjs/typeorm : ^9.0.1\n        \n            @types/bcrypt : ^5.0.0\n        \n            @types/hapi__joi : ^17.1.8\n        \n            @types/passport-jwt : ^3.0.6\n        \n            @types/passport-local : ^1.0.34\n        \n            bcrypt : ^5.0.1\n        \n            cache-manager : ^4.1.0\n        \n            cache-manager-redis-store : ^2.0.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            cookie : ^0.5.0\n        \n            cookie-parser : ^1.4.6\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            pg : ^8.8.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            typeorm : ^0.3.9\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PostgresErrorCode   (src/.../postgresErrorCodes.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/database/postgresErrorCodes.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostgresErrorCode\n                    \n                \n                        \n                            \n                                 UniqueViolation\n                            \n                        \n                        \n                            \n                                Value : 23505\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n    My LinkedIn Profile\n\n\n  NestJS is a progressive Node.js framework for building efficient and scalable server-side applications.\n\nDescription\nThis repository is created to solve the backend problem to MKS Developer,\nUsing Techs like:\n\nTypeScript\nTypeORM\nSWAGGER\nPOSTGRESQL\nPGADMIN\nDOCKER\nDOCKER-COMPOSE\nREDIS\nExpress Framework\nNestJS\nAzure Deploy\n\nDocker Installion (RECOMMENDED)\nIf you do not have Docker neither docker-compose you can follow this steps:\n\nWindows with WSL\nLinux\n\nDocker makes the setup easier\n$ docker-compose build # THIS WILL BUILD THE CONTAINER\n$ docker-compose up # THIS WILL EXPOSE THE APPLICATION \n$ docker-compose down # THIS WILL KILL THE APPLICATIONLocal Installation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:cov\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthenticationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MovieModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthenticationModule\n\n\n\ncluster_AuthenticationModule_providers\n\n\n\ncluster_MovieModule\n\n\n\ncluster_MovieModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthenticationModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nMovieModule\n\nMovieModule\n\nAppModule -->\n\nMovieModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthenticationModule -->\n\nUsersModule->AuthenticationModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nAuthenticationModule -->\n\nAuthenticationService->AuthenticationModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthenticationModule -->\n\nJwtStrategy->AuthenticationModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthenticationModule -->\n\nLocalStrategy->AuthenticationModule\n\n\n\n\n\nMovieService\n\nMovieService\n\nMovieModule -->\n\nMovieService->MovieModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    2 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    9 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    6 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : Backend API solution to developer job\n        \n            License : UNLICENSED\n        \n            Author : Rafael Nilson Witt\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
