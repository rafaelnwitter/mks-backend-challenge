var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.273,1,2.149]],["body/modules/AppModule.html",[0,1.571,1,4.082,2,1.296,3,2.001,4,2.395,5,2.395,6,3.329,7,0.029,8,3.329,9,3.329,10,3.033,11,2.396,12,1.687,13,1.537,14,0.275,15,0.242,16,0.242,17,2.854,18,2.396,19,0.717,20,2.854,21,2.395,22,2.395,23,1.867,24,1.867,25,1.867,26,1.867,27,2.395,28,0.648,29,2.093,30,1.537,31,2.854,32,2.854,33,2.395,34,2.854,35,2.854,36,2.854,37,2.854,38,2.854,39,5.792,40,2.854,41,4.053,42,2.854,43,2.854,44,2.854,45,2.854,46,2.854,47,2.093,48,2.854,49,2.854,50,2.395,51,1.296,52,1.867,53,0.275,54,0.092,55,0.018,56,0.018]],["title/injectables/AppService.html",[57,0.745,58,2.409]],["body/injectables/AppService.html",[7,0.029,14,0.409,15,0.359,16,0.359,19,0.513,28,0.962,53,0.409,54,0.136,55,0.023,56,0.023,57,1.198,58,3.871,59,1.777,60,3.558,61,0.688,62,2.213,63,6.015,64,1.124,65,4.239,66,1.777,67,1.757,68,1.777,69,4.239,70,4.239]],["title/controllers/AuthenticationController.html",[71,1.621,72,2.149]],["body/controllers/AuthenticationController.html",[7,0.029,13,1.049,14,0.188,15,0.165,16,0.165,19,0.672,23,2.455,24,1.274,25,1.274,26,1.274,28,0.442,51,0.884,53,0.188,54,0.063,55,0.013,56,0.013,61,0.316,62,1.277,64,1.125,66,1.779,68,1.573,71,0.961,72,1.993,73,1.428,74,1.428,75,1.634,76,3.046,77,2.679,78,3.046,79,3.046,80,2.556,81,1.947,82,3.633,83,1.927,84,1.947,85,1.947,86,1.927,87,1.309,88,0.965,89,1.779,90,3.742,91,1.947,92,1.947,93,1.947,94,2.455,95,1.947,96,1.8,97,1.947,98,1.947,99,1.947,100,1.947,101,1.634,102,2.508,103,3.046,104,1.947,105,2.556,106,1.428,107,1.947,108,1.947,109,1.428,110,1.634,111,1.947,112,1.947,113,1.947,114,1.428,115,1.852,116,1.428,117,1.634,118,1.947,119,1.274,120,1.947,121,1.151,122,1.428,123,1.634,124,3.046,125,1.428,126,1.947,127,1.573,128,1.428,129,1.947,130,1.428,131,1.634,132,1.947,133,1.947,134,1.049,135,2.218,136,1.8,137,1.947,138,1.947,139,1.947,140,1.947,141,3.046,142,1.947,143,3.046,144,1.947,145,2.776,146,1.779,147,3.046,148,1.947,149,3.046,150,2.751,151,3.046,152,1.634,153,1.634,154,1.947,155,1.993,156,1.947,157,1.947,158,2.556,159,1.947,160,1.947,161,1.634,162,1.634,163,1.947,164,1.947,165,1.947,166,1.947,167,1.947]],["title/modules/AuthenticationModule.html",[0,1.273,6,1.941]],["body/modules/AuthenticationModule.html",[0,1.456,2,1.166,3,1.854,6,3.614,7,0.029,10,2.926,11,2.221,12,1.518,13,1.383,14,0.248,15,0.218,16,0.218,18,2.889,19,0.722,22,3.153,23,1.68,24,1.68,25,1.68,26,2.458,27,2.155,28,0.583,29,3.584,30,1.383,33,2.155,47,1.883,51,1.706,52,2.458,53,0.248,54,0.083,55,0.017,56,0.017,72,2.906,77,1.268,114,2.755,115,2.681,116,1.883,168,2.155,169,2.568,170,2.155,171,3.211,172,3.211,173,2.568,174,2.568,175,3.756,176,1.383,177,2.568,178,2.568,179,1.883,180,3.671,181,2.568,182,2.568,183,3.153,184,2.155,185,2.568,186,2.568,187,2.568,188,2.568,189,2.568,190,2.155,191,2.155,192,2.568,193,2.155,194,2.568]],["title/injectables/AuthenticationService.html",[57,0.745,115,1.621]],["body/injectables/AuthenticationService.html",[7,0.029,14,0.131,15,0.115,16,0.115,19,0.557,28,0.308,30,0.73,50,2.459,53,0.131,54,0.044,55,0.01,56,0.01,57,0.515,59,0.568,61,0.22,62,0.952,64,1.22,66,1.839,67,1.822,68,1.731,75,1.137,77,2.36,80,1.906,86,1.992,87,1.354,88,0.919,89,1.839,96,1.342,101,1.906,102,2.026,105,1.906,115,1.121,117,1.137,127,1.731,128,0.994,134,1.223,135,2.441,136,1.732,145,3.32,146,0.952,150,2.149,152,3.203,155,2.497,161,1.906,162,1.906,179,0.994,180,2.87,190,1.906,193,1.906,195,1.137,196,4.165,197,2.271,198,3.428,199,2.93,200,2.271,201,2.271,202,2.271,203,1.355,204,4.386,205,1.355,206,2.271,207,3.817,208,1.355,209,1.121,210,1.355,211,1.355,212,2.576,213,1.355,214,3.217,215,2.271,216,1.355,217,2.271,218,1.355,219,1.355,220,2.271,221,4.129,222,1.355,223,0.994,224,0.994,225,1.665,226,2.026,227,1.137,228,1.137,229,1.355,230,2.459,231,2.93,232,2.271,233,2.271,234,2.271,235,2.271,236,3.817,237,3.817,238,3.817,239,2.271,240,1.355,241,1.355,242,1.355,243,1.137,244,2.271,245,2.271,246,1.355,247,0.669,248,1.355,249,2.271,250,2.271,251,1.355,252,1.355,253,2.514,254,2.243,255,1.137,256,1.355,257,1.355,258,2.93,259,1.355,260,1.355,261,1.355,262,1.355,263,1.355,264,1.355,265,2.271,266,2.271,267,2.271,268,2.271,269,1.137,270,1.355,271,2.271,272,1.355]],["title/classes/CreateMovieDto.html",[54,0.106,273,1.769]],["body/classes/CreateMovieDto.html",[7,0.029,14,0.351,15,0.308,16,0.308,19,0.441,53,0.351,54,0.154,55,0.021,56,0.021,61,0.59,64,1.418,67,2.017,83,2.429,87,1.651,88,1.12,273,2.578,274,1.796,275,4.769,276,2.668,277,1.855,278,4.489,279,4.489,280,5.348,281,3.638,282,3.638,283,3.638,284,4.167,285,4.167,286,2.38]],["title/classes/CreateUserDto.html",[54,0.106,287,1.769]],["body/classes/CreateUserDto.html",[7,0.028,14,0.383,15,0.337,16,0.337,53,0.488,54,0.128,55,0.022,56,0.022,61,0.644,64,1.479,67,2.066,87,1.722,88,1.169,209,2.753,247,2.753,274,1.961,277,1.964,287,3.005,288,4.931,289,2.913,290,3.973,291,3.973,292,3.973,293,1.804]],["title/modules/DatabaseModule.html",[0,1.273,8,1.941]],["body/modules/DatabaseModule.html",[0,1.866,2,1.667,7,0.029,8,2.846,14,0.354,15,0.311,16,0.311,18,2.846,19,0.65,28,0.833,29,3.53,30,1.977,47,2.692,53,0.354,54,0.118,55,0.021,56,0.021,88,0.769,114,2.692,180,3.731,183,3.081,184,3.081,247,1.812,294,3.671,295,2.692,296,1.977,297,3.671,298,3.671,299,3.671,300,3.671,301,3.671,302,3.671,303,3.671,304,3.671,305,3.671,306,2.402,307,3.671,308,3.671,309,3.671,310,3.53,311,3.671]],["title/injectables/JwtAuthenticationGuard.html",[57,0.745,121,1.941]],["body/injectables/JwtAuthenticationGuard.html",[7,0.028,14,0.431,15,0.379,16,0.379,19,0.66,28,1.015,53,0.431,54,0.144,55,0.024,56,0.024,57,1.238,59,1.874,121,3.224,176,2.408,293,2.03,312,3.752,313,3.752,314,3.752,315,2.206,316,4.47]],["title/injectables/JwtStrategy.html",[57,0.745,171,1.941]],["body/injectables/JwtStrategy.html",[7,0.029,14,0.285,15,0.251,16,0.251,19,0.709,28,0.671,30,1.592,53,0.285,54,0.095,55,0.018,56,0.018,57,0.943,59,1.239,61,0.48,62,1.742,64,1.102,66,1.239,68,1.742,77,2.372,86,1.888,87,1.283,88,0.871,89,1.742,90,3.048,96,1.748,122,2.168,127,2.185,128,2.168,134,2.238,135,2.457,136,2.457,171,2.457,176,1.592,180,3.727,191,2.481,226,3.082,227,2.481,230,2.481,315,1.459,317,2.481,318,3.488,319,2.957,320,4.806,321,2.957,322,4.156,323,2.957,324,2.957,325,2.481,326,2.168,327,2.481,328,2.168,329,2.481,330,2.481,331,2.957,332,2.957,333,2.957,334,2.957,335,2.957]],["title/injectables/LocalAuthenticationGuard.html",[57,0.745,119,2.149]],["body/injectables/LocalAuthenticationGuard.html",[7,0.029,14,0.436,15,0.383,16,0.383,19,0.665,28,1.026,53,0.436,54,0.145,55,0.024,56,0.024,57,1.246,59,1.895,119,3.592,176,2.434,314,3.793,315,2.231,336,3.793,337,4.519]],["title/injectables/LocalStrategy.html",[57,0.745,172,1.941]],["body/injectables/LocalStrategy.html",[7,0.029,14,0.312,15,0.274,16,0.274,19,0.687,28,0.735,53,0.312,54,0.104,55,0.019,56,0.019,57,1.004,59,1.357,61,0.525,62,1.855,64,1.173,66,1.357,67,1.95,68,1.357,77,2.488,86,2.01,87,1.366,88,0.927,89,1.855,115,2.892,116,2.374,134,1.743,146,1.357,172,2.616,176,1.743,209,2.184,247,2.675,315,1.597,318,3.713,325,2.716,326,2.374,327,2.716,329,2.716,330,2.716,338,2.716,339,3.236,340,3.236,341,4.425,342,3.236,343,3.713,344,2.716,345,2.716,346,2.374,347,3.236,348,3.236]],["title/classes/LogInDto.html",[54,0.106,94,2.149]],["body/classes/LogInDto.html",[7,0.028,14,0.372,15,0.327,16,0.327,19,0.467,53,0.48,54,0.16,55,0.022,56,0.022,61,0.626,64,1.319,67,1.935,83,2.259,88,1.042,94,3.601,209,2.717,247,2.717,274,1.905,277,1.929,284,3.648,285,3.648,286,2.526,293,1.753,349,3.24,350,4.619,351,3.861,352,3.24,353,3.861,354,3.24,355,3.24]],["title/entities/Movie.html",[356,1.941,357,1.769]],["body/entities/Movie.html",[7,0.029,14,0.321,15,0.282,16,0.282,19,0.403,53,0.321,54,0.107,55,0.02,56,0.02,61,0.54,64,1.454,67,1.966,83,2.49,87,1.579,88,1.149,196,4.697,212,2.429,277,1.748,278,4.293,279,4.293,293,1.512,306,2.178,356,2.666,357,2.755,358,2.793,359,2.755,360,5.071,361,3.328,362,3.328,363,4.293,364,3.328,365,3.328,366,1.968]],["title/controllers/MovieController.html",[71,1.621,367,2.149]],["body/controllers/MovieController.html",[7,0.029,14,0.226,15,0.198,16,0.198,19,0.636,28,0.531,51,1.063,53,0.226,54,0.075,55,0.015,56,0.015,61,0.38,62,1.47,64,1.327,66,2.098,67,1.906,68,2.098,71,1.155,74,1.717,83,2.273,86,2.122,87,1.442,88,0.979,89,1.958,106,2.572,109,2.572,110,1.965,121,1.384,123,1.965,136,1.384,158,3.921,273,2.829,343,2.944,346,1.717,357,1.889,359,2.829,367,2.295,368,1.965,369,2.074,370,3.921,371,3.508,372,2.944,373,2.944,374,2.341,375,2.341,376,2.341,377,2.341,378,2.341,379,2.341,380,2.341,381,1.965,382,2.341,383,2.341,384,1.965,385,3.311,386,2.341,387,2.341,388,1.965,389,1.965,390,1.965,391,2.266,392,1.965,393,1.532,394,2.572,395,1.717,396,2.341,397,1.717,398,2.341,399,1.965,400,2.341,401,2.341,402,2.341,403,1.965,404,1.965,405,2.341,406,1.965,407,1.965,408,2.341,409,1.965,410,1.965,411,2.341]],["title/modules/MovieModule.html",[0,1.273,9,1.941]],["body/modules/MovieModule.html",[0,1.889,2,1.698,3,2.404,7,0.029,9,3.609,11,2.88,12,2.209,13,2.013,14,0.36,15,0.317,16,0.317,18,2.209,19,0.721,28,0.848,51,2.212,52,3.187,53,0.36,54,0.12,55,0.021,56,0.021,295,2.741,296,2.013,357,2.013,367,3.546,391,3.289,392,3.137,397,2.741,412,3.137,413,3.137,414,3.737,415,3.737,416,3.737]],["title/injectables/MovieService.html",[57,0.745,391,1.769]],["body/injectables/MovieService.html",[7,0.029,14,0.206,15,0.181,16,0.181,19,0.614,28,0.486,53,0.206,54,0.069,55,0.014,56,0.014,57,0.744,59,0.897,61,0.347,62,1.374,64,1.345,66,2.016,68,1.87,77,2.902,86,2.185,87,1.485,88,1.008,89,2.016,96,2.354,134,1.765,135,1.265,145,2.92,155,3.32,212,3.008,223,1.569,224,1.569,253,2.403,254,2.144,273,2.403,296,1.152,357,3.008,359,2.145,366,1.265,372,2.75,373,2.75,381,2.75,384,2.75,385,2.638,391,1.765,393,1.4,394,2.403,395,1.569,397,1.569,417,1.796,418,3.277,419,4.462,420,3.277,421,2.14,422,3.272,423,2.14,424,3.277,425,3.277,426,2.14,427,2.14,428,3.277,429,2.14,430,2.14,431,2.14,432,1.796,433,2.14,434,3.277,435,2.14,436,2.14,437,2.14,438,2.14,439,3.277,440,3.277,441,2.75,442,2.14,443,3.982,444,2.14,445,2.14,446,2.14,447,2.14]],["title/classes/RegisterDto.html",[54,0.106,102,1.941]],["body/classes/RegisterDto.html",[7,0.029,14,0.269,15,0.237,16,0.237,19,0.484,53,0.385,54,0.129,55,0.018,56,0.018,61,0.453,64,1.426,67,2.023,83,2.442,87,1.66,88,1.126,102,2.755,125,2.05,209,2.3,247,2.3,274,1.38,277,1.549,284,3.728,285,3.728,286,1.829,293,1.27,310,2.929,350,3.911,352,2.346,354,2.346,355,2.346,448,2.346,449,4.66,450,3.911,451,2.796,452,2.796,453,3.418,454,3.994,455,3.994,456,3.994,457,2.796,458,2.796,459,2.796,460,2.796,461,2.796,462,3.994,463,3.994,464,3.994,465,3.994,466,4.66,467,3.994,468,2.796,469,2.796,470,2.796,471,4.66,472,2.796,473,2.796,474,2.796,475,2.796]],["title/interfaces/RequestWithUser.html",[82,2.149,476,1.941]],["body/interfaces/RequestWithUser.html",[7,0.028,14,0.405,15,0.356,16,0.356,19,0.635,53,0.405,55,0.023,56,0.023,61,0.681,82,3.743,88,0.879,90,4.196,146,2.706,277,2.033,293,1.906,315,2.589,328,3.077,345,3.522,476,2.481,477,3.077,478,3.522]],["title/interfaces/TokenPayload.html",[226,1.941,476,1.941]],["body/interfaces/TokenPayload.html",[7,0.028,14,0.436,15,0.383,16,0.383,53,0.436,55,0.024,56,0.024,61,0.733,88,0.947,212,3.185,214,4.511,226,3.246,277,2.129,476,2.672,477,3.315,479,3.793]],["title/classes/UpdateMovieDto.html",[54,0.106,385,1.941]],["body/classes/UpdateMovieDto.html",[7,0.028,14,0.431,15,0.379,16,0.379,19,0.66,53,0.431,54,0.144,55,0.024,56,0.024,273,2.408,274,2.206,276,3.278,315,2.206,369,2.643,385,3.224,394,3.278,480,3.752,481,3.752,482,3.278,483,3.278,484,4.47]],["title/classes/UpdateUserDto.html",[54,0.106,485,2.149]],["body/classes/UpdateUserDto.html",[7,0.028,14,0.431,15,0.379,16,0.379,19,0.66,53,0.431,54,0.144,55,0.024,56,0.024,274,2.206,287,2.408,289,3.278,315,2.206,369,2.643,481,3.752,482,3.278,483,3.278,485,3.568,486,3.752,487,3.278,488,4.47]],["title/entities/User.html",[146,1.377,356,1.941]],["body/entities/User.html",[7,0.029,14,0.256,15,0.225,16,0.225,19,0.467,53,0.256,54,0.124,55,0.017,56,0.017,61,0.431,64,1.458,67,2.001,83,2.498,87,1.399,88,1.152,89,2.305,146,1.9,196,4.702,209,2.237,212,2.075,247,2.237,277,1.494,293,1.208,306,1.74,310,4.033,356,2.278,359,2.441,360,4.76,363,3.803,366,1.572,450,3.803,489,2.232,490,3.803,491,4.531,492,3.853,493,2.66,494,2.66,495,2.66,496,2.66,497,2.66,498,2.66,499,2.66,500,4.531,501,2.232,502,2.66,503,4.531]],["title/controllers/UsersController.html",[71,1.621,504,2.149]],["body/controllers/UsersController.html",[7,0.03,14,0.28,15,0.246,16,0.246,19,0.626,28,0.659,51,1.319,53,0.28,54,0.093,55,0.018,56,0.018,61,0.471,62,1.72,64,0.77,66,1.217,67,1.584,68,2.287,71,1.434,74,2.13,83,1.319,86,1.319,87,0.896,88,0.608,89,1.217,106,3.01,109,3.49,127,1.995,136,1.717,287,3.05,346,2.13,359,2.563,369,2.426,370,2.437,388,2.437,389,2.437,390,2.437,393,1.9,395,2.13,399,2.437,403,2.437,404,2.437,406,2.437,407,2.437,409,2.437,410,2.437,485,3.384,487,3.01,504,2.685,505,2.437,506,2.904,507,2.904,508,2.904,509,2.437,510,2.904,511,2.904,512,2.904,513,2.904,514,2.904,515,2.904]],["title/modules/UsersModule.html",[0,1.273,10,1.769]],["body/modules/UsersModule.html",[0,1.829,2,1.617,3,2.328,7,0.029,10,3.31,11,2.789,12,2.104,13,1.917,14,0.343,15,0.302,16,0.302,18,2.104,19,0.71,28,0.808,51,2.142,52,3.086,53,0.343,54,0.115,55,0.021,56,0.021,127,2.713,146,1.492,295,2.61,296,1.917,504,3.462,509,2.987,516,2.987,517,2.987,518,2.987,519,3.559,520,4.717,521,3.559,522,2.987,523,3.559]],["title/injectables/UsersService.html",[57,0.745,127,1.377]],["body/injectables/UsersService.html",[7,0.029,14,0.176,15,0.155,16,0.155,19,0.575,28,0.414,53,0.176,54,0.059,55,0.013,56,0.013,57,0.657,59,0.765,61,0.296,62,1.214,64,1.32,66,1.992,67,1.77,68,1.872,77,2.982,86,2.261,87,1.537,88,1.043,89,2.087,96,2.639,127,1.214,134,1.559,135,1.079,145,3.109,146,2.23,153,3.02,155,3.379,209,1.776,212,3.047,214,3.651,223,1.339,224,1.339,225,2.123,243,1.532,253,2.123,254,1.894,255,2.43,269,1.532,287,2.205,296,0.983,359,1.938,366,1.079,369,1.712,393,1.194,422,3.003,432,1.532,441,2.43,487,1.339,490,3.02,522,1.532,524,1.532,525,2.895,526,2.895,527,2.895,528,2.895,529,2.895,530,1.826,531,1.826,532,2.895,533,2.895,534,1.826,535,1.826,536,2.895,537,1.826,538,2.895,539,1.826,540,2.895,541,1.826,542,2.895,543,1.826,544,2.895,545,1.826,546,1.826,547,2.895,548,2.895,549,2.895,550,1.826,551,1.826,552,1.826,553,2.895,554,1.826,555,2.895,556,1.826,557,1.826]],["title/coverage.html",[558,3.278]],["body/coverage.html",[7,0.029,16,0.224,54,0.177,55,0.017,56,0.017,57,1.316,58,1.938,60,2.218,71,2.228,72,1.729,73,2.813,82,1.729,88,0.554,94,1.729,102,1.562,115,1.304,119,1.729,121,1.562,127,1.108,130,1.938,146,1.108,171,1.562,172,1.562,195,2.218,226,1.562,254,1.729,273,1.423,275,2.218,276,2.813,287,1.423,288,2.218,289,2.813,312,2.218,313,2.218,317,2.218,336,2.218,338,2.218,349,2.218,356,2.267,357,1.423,358,2.218,367,1.729,368,2.218,385,1.562,391,1.423,417,2.218,448,2.218,476,2.267,478,2.218,479,2.218,480,2.218,485,1.729,486,2.218,489,2.218,504,1.729,505,2.218,524,2.218,558,1.938,559,2.643,560,2.643,561,2.643,562,6.525,563,4.954,564,2.643,565,2.643,566,5.799,567,2.643,568,4.515,569,3.835,570,2.218,571,2.643,572,2.218,573,3.835,574,2.643,575,2.643,576,2.643,577,2.643]],["title/dependencies.html",[3,1.948,578,2.307]],["body/dependencies.html",[3,1.537,7,0.03,21,2.613,23,2.819,24,2.819,25,2.037,26,2.037,28,0.707,30,1.677,54,0.139,55,0.019,56,0.019,122,3.16,125,2.284,150,3.16,176,1.677,179,2.284,225,2.284,286,2.037,296,1.677,326,3.623,328,2.284,344,3.616,366,1.841,482,2.284,483,2.284,501,2.613,579,3.114,580,3.114,581,3.114,582,5.597,583,3.114,584,3.114,585,3.114,586,3.114,587,3.114,588,3.114,589,3.114,590,3.114,591,3.114,592,4.309,593,3.114,594,3.114,595,3.114,596,3.114,597,3.114,598,3.114,599,3.114,600,3.114,601,3.114,602,3.114,603,3.114,604,3.114,605,3.114,606,3.114,607,3.114,608,3.114,609,3.114,610,3.114,611,3.114,612,3.114,613,3.114,614,3.114,615,3.114]],["title/miscellaneous/enumerations.html",[616,1.481,617,3.312]],["body/miscellaneous/enumerations.html",[7,0.027,55,0.025,56,0.025,61,0.785,228,4.8,616,2.606,617,4.061,618,4.839,619,4.839,620,4.839,621,4.061,622,4.839]],["title/miscellaneous/functions.html",[616,1.481,623,3.312]],["body/miscellaneous/functions.html",[7,0.025,55,0.025,56,0.025,61,0.799,570,4.134,572,5.148,616,2.653,623,4.134,624,4.926]],["title/index.html",[61,0.446,625,2.749,626,2.749]],["body/index.html",[7,0.029,15,0.278,55,0.02,56,0.02,422,2.402,453,2.402,558,2.402,627,3.275,628,3.275,629,4.461,630,3.275,631,3.275,632,3.275,633,3.275,634,3.275,635,3.275,636,5.073,637,3.275,638,3.275,639,3.275,640,6.016,641,3.275,642,3.275,643,3.275,644,5.88,645,3.275,646,3.275,647,4.461,648,3.275,649,3.275,650,3.275,651,3.275,652,4.461,653,4.461,654,3.275,655,3.275,656,3.275,657,4.461,658,4.461,659,3.275,660,3.275,661,3.275,662,3.275,663,3.275,664,2.749,665,3.275,666,3.275,667,3.275,668,3.275,669,3.275,670,3.275,671,3.275,672,3.275,673,3.275,674,3.275,675,2.749,676,3.275,677,3.275,678,3.275,679,3.275,680,3.275,681,3.275,682,2.749]],["title/modules.html",[2,2.03]],["body/modules.html",[1,2.925,2,2.03,6,2.643,7,0.024,8,2.643,9,2.643,10,2.408,55,0.024,56,0.024,664,5.143,683,6.128,684,6.128,685,6.283,686,4.47,687,4.47]],["title/overview.html",[688,3.751]],["body/overview.html",[1,4.102,2,1.476,3,2.19,4,2.727,5,2.727,6,3.742,7,0.028,8,2.987,9,3.359,10,3.234,11,2.623,12,1.921,13,1.75,51,1.476,55,0.02,56,0.02,59,1.362,115,2.494,127,2.517,168,2.727,170,2.727,171,2.987,172,2.987,274,1.604,306,2.126,391,2.721,412,2.727,413,2.727,477,2.383,516,2.727,517,2.727,518,2.727,688,2.727,689,3.249,690,3.249,691,4.437,692,3.249,693,3.249]],["title/properties.html",[277,1.53,578,2.307]],["body/properties.html",[7,0.029,55,0.025,56,0.025,277,1.876,453,3.549,675,4.061,682,4.061,694,4.839,695,4.839,696,4.839]],["title/miscellaneous/variables.html",[616,1.481,697,3.312]],["body/miscellaneous/variables.html",[7,0.027,55,0.025,56,0.025,61,0.785,73,3.549,130,4.195,131,4.061,293,2.198,616,2.606,621,4.061,697,4.061,698,4.839]]],"invertedIndex":[["",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":562,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":695,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":610,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":599,"title":{},"body":{"dependencies.html":{}}}],["0.3.9",{"_index":615,"title":{},"body":{"dependencies.html":{}}}],["0.5.0",{"_index":600,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":598,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":603,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":566,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":563,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":568,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":573,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":564,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":569,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":574,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":575,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":567,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":465,"title":{},"body":{"classes/RegisterDto.html":{}}}],["1.0.0",{"_index":605,"title":{},"body":{"dependencies.html":{}}}],["1.0.34",{"_index":594,"title":{},"body":{"dependencies.html":{}}}],["1.1.19",{"_index":580,"title":{},"body":{"dependencies.html":{}}}],["1.4.6",{"_index":602,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":243,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{}}}],["120",{"_index":188,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["123123123123",{"_index":474,"title":{},"body":{"classes/RegisterDto.html":{}}}],["123123123123'})@isstring()@isnotempty()@matches(/^\\+[1",{"_index":468,"title":{},"body":{"classes/RegisterDto.html":{}}}],["17.1.1",{"_index":581,"title":{},"body":{"dependencies.html":{}}}],["17.1.8",{"_index":591,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":691,"title":{},"body":{"overview.html":{}}}],["2.0.0",{"_index":597,"title":{},"body":{"dependencies.html":{}}}],["2.2.0",{"_index":583,"title":{},"body":{"dependencies.html":{}}}],["23505",{"_index":622,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["3",{"_index":690,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":612,"title":{},"body":{"dependencies.html":{}}}],["3.0.6",{"_index":593,"title":{},"body":{"dependencies.html":{}}}],["4.0.0",{"_index":604,"title":{},"body":{"dependencies.html":{}}}],["4.1.0",{"_index":596,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":689,"title":{},"body":{"overview.html":{}}}],["5.0.0",{"_index":589,"title":{},"body":{"dependencies.html":{}}}],["5.0.1",{"_index":595,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":693,"title":{},"body":{"overview.html":{}}}],["6.1.1",{"_index":586,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":614,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":692,"title":{},"body":{"overview.html":{}}}],["8.8.0",{"_index":607,"title":{},"body":{"dependencies.html":{}}}],["9.0.0",{"_index":582,"title":{},"body":{"dependencies.html":{}}}],["9.0.1",{"_index":587,"title":{},"body":{"dependencies.html":{}}}],["9]\\\\d{1,14",{"_index":473,"title":{},"body":{"classes/RegisterDto.html":{}}}],["9]\\d{1,14",{"_index":466,"title":{},"body":{"classes/RegisterDto.html":{}}}],["__dirname",{"_index":307,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["accesstokencookie",{"_index":147,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["age=${this.configservice.get",{"_index":239,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["age=${this.configservice.get('jwt_expiration_time",{"_index":270,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["age=0",{"_index":271,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["already",{"_index":256,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["amazing",{"_index":665,"title":{},"body":{"index.html":{}}}],["apibody",{"_index":124,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["apiproperty",{"_index":471,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apiproperty({deprecated",{"_index":452,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apiproperty({description",{"_index":461,"title":{},"body":{"classes/RegisterDto.html":{}}}],["app",{"_index":642,"title":{},"body":{"index.html":{}}}],["applications",{"_index":635,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":58,"title":{"injectables/AppService.html":{}},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["async",{"_index":77,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{}}}],["authenticate",{"_index":76,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["authenticate(@req",{"_index":159,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["authenticate(request",{"_index":81,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["authentication",{"_index":75,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["authentication.controller",{"_index":174,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["authentication.guard",{"_index":123,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/MovieController.html":{}}}],["authentication.guard.ts",{"_index":313,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"coverage.html":{}}}],["authentication.service",{"_index":116,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/LocalStrategy.html":{}}}],["authentication/authentication.module",{"_index":34,"title":{},"body":{"modules/AppModule.html":{}}}],["authentication/jwt",{"_index":396,"title":{},"body":{"controllers/MovieController.html":{}}}],["authentication=${token",{"_index":235,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["authenticationcontroller",{"_index":72,"title":{"controllers/AuthenticationController.html":{}},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"coverage.html":{}}}],["authenticationmodule",{"_index":6,"title":{"modules/AuthenticationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules.html":{},"overview.html":{}}}],["authenticationservice",{"_index":115,"title":{"injectables/AuthenticationService.html":{}},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["authguard",{"_index":314,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"injectables/LocalAuthenticationGuard.html":{}}}],["authguard('jwt",{"_index":316,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{}}}],["authguard('local",{"_index":337,"title":{},"body":{"injectables/LocalAuthenticationGuard.html":{}}}],["author",{"_index":675,"title":{},"body":{"index.html":{},"properties.html":{}}}],["autoloadentities",{"_index":311,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["available",{"_index":687,"title":{},"body":{"modules.html":{}}}],["await",{"_index":155,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{}}}],["backers",{"_index":666,"title":{},"body":{"index.html":{}}}],["bcrypt",{"_index":225,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcrypt.compare",{"_index":269,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{}}}],["bcrypt.hash(refreshtoken",{"_index":552,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt.hash(registrationdata.password",{"_index":242,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["body",{"_index":106,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/MovieController.html":{},"controllers/UsersController.html":{}}}],["bootstrap",{"_index":572,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":685,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":683,"title":{},"body":{"modules.html":{}}}],["building",{"_index":630,"title":{},"body":{"index.html":{}}}],["cache",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"dependencies.html":{}}}],["cache_manager",{"_index":113,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["cachemanager",{"_index":138,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["cachemodule",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{}}}],["cachemodule.registerasync",{"_index":182,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["catch",{"_index":249,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["class",{"_index":54,"title":{"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{}},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":274,"title":{},"body":{"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule",{"_index":168,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule_imports",{"_index":169,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["cluster_authenticationmodule_providers",{"_index":170,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_moviemodule",{"_index":412,"title":{},"body":{"modules/MovieModule.html":{},"overview.html":{}}}],["cluster_moviemodule_providers",{"_index":413,"title":{},"body":{"modules/MovieModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":516,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":518,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":517,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["column",{"_index":360,"title":{},"body":{"entities/Movie.html":{},"entities/User.html":{}}}],["column({nullable",{"_index":491,"title":{},"body":{"entities/User.html":{}}}],["column({unique",{"_index":494,"title":{},"body":{"entities/User.html":{}}}],["compodoc/compodoc",{"_index":579,"title":{},"body":{"dependencies.html":{}}}],["configmodule",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{}}}],["configmodule.forroot",{"_index":35,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":180,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/DatabaseModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('jwt_expiration_time')}s",{"_index":194,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["configservice.get('jwt_secret",{"_index":191,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('postgres_db",{"_index":305,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('postgres_host",{"_index":299,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('postgres_password",{"_index":303,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('postgres_port",{"_index":300,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('postgres_user",{"_index":302,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('redis_host",{"_index":185,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["configservice.get('redis_port",{"_index":186,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["const",{"_index":145,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":134,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{}}}],["constructor(authenticationservice",{"_index":339,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(configservice",{"_index":319,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(movierepository",{"_index":421,"title":{},"body":{"injectables/MovieService.html":{}}}],["constructor(private",{"_index":346,"title":{},"body":{"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"controllers/UsersController.html":{}}}],["constructor(usersrepository",{"_index":530,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":203,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["controller",{"_index":71,"title":{"controllers/AuthenticationController.html":{},"controllers/MovieController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AuthenticationController.html":{},"controllers/MovieController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('authentication",{"_index":132,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["controller('movie",{"_index":398,"title":{},"body":{"controllers/MovieController.html":{}}}],["controller('users",{"_index":510,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["cookie",{"_index":150,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"dependencies.html":{}}}],["cookies",{"_index":130,"title":{},"body":{"controllers/AuthenticationController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["coverage",{"_index":558,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":369,"title":{},"body":{"controllers/MovieController.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":399,"title":{},"body":{"controllers/MovieController.html":{},"controllers/UsersController.html":{}}}],["create(createmoviedto",{"_index":374,"title":{},"body":{"controllers/MovieController.html":{}}}],["create(createuserdto",{"_index":507,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(userdata",{"_index":533,"title":{},"body":{"injectables/UsersService.html":{}}}],["createduser",{"_index":245,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["createduser.password",{"_index":248,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["createmovie",{"_index":418,"title":{},"body":{"injectables/MovieService.html":{}}}],["createmovie(movie",{"_index":425,"title":{},"body":{"injectables/MovieService.html":{}}}],["createmoviedto",{"_index":273,"title":{"classes/CreateMovieDto.html":{}},"body":{"classes/CreateMovieDto.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"classes/UpdateMovieDto.html":{},"coverage.html":{}}}],["createuserdto",{"_index":287,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["credentials",{"_index":266,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["currenthashedrefreshtoken",{"_index":490,"title":{},"body":{"entities/User.html":{},"injectables/UsersService.html":{}}}],["database",{"_index":304,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["database/database.module",{"_index":32,"title":{},"body":{"modules/AppModule.html":{}}}],["database/postgreserrorcodes.enum",{"_index":229,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["databasemodule",{"_index":8,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["decorators",{"_index":83,"title":{},"body":{"controllers/AuthenticationController.html":{},"classes/CreateMovieDto.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":293,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/JwtAuthenticationGuard.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":64,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":390,"title":{},"body":{"controllers/MovieController.html":{},"controllers/UsersController.html":{}}}],["delete(':id",{"_index":409,"title":{},"body":{"controllers/MovieController.html":{},"controllers/UsersController.html":{}}}],["delete(':id')@useguards(jwtauthenticationguard",{"_index":382,"title":{},"body":{"controllers/MovieController.html":{}}}],["deleteresponse",{"_index":445,"title":{},"body":{"injectables/MovieService.html":{}}}],["deleteresponse.affected",{"_index":447,"title":{},"body":{"injectables/MovieService.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/MovieModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deprecated",{"_index":472,"title":{},"body":{"classes/RegisterDto.html":{}}}],["description",{"_index":453,"title":{},"body":{"classes/RegisterDto.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":643,"title":{},"body":{"index.html":{}}}],["director",{"_index":278,"title":{},"body":{"classes/CreateMovieDto.html":{},"entities/Movie.html":{}}}],["documentation",{"_index":559,"title":{},"body":{"coverage.html":{}}}],["dto/create",{"_index":393,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/login.dto",{"_index":126,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["dto/register.dto",{"_index":117,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["dto/update",{"_index":395,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{},"controllers/UsersController.html":{}}}],["e2e",{"_index":654,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":631,"title":{},"body":{"index.html":{}}}],["email",{"_index":209,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["entities",{"_index":306,"title":{},"body":{"modules/DatabaseModule.html":{},"entities/Movie.html":{},"entities/User.html":{},"overview.html":{}}}],["entities/movie.entity",{"_index":397,"title":{},"body":{"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{}}}],["entities/user.entity",{"_index":522,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entity",{"_index":356,"title":{"entities/Movie.html":{},"entities/User.html":{}},"body":{"entities/Movie.html":{},"entities/User.html":{},"coverage.html":{}}}],["entity.ts",{"_index":308,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["enumerations",{"_index":617,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":250,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["error?.code",{"_index":251,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["example",{"_index":467,"title":{},"body":{"classes/RegisterDto.html":{}}}],["exclude",{"_index":500,"title":{},"body":{"entities/User.html":{}}}],["exist",{"_index":548,"title":{},"body":{"injectables/UsersService.html":{}}}],["exists",{"_index":257,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["expiresin",{"_index":193,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{}}}],["export",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":520,"title":{},"body":{"modules/UsersModule.html":{}}}],["express",{"_index":328,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{},"dependencies.html":{}}}],["expression",{"_index":464,"title":{},"body":{"classes/RegisterDto.html":{}}}],["extends",{"_index":315,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{}}}],["extractjwt",{"_index":324,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromextractors([(request",{"_index":332,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["file",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["findall",{"_index":370,"title":{},"body":{"controllers/MovieController.html":{},"controllers/UsersController.html":{}}}],["findone",{"_index":371,"title":{},"body":{"controllers/MovieController.html":{}}}],["findone(@param('id",{"_index":404,"title":{},"body":{"controllers/MovieController.html":{},"controllers/UsersController.html":{}}}],["findone(id",{"_index":378,"title":{},"body":{"controllers/MovieController.html":{}}}],["found",{"_index":440,"title":{},"body":{"injectables/MovieService.html":{}}}],["framework",{"_index":629,"title":{},"body":{"index.html":{}}}],["fullname",{"_index":449,"title":{},"body":{"classes/RegisterDto.html":{}}}],["function",{"_index":571,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":623,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["gender",{"_index":279,"title":{},"body":{"classes/CreateMovieDto.html":{},"entities/Movie.html":{}}}],["get(':id",{"_index":403,"title":{},"body":{"controllers/MovieController.html":{},"controllers/UsersController.html":{}}}],["get(':id')@useguards(jwtauthenticationguard",{"_index":379,"title":{},"body":{"controllers/MovieController.html":{}}}],["getallmovies",{"_index":419,"title":{},"body":{"injectables/MovieService.html":{}}}],["getauthenticateduser",{"_index":197,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getauthenticateduser(email",{"_index":206,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getbyemail",{"_index":525,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyemail(email",{"_index":536,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyid",{"_index":526,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyid(id",{"_index":538,"title":{},"body":{"injectables/UsersService.html":{}}}],["getcookiesforlogout",{"_index":198,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwtaccesstoken",{"_index":199,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwtaccesstoken(userid",{"_index":211,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwtrefreshtoken",{"_index":200,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwtrefreshtoken(userid",{"_index":215,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwttoken",{"_index":201,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwttoken(userid",{"_index":217,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["gethello",{"_index":63,"title":{},"body":{"injectables/AppService.html":{}}}],["getmoviebyid",{"_index":420,"title":{},"body":{"injectables/MovieService.html":{}}}],["getmoviebyid(id",{"_index":428,"title":{},"body":{"injectables/MovieService.html":{}}}],["getting",{"_index":625,"title":{"index.html":{}},"body":{}}],["getuserifrefreshtokenmatches",{"_index":527,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserifrefreshtokenmatches(refreshtoken",{"_index":540,"title":{},"body":{"injectables/UsersService.html":{}}}],["graph",{"_index":686,"title":{},"body":{"modules.html":{}}}],["grow",{"_index":661,"title":{},"body":{"index.html":{}}}],["hapi/joi",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["hashedpassword",{"_index":221,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["hello",{"_index":69,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":672,"title":{},"body":{"index.html":{}}}],["host",{"_index":184,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{}}}],["httpcode",{"_index":108,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["httpcode(200",{"_index":141,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["httpcode(200)@useguards(localauthenticationguard)@post('log",{"_index":92,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["httpexception",{"_index":223,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{}}}],["httpexception('movie",{"_index":439,"title":{},"body":{"injectables/MovieService.html":{}}}],["httpexception('something",{"_index":259,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["httpexception('user",{"_index":255,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{}}}],["httpexception('wrong",{"_index":265,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["httponly",{"_index":236,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["https://nestjs.com",{"_index":679,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":224,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{}}}],["httpstatus.bad_request",{"_index":258,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["httpstatus.internal_server_error",{"_index":262,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["httpstatus.not_found",{"_index":441,"title":{},"body":{"injectables/MovieService.html":{},"injectables/UsersService.html":{}}}],["id",{"_index":359,"title":{},"body":{"entities/Movie.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":560,"title":{},"body":{"coverage.html":{}}}],["ignore",{"_index":133,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["import",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{},"modules/MovieModule.html":{},"modules/UsersModule.html":{}}}],["in')@apibody({type",{"_index":93,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["index",{"_index":61,"title":{"index.html":{}},"body":{"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":14,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["inject",{"_index":114,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{}}}],["inject(cache_manager",{"_index":137,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["injectable",{"_index":57,"title":{"injectables/AppService.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":59,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":432,"title":{},"body":{"injectables/MovieService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(movie",{"_index":433,"title":{},"body":{"injectables/MovieService.html":{}}}],["injectrepository(user",{"_index":546,"title":{},"body":{"injectables/UsersService.html":{}}}],["installation",{"_index":639,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":641,"title":{},"body":{"index.html":{}}}],["instead",{"_index":456,"title":{},"body":{"classes/RegisterDto.html":{}}}],["interface",{"_index":476,"title":{"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{}},"body":{"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["interfaces",{"_index":477,"title":{},"body":{"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"overview.html":{}}}],["isemail",{"_index":350,"title":{},"body":{"classes/LogInDto.html":{},"classes/RegisterDto.html":{}}}],["isnotempty",{"_index":284,"title":{},"body":{"classes/CreateMovieDto.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{}}}],["isnotempty()@isstring",{"_index":280,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["ispasswordmatching",{"_index":268,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["isrefreshtokenmatching",{"_index":555,"title":{},"body":{"injectables/UsersService.html":{}}}],["isstring",{"_index":285,"title":{},"body":{"classes/CreateMovieDto.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{}}}],["isstring()@isnotempty",{"_index":458,"title":{},"body":{"classes/RegisterDto.html":{}}}],["isstring()@isnotempty()@minlength(7",{"_index":352,"title":{},"body":{"classes/LogInDto.html":{},"classes/RegisterDto.html":{}}}],["joi",{"_index":20,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.number",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.number().required",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.object",{"_index":37,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().required",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["join",{"_index":668,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":122,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":181,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["jwt_expiration_time",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthenticationService.html":{}}}],["jwt_refresh_token_expiration_time",{"_index":241,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["jwt_secret",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["jwtauthenticationguard",{"_index":121,"title":{"injectables/JwtAuthenticationGuard.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/JwtAuthenticationGuard.html":{},"controllers/MovieController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":331,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":178,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["jwtmodule.registerasync",{"_index":189,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["jwtservice",{"_index":204,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["jwtstrategy",{"_index":171,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":676,"title":{},"body":{"index.html":{}}}],["license",{"_index":682,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":658,"title":{},"body":{"index.html":{}}}],["local",{"_index":344,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["local.strategy",{"_index":177,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["localauthentication.guard",{"_index":120,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["localauthenticationguard",{"_index":119,"title":{"injectables/LocalAuthenticationGuard.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/LocalAuthenticationGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":172,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["login",{"_index":78,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["login(@req",{"_index":144,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["login(request",{"_index":91,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logindto",{"_index":94,"title":{"classes/LogInDto.html":{}},"body":{"controllers/AuthenticationController.html":{},"classes/LogInDto.html":{},"coverage.html":{}}}],["logout",{"_index":79,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logout(@req",{"_index":163,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logout(request",{"_index":97,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["manager",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"dependencies.html":{}}}],["match",{"_index":462,"title":{},"body":{"classes/RegisterDto.html":{}}}],["matches",{"_index":470,"title":{},"body":{"classes/RegisterDto.html":{}}}],["matches(/^\\+[1",{"_index":475,"title":{},"body":{"classes/RegisterDto.html":{}}}],["matching",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":238,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["metadata",{"_index":609,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":62,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minlength",{"_index":354,"title":{},"body":{"classes/LogInDto.html":{},"classes/RegisterDto.html":{}}}],["minlength(7",{"_index":355,"title":{},"body":{"classes/LogInDto.html":{},"classes/RegisterDto.html":{}}}],["miscellaneous",{"_index":616,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":657,"title":{},"body":{"index.html":{}}}],["mode",{"_index":647,"title":{},"body":{"index.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{},"modules/MovieModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{},"modules/MovieModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{},"modules/MovieModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":671,"title":{},"body":{"index.html":{}}}],["movie",{"_index":357,"title":{"entities/Movie.html":{}},"body":{"entities/Movie.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"coverage.html":{}}}],["movie.controller",{"_index":415,"title":{},"body":{"modules/MovieModule.html":{}}}],["movie.dto",{"_index":394,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{},"classes/UpdateMovieDto.html":{}}}],["movie.dto.ts",{"_index":276,"title":{},"body":{"classes/CreateMovieDto.html":{},"classes/UpdateMovieDto.html":{},"coverage.html":{}}}],["movie.dto.ts:10",{"_index":282,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["movie.dto.ts:14",{"_index":281,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["movie.dto.ts:6",{"_index":283,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["movie.service",{"_index":392,"title":{},"body":{"controllers/MovieController.html":{},"modules/MovieModule.html":{}}}],["movie/movie.module",{"_index":31,"title":{},"body":{"modules/AppModule.html":{}}}],["moviecontroller",{"_index":367,"title":{"controllers/MovieController.html":{}},"body":{"controllers/MovieController.html":{},"modules/MovieModule.html":{},"coverage.html":{}}}],["moviemodule",{"_index":9,"title":{"modules/MovieModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MovieModule.html":{},"modules.html":{},"overview.html":{}}}],["movierepository",{"_index":424,"title":{},"body":{"injectables/MovieService.html":{}}}],["movieservice",{"_index":391,"title":{"injectables/MovieService.html":{}},"body":{"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"coverage.html":{},"overview.html":{}}}],["myśliwiec",{"_index":677,"title":{},"body":{"index.html":{}}}],["name",{"_index":87,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["nest",{"_index":636,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":681,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/DatabaseModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":584,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":179,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":482,"title":{},"body":{"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":176,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":585,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":125,"title":{},"body":{"controllers/AuthenticationController.html":{},"classes/RegisterDto.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":296,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":254,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newmovie",{"_index":434,"title":{},"body":{"injectables/MovieService.html":{}}}],["newuser",{"_index":549,"title":{},"body":{"injectables/UsersService.html":{}}}],["node.js",{"_index":628,"title":{},"body":{"index.html":{}}}],["npm",{"_index":640,"title":{},"body":{"index.html":{}}}],["null",{"_index":557,"title":{},"body":{"injectables/UsersService.html":{}}}],["nullable",{"_index":503,"title":{},"body":{"entities/User.html":{}}}],["number",{"_index":212,"title":{},"body":{"injectables/AuthenticationService.html":{},"entities/Movie.html":{},"injectables/MovieService.html":{},"interfaces/TokenPayload.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["open",{"_index":659,"title":{},"body":{"index.html":{}}}],["optional",{"_index":89,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["out",{"_index":13,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"modules/MovieModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["out')@httpcode(200",{"_index":99,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["overview",{"_index":688,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":578,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":389,"title":{},"body":{"controllers/MovieController.html":{},"controllers/UsersController.html":{}}}],["parameters",{"_index":86,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parser",{"_index":601,"title":{},"body":{"dependencies.html":{}}}],["partialtype",{"_index":481,"title":{},"body":{"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createmoviedto",{"_index":484,"title":{},"body":{"classes/UpdateMovieDto.html":{}}}],["partialtype(createuserdto",{"_index":488,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["passport",{"_index":326,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":175,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["passportstrategy",{"_index":327,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":329,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":247,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{}}}],["patch",{"_index":388,"title":{},"body":{"controllers/MovieController.html":{},"controllers/UsersController.html":{}}}],["patch(':id",{"_index":406,"title":{},"body":{"controllers/MovieController.html":{},"controllers/UsersController.html":{}}}],["patch(':id')@useguards(jwtauthenticationguard",{"_index":386,"title":{},"body":{"controllers/MovieController.html":{}}}],["path",{"_index":237,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["payload",{"_index":230,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtStrategy.html":{}}}],["pg",{"_index":606,"title":{},"body":{"dependencies.html":{}}}],["phonenumber",{"_index":450,"title":{},"body":{"classes/RegisterDto.html":{},"entities/User.html":{}}}],["plaintextpassword",{"_index":207,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["please",{"_index":669,"title":{},"body":{"index.html":{}}}],["port",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{}}}],["post",{"_index":109,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/MovieController.html":{},"controllers/UsersController.html":{}}}],["post('log",{"_index":143,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post('register",{"_index":103,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post()@useguards(jwtauthenticationguard",{"_index":375,"title":{},"body":{"controllers/MovieController.html":{}}}],["postgres",{"_index":298,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["postgres_db",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["postgres_host",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["postgres_password",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["postgres_port",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["postgres_user",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["postgreserrorcode",{"_index":228,"title":{},"body":{"injectables/AuthenticationService.html":{},"miscellaneous/enumerations.html":{}}}],["postgreserrorcode.uniqueviolation",{"_index":252,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["prefix",{"_index":74,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/MovieController.html":{},"controllers/UsersController.html":{}}}],["primarygeneratedcolumn",{"_index":363,"title":{},"body":{"entities/Movie.html":{},"entities/User.html":{}}}],["private",{"_index":135,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtStrategy.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{}}}],["production",{"_index":649,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":627,"title":{},"body":{"index.html":{}}}],["project",{"_index":660,"title":{},"body":{"index.html":{}}}],["promise",{"_index":343,"title":{},"body":{"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{}}}],["properties",{"_index":277,"title":{"properties.html":{}},"body":{"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"entities/User.html":{},"properties.html":{}}}],["property",{"_index":455,"title":{},"body":{"classes/RegisterDto.html":{}}}],["provided",{"_index":267,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["providers",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/MovieModule.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":196,"title":{},"body":{"injectables/AuthenticationService.html":{},"entities/Movie.html":{},"entities/User.html":{}}}],["read",{"_index":670,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":136,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtStrategy.html":{},"controllers/MovieController.html":{},"controllers/UsersController.html":{}}}],["redis",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"dependencies.html":{}}}],["redis_host",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["redis_port",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["redisstore",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{}}}],["reflect",{"_index":608,"title":{},"body":{"dependencies.html":{}}}],["refresh",{"_index":272,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["refresh=${token",{"_index":240,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["refreshtoken",{"_index":153,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/UsersService.html":{}}}],["refreshtokencookie",{"_index":151,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["register",{"_index":80,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["register(@body",{"_index":139,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["register(registrationdata",{"_index":101,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["registerdto",{"_index":102,"title":{"classes/RegisterDto.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/RegisterDto.html":{},"coverage.html":{}}}],["registrationdata",{"_index":105,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["regular",{"_index":463,"title":{},"body":{"classes/RegisterDto.html":{}}}],["remove",{"_index":372,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{}}}],["remove(@param('id",{"_index":410,"title":{},"body":{"controllers/MovieController.html":{},"controllers/UsersController.html":{}}}],["remove(id",{"_index":381,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{}}}],["removerefreshtoken",{"_index":528,"title":{},"body":{"injectables/UsersService.html":{}}}],["removerefreshtoken(userid",{"_index":542,"title":{},"body":{"injectables/UsersService.html":{}}}],["repository",{"_index":422,"title":{},"body":{"injectables/MovieService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["req",{"_index":107,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["request",{"_index":90,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{}}}],["request.res.setheader",{"_index":165,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["request.res.setheader('set",{"_index":157,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["request.user",{"_index":160,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["request?.cookies?.authentication",{"_index":333,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["requestwithuser",{"_index":82,"title":{"interfaces/RequestWithUser.html":{}},"body":{"controllers/AuthenticationController.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["requestwithuser.interface",{"_index":118,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["require('cookie",{"_index":131,"title":{},"body":{"controllers/AuthenticationController.html":{},"miscellaneous/variables.html":{}}}],["res",{"_index":112,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["reset",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/MovieModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":111,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["results",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":68,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":66,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["rimraf",{"_index":611,"title":{},"body":{"dependencies.html":{}}}],["run",{"_index":644,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":613,"title":{},"body":{"dependencies.html":{}}}],["s",{"_index":234,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["scalable",{"_index":632,"title":{},"body":{"index.html":{}}}],["secret",{"_index":190,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{}}}],["secretorkey",{"_index":334,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["server",{"_index":633,"title":{},"body":{"index.html":{}}}],["set",{"_index":166,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["setcurrentrefreshtoken",{"_index":529,"title":{},"body":{"injectables/UsersService.html":{}}}],["setcurrentrefreshtoken(refreshtoken",{"_index":544,"title":{},"body":{"injectables/UsersService.html":{}}}],["side",{"_index":634,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":192,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["source",{"_index":15,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["sponsors",{"_index":663,"title":{},"body":{"index.html":{}}}],["src/.../authentication.controller.ts",{"_index":698,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":624,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../postgreserrorcodes.enum.ts",{"_index":618,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.module.ts",{"_index":17,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":60,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":65,"title":{},"body":{"injectables/AppService.html":{}}}],["src/authentication/authentication.controller.ts",{"_index":73,"title":{},"body":{"controllers/AuthenticationController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/authentication/authentication.controller.ts:27",{"_index":104,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:35",{"_index":95,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:57",{"_index":85,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:66",{"_index":100,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.module.ts",{"_index":173,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["src/authentication/authentication.service.ts",{"_index":195,"title":{},"body":{"injectables/AuthenticationService.html":{},"coverage.html":{}}}],["src/authentication/authentication.service.ts:12",{"_index":213,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:27",{"_index":216,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:42",{"_index":205,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:49",{"_index":219,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:66",{"_index":208,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:77",{"_index":222,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:87",{"_index":218,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:93",{"_index":210,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/dto/login.dto.ts",{"_index":349,"title":{},"body":{"classes/LogInDto.html":{},"coverage.html":{}}}],["src/authentication/dto/login.dto.ts:10",{"_index":353,"title":{},"body":{"classes/LogInDto.html":{}}}],["src/authentication/dto/login.dto.ts:5",{"_index":351,"title":{},"body":{"classes/LogInDto.html":{}}}],["src/authentication/dto/register.dto.ts",{"_index":448,"title":{},"body":{"classes/RegisterDto.html":{},"coverage.html":{}}}],["src/authentication/dto/register.dto.ts:12",{"_index":451,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/dto/register.dto.ts:16",{"_index":459,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/dto/register.dto.ts:22",{"_index":457,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/dto/register.dto.ts:27",{"_index":460,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/dto/register.dto.ts:36",{"_index":469,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/jwt",{"_index":312,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"coverage.html":{}}}],["src/authentication/jwt.strategy.ts",{"_index":317,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/authentication/jwt.strategy.ts:10",{"_index":321,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/authentication/jwt.strategy.ts:23",{"_index":323,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/authentication/local.strategy.ts",{"_index":338,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/authentication/local.strategy.ts:14",{"_index":342,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/authentication/local.strategy.ts:8",{"_index":340,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/authentication/localauthentication.guard.ts",{"_index":336,"title":{},"body":{"injectables/LocalAuthenticationGuard.html":{},"coverage.html":{}}}],["src/authentication/requestwithuser.interface.ts",{"_index":478,"title":{},"body":{"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["src/authentication/tokenpayload.interface.ts",{"_index":479,"title":{},"body":{"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["src/database/database.module.ts",{"_index":294,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/database/postgreserrorcodes.enum.ts",{"_index":619,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/main.ts",{"_index":570,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/movie/dto/create",{"_index":275,"title":{},"body":{"classes/CreateMovieDto.html":{},"coverage.html":{}}}],["src/movie/dto/update",{"_index":480,"title":{},"body":{"classes/UpdateMovieDto.html":{},"coverage.html":{}}}],["src/movie/entities/movie.entity.ts",{"_index":358,"title":{},"body":{"entities/Movie.html":{},"coverage.html":{}}}],["src/movie/entities/movie.entity.ts:10",{"_index":364,"title":{},"body":{"entities/Movie.html":{}}}],["src/movie/entities/movie.entity.ts:13",{"_index":365,"title":{},"body":{"entities/Movie.html":{}}}],["src/movie/entities/movie.entity.ts:16",{"_index":362,"title":{},"body":{"entities/Movie.html":{}}}],["src/movie/entities/movie.entity.ts:19",{"_index":361,"title":{},"body":{"entities/Movie.html":{}}}],["src/movie/movie.controller.ts",{"_index":368,"title":{},"body":{"controllers/MovieController.html":{},"coverage.html":{}}}],["src/movie/movie.controller.ts:14",{"_index":376,"title":{},"body":{"controllers/MovieController.html":{}}}],["src/movie/movie.controller.ts:19",{"_index":377,"title":{},"body":{"controllers/MovieController.html":{}}}],["src/movie/movie.controller.ts:29",{"_index":380,"title":{},"body":{"controllers/MovieController.html":{}}}],["src/movie/movie.controller.ts:35",{"_index":387,"title":{},"body":{"controllers/MovieController.html":{}}}],["src/movie/movie.controller.ts:41",{"_index":383,"title":{},"body":{"controllers/MovieController.html":{}}}],["src/movie/movie.module.ts",{"_index":414,"title":{},"body":{"modules/MovieModule.html":{}}}],["src/movie/movie.service.ts",{"_index":417,"title":{},"body":{"injectables/MovieService.html":{},"coverage.html":{}}}],["src/movie/movie.service.ts:15",{"_index":426,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/movie/movie.service.ts:21",{"_index":427,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/movie/movie.service.ts:25",{"_index":429,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/movie/movie.service.ts:33",{"_index":431,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/movie/movie.service.ts:39",{"_index":430,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/movie/movie.service.ts:9",{"_index":423,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/users/dto/create",{"_index":288,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":486,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts",{"_index":489,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:11",{"_index":496,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:14",{"_index":495,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:17",{"_index":499,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:20",{"_index":497,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:24",{"_index":498,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:30",{"_index":493,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":505,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:11",{"_index":508,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":519,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":524,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:15",{"_index":539,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:23",{"_index":537,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:31",{"_index":534,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:37",{"_index":545,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:44",{"_index":541,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:56",{"_index":543,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:9",{"_index":531,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":645,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":648,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":650,"title":{},"body":{"index.html":{}}}],["started",{"_index":626,"title":{"index.html":{}},"body":{}}],["starter",{"_index":638,"title":{},"body":{"index.html":{}}}],["statements",{"_index":561,"title":{},"body":{"coverage.html":{}}}],["stay",{"_index":673,"title":{},"body":{"index.html":{}}}],["store",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"dependencies.html":{}}}],["strategy",{"_index":325,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":67,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["super",{"_index":330,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["support",{"_index":664,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":684,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":309,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["table",{"_index":577,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":576,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":653,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":656,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":655,"title":{},"body":{"index.html":{}}}],["teste",{"_index":402,"title":{},"body":{"controllers/MovieController.html":{}}}],["tests",{"_index":652,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":662,"title":{},"body":{"index.html":{}}}],["this.authenticationservice.getauthenticateduser(email",{"_index":348,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.authenticationservice.getcookiesforlogout",{"_index":167,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authenticationservice.getcookiewithjwtaccesstoken",{"_index":148,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authenticationservice.getcookiewithjwtrefreshtoken(user.id",{"_index":154,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authenticationservice.register(registrationdata",{"_index":140,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.configservice.get",{"_index":233,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.configservice.get('jwt_secret",{"_index":232,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.getbyid(userid",{"_index":554,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.jwtservice.sign(payload",{"_index":231,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.movierepository.create(movie",{"_index":435,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.movierepository.delete(id",{"_index":446,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.movierepository.find",{"_index":437,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.movierepository.findoneby({id",{"_index":438,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.movierepository.findonebyorfail({id",{"_index":444,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.movierepository.save(newmovie",{"_index":436,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.movierepository.update(id",{"_index":442,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.movieservice.createmovie(createmoviedto",{"_index":400,"title":{},"body":{"controllers/MovieController.html":{}}}],["this.movieservice.getallmovies",{"_index":401,"title":{},"body":{"controllers/MovieController.html":{}}}],["this.movieservice.getmoviebyid(+id",{"_index":405,"title":{},"body":{"controllers/MovieController.html":{}}}],["this.movieservice.remove(+id",{"_index":411,"title":{},"body":{"controllers/MovieController.html":{}}}],["this.movieservice.update(+id",{"_index":408,"title":{},"body":{"controllers/MovieController.html":{}}}],["this.userservice.getbyid(payload.userid",{"_index":335,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.usersrepository.create(userdata",{"_index":550,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findoneby",{"_index":547,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.save(newuser",{"_index":551,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.update(userid",{"_index":553,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.create",{"_index":246,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.usersservice.create(createuserdto",{"_index":511,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall",{"_index":512,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(+id",{"_index":513,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getbyemail(email",{"_index":263,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.usersservice.remove(+id",{"_index":515,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.removerefreshtoken(request.user.id",{"_index":164,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.usersservice.setcurrentrefreshtoken(refreshtoken",{"_index":156,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.usersservice.update(+id",{"_index":514,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.verifypassword(plaintextpassword",{"_index":264,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["throw",{"_index":253,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{}}}],["token",{"_index":152,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["tokenpayload",{"_index":226,"title":{"interfaces/TokenPayload.html":{}},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtStrategy.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["tokenpayload.interface",{"_index":227,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtStrategy.html":{}}}],["touch",{"_index":674,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":501,"title":{},"body":{"entities/User.html":{},"dependencies.html":{}}}],["true",{"_index":310,"title":{},"body":{"modules/DatabaseModule.html":{},"classes/RegisterDto.html":{},"entities/User.html":{}}}],["true})@exclude",{"_index":492,"title":{},"body":{"entities/User.html":{}}}],["try",{"_index":244,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["ttl",{"_index":187,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["twitter",{"_index":680,"title":{},"body":{"index.html":{}}}],["type",{"_index":88,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["typeorm",{"_index":366,"title":{},"body":{"entities/Movie.html":{},"injectables/MovieService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":295,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/MovieModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([movie",{"_index":416,"title":{},"body":{"modules/MovieModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":523,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":297,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["types",{"_index":483,"title":{},"body":{"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["types/bcrypt",{"_index":588,"title":{},"body":{"dependencies.html":{}}}],["types/hapi__joi",{"_index":590,"title":{},"body":{"dependencies.html":{}}}],["types/passport",{"_index":592,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":637,"title":{},"body":{"index.html":{}}}],["undefined",{"_index":162,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["unique",{"_index":502,"title":{},"body":{"entities/User.html":{}}}],["uniqueviolation",{"_index":620,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["unit",{"_index":651,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":96,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtStrategy.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":696,"title":{},"body":{"properties.html":{}}}],["update",{"_index":373,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{}}}],["update(@param('id",{"_index":407,"title":{},"body":{"controllers/MovieController.html":{},"controllers/UsersController.html":{}}}],["update(id",{"_index":384,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{}}}],["updatedmovie",{"_index":443,"title":{},"body":{"injectables/MovieService.html":{}}}],["updatemoviedto",{"_index":385,"title":{"classes/UpdateMovieDto.html":{}},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{},"classes/UpdateMovieDto.html":{},"coverage.html":{}}}],["updateuserdto",{"_index":485,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["use",{"_index":454,"title":{},"body":{"classes/RegisterDto.html":{}}}],["usefactory",{"_index":183,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{}}}],["useguards",{"_index":110,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/MovieController.html":{}}}],["useguards(jwtauthenticationguard",{"_index":158,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/MovieController.html":{}}}],["useguards(jwtauthenticationguard)@get",{"_index":84,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(jwtauthenticationguard)@post('log",{"_index":98,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(localauthenticationguard",{"_index":142,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["user",{"_index":146,"title":{"entities/User.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/LocalStrategy.html":{},"interfaces/RequestWithUser.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user.currenthashedrefreshtoken.tostring",{"_index":556,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.dto",{"_index":487,"title":{},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":289,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:2",{"_index":290,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:3",{"_index":291,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:4",{"_index":292,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.id",{"_index":149,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["user.password",{"_index":161,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["userdata",{"_index":535,"title":{},"body":{"injectables/UsersService.html":{}}}],["userid",{"_index":214,"title":{},"body":{"injectables/AuthenticationService.html":{},"interfaces/TokenPayload.html":{},"injectables/UsersService.html":{}}}],["username",{"_index":301,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["usernamefield",{"_index":347,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["users",{"_index":506,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":521,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":509,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/entities/user.entity",{"_index":345,"title":{},"body":{"injectables/LocalStrategy.html":{},"interfaces/RequestWithUser.html":{}}}],["users/users.module",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{}}}],["users/users.service",{"_index":128,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtStrategy.html":{}}}],["userscontroller",{"_index":504,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":320,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["usersmodule",{"_index":10,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":532,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice",{"_index":127,"title":{"injectables/UsersService.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["validate",{"_index":318,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(email",{"_index":341,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":322,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validationschema",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":286,"title":{},"body":{"classes/CreateMovieDto.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{},"dependencies.html":{}}}],["value",{"_index":621,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["var",{"_index":129,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["variable",{"_index":565,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":697,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verifypassword",{"_index":202,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["verifypassword(plaintextpassword",{"_index":220,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["version",{"_index":694,"title":{},"body":{"properties.html":{}}}],["watch",{"_index":646,"title":{},"body":{"index.html":{}}}],["website",{"_index":678,"title":{},"body":{"index.html":{}}}],["went",{"_index":260,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["world",{"_index":70,"title":{},"body":{"injectables/AppService.html":{}}}],["wrong",{"_index":261,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["you'd",{"_index":667,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":11,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/MovieModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthenticationModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nMovieModule\n\nMovieModule\n\nAppModule -->\n\nMovieModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthenticationModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            MovieModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import * as Joi from '@hapi/joi';\nimport * as redisStore from 'cache-manager-redis-store'\nimport { CacheModule, Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { MovieModule } from './movie/movie.module';\nimport { DatabaseModule } from './database/database.module';\nimport { UsersModule } from './users/users.module';\nimport { AuthenticationModule } from './authentication/authentication.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      validationSchema: Joi.object({\n        REDIS_HOST: Joi.string().required(),\n        REDIS_PORT: Joi.number().required(),\n        POSTGRES_HOST: Joi.string().required(),\n        POSTGRES_PORT: Joi.number().required(),\n        POSTGRES_USER: Joi.string().required(),\n        POSTGRES_PASSWORD: Joi.string().required(),\n        POSTGRES_DB: Joi.string().required(),\n        PORT: Joi.number(),\n        JWT_SECRET: Joi.string().required(),\n        JWT_EXPIRATION_TIME: Joi.string().required(),\n      })\n    }),\n    DatabaseModule,\n    UsersModule,    \n    MovieModule, \n    AuthenticationModule\n  ],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthenticationController.html":{"url":"controllers/AuthenticationController.html","title":"controller - AuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/authentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                authentication\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                authenticate\n                            \n                            \n                                    Async\n                                logIn\n                            \n                            \n                                    Async\n                                logOut\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        authenticate\n                        \n                    \n                \n            \n            \n                \nauthenticate(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthenticationGuard)@Get()\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    logIn(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(200)@UseGuards(LocalAuthenticationGuard)@Post('log-in')@ApiBody({type: LogInDto})\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logOut\n                        \n                    \n                \n            \n            \n                \n                    \n                    logOut(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthenticationGuard)@Post('log-out')@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(registrationData: RegisterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    registrationData\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Req, Controller, HttpCode, Post, UseGuards, Response, Res, Get, CACHE_MANAGER, Inject } from '@nestjs/common';\nimport { AuthenticationService } from './authentication.service';\nimport RegisterDto from './dto/register.dto';\nimport RequestWithUser from './requestWithUser.interface';\nimport { LocalAuthenticationGuard } from './localAuthentication.guard';\nimport JwtAuthenticationGuard from './jwt-authentication.guard';\nimport { ApiBody } from '@nestjs/swagger';\nimport LogInDto from './dto/login.dto';\nimport { UsersService } from '../users/users.service';\nimport Cache from 'cache-manager-redis-store'\nvar cookies = require('cookie');\n\n\n\n@Controller('authentication')\nexport class AuthenticationController {\n /**\n  * @ignore\n  */\n  constructor(\n    private readonly authenticationService: AuthenticationService,\n    private readonly usersService: UsersService,\n    @Inject(CACHE_MANAGER) private cacheManager: Cache,\n  ) { }\n\n  @Post('register')\n  async register(@Body() registrationData: RegisterDto) {\n    return this.authenticationService.register(registrationData);\n  }\n\n  @HttpCode(200)\n  @UseGuards(LocalAuthenticationGuard)\n  @Post('log-in')\n  @ApiBody({ type: LogInDto })\n  async logIn(@Req() request: RequestWithUser) {\n    const { user } = request;\n    const accessTokenCookie = this.authenticationService.getCookieWithJwtAccessToken(\n      user.id,\n    );\n    const {\n      cookie: refreshTokenCookie,\n      token: refreshToken,\n    } = this.authenticationService.getCookieWithJwtRefreshToken(user.id);\n\n    await this.usersService.setCurrentRefreshToken(refreshToken, user.id);\n\n    request.res.setHeader('Set-Cookie', [\n      accessTokenCookie,\n      refreshTokenCookie,\n    ]);\n\n    return user;\n  }\n\n  @UseGuards(JwtAuthenticationGuard)\n  @Get()\n  authenticate(@Req() request: RequestWithUser) {\n    const user = request.user;\n    user.password = undefined;\n    return user;\n  }\n\n  @UseGuards(JwtAuthenticationGuard)\n  @Post('log-out')\n  @HttpCode(200)\n  async logOut(@Req() request: RequestWithUser) {\n    await this.usersService.removeRefreshToken(request.user.id);\n    request.res.setHeader(\n      'Set-Cookie',\n      this.authenticationService.getCookiesForLogOut(),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthenticationModule.html":{"url":"modules/AuthenticationModule.html","title":"module - AuthenticationModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthenticationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthenticationModule\n\n\n\ncluster_AuthenticationModule_imports\n\n\n\ncluster_AuthenticationModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\nAuthenticationModule -->\n\nUsersModule->AuthenticationModule\n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nAuthenticationModule -->\n\nAuthenticationService->AuthenticationModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthenticationModule -->\n\nJwtStrategy->AuthenticationModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthenticationModule -->\n\nLocalStrategy->AuthenticationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/authentication/authentication.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthenticationService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthenticationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { CacheModule, Module } from '@nestjs/common';\nimport { AuthenticationService } from './authentication.service';\nimport { UsersModule } from '../users/users.module';\nimport { AuthenticationController } from './authentication.controller';\nimport { PassportModule } from '@nestjs/passport';\nimport { LocalStrategy } from './local.strategy';\nimport { JwtModule } from '@nestjs/jwt';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { JwtStrategy } from './jwt.strategy';\nimport * as redisStore from 'cache-manager-redis-store'\n\n \n@Module({\n  imports: [\n    CacheModule.registerAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n        useFactory: (configService: ConfigService) => ({\n          store: redisStore,\n          host: configService.get('REDIS_HOST'),\n          port: configService.get('REDIS_PORT'),\n          ttl: 120\n        }),\n    }),\n    UsersModule,\n    PassportModule,\n    ConfigModule,\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: async (configService: ConfigService) => ({\n        secret: configService.get('JWT_SECRET'),\n        signOptions: {\n          expiresIn: `${configService.get('JWT_EXPIRATION_TIME')}s`,\n        },\n      }),\n    }),\n  ],\n  providers: [AuthenticationService, LocalStrategy, JwtStrategy],\n  controllers: [AuthenticationController]\n})\nexport class AuthenticationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthenticationService.html":{"url":"injectables/AuthenticationService.html","title":"injectable - AuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/authentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                getAuthenticatedUser\n                            \n                            \n                                    Public\n                                getCookiesForLogOut\n                            \n                            \n                                    Public\n                                getCookieWithJwtAccessToken\n                            \n                            \n                                    Public\n                                getCookieWithJwtRefreshToken\n                            \n                            \n                                    Public\n                                getCookieWithJwtToken\n                            \n                            \n                                    Public\n                                    Async\n                                register\n                            \n                            \n                                    Private\n                                    Async\n                                verifyPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/authentication.service.ts:42\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getAuthenticatedUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAuthenticatedUser(email: string, plainTextPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    plainTextPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCookiesForLogOut\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookiesForLogOut()\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCookieWithJwtAccessToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookieWithJwtAccessToken(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCookieWithJwtRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookieWithJwtRefreshToken(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { cookie: string; token: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCookieWithJwtToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookieWithJwtToken(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(registrationData: RegisterDto)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    registrationData\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        verifyPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyPassword(plainTextPassword: string, hashedPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    plainTextPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    hashedPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from \"@nestjs/common\";\nimport { UsersService } from \"../users/users.service\";\nimport RegisterDto from \"./dto/register.dto\";\nimport * as bcrypt from 'bcrypt';\nimport { ConfigService } from \"@nestjs/config\";\nimport { JwtService } from \"@nestjs/jwt\";\nimport { TokenPayload } from \"./tokenPayload.interface\";\nimport { PostgresErrorCode } from \"../database/postgresErrorCodes.enum\";\n\n@Injectable()\nexport class AuthenticationService {\n  public getCookieWithJwtAccessToken(\n    userId: number,\n  ) {\n    const payload: TokenPayload = { userId };\n    const token = this.jwtService.sign(payload, {\n      secret: this.configService.get('JWT_SECRET'),\n      expiresIn: `${this.configService.get(\n        'JWT_EXPIRATION_TIME',\n      )}s`,\n    });\n    return `Authentication=${token}; HttpOnly; Path=/; Max-Age=${this.configService.get(\n      'JWT_EXPIRATION_TIME',\n    )}`;\n  }\n\n  public getCookieWithJwtRefreshToken(userId: number) {\n    const payload: TokenPayload = { userId };\n    const token = this.jwtService.sign(payload, {\n      secret: this.configService.get('JWT_SECRET'),\n      expiresIn: `${this.configService.get(\n        'JWT_EXPIRATION_TIME',\n      )}s`,\n    });\n    const cookie = `Refresh=${token}; HttpOnly; Path=/; Max-Age=${this.configService.get(\n      'JWT_REFRESH_TOKEN_EXPIRATION_TIME',\n    )}`;\n    return {\n      cookie,\n      token,\n    };\n  }\n  constructor(\n    private readonly usersService: UsersService,\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService\n  ) { }\n\n  public async register(registrationData: RegisterDto) {\n    const hashedPassword = await bcrypt.hash(registrationData.password, 10);\n    try {\n      const createdUser = await this.usersService.create({\n        ...registrationData,\n        password: hashedPassword\n      });\n      createdUser.password = undefined;\n      return createdUser;\n    } catch (error) {\n      if (error?.code === PostgresErrorCode.UniqueViolation) {\n        throw new HttpException('User with that email already exists', HttpStatus.BAD_REQUEST);\n      }\n      throw new HttpException('Something went wrong', HttpStatus.INTERNAL_SERVER_ERROR);\n    }\n  }\n\n  public async getAuthenticatedUser(email: string, plainTextPassword: string) {\n    try {\n      const user = await this.usersService.getByEmail(email);\n      await this.verifyPassword(plainTextPassword, user.password);\n      user.password = undefined;\n      return user;\n    } catch (error) {\n      throw new HttpException('Wrong credentials provided', HttpStatus.BAD_REQUEST);\n    }\n  }\n\n  private async verifyPassword(plainTextPassword: string, hashedPassword: string) {\n    const isPasswordMatching = await bcrypt.compare(\n      plainTextPassword,\n      hashedPassword\n    );\n    if (!isPasswordMatching) {\n      throw new HttpException('Wrong credentials provided', HttpStatus.BAD_REQUEST);\n    }\n  }\n\n  public getCookieWithJwtToken(userId: number) {\n    const payload: TokenPayload = { userId };\n    const token = this.jwtService.sign(payload);\n    return `Authentication=${token}; HttpOnly; Path=/; Max-Age=${this.configService.get('JWT_EXPIRATION_TIME')}`;\n  }\n\n  public getCookiesForLogOut() {\n    return [\n      'Authentication=; HttpOnly; Path=/; Max-Age=0',\n      'Refresh=; HttpOnly; Path=/; Max-Age=0',\n    ];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateMovieDto.html":{"url":"classes/CreateMovieDto.html","title":"class - CreateMovieDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateMovieDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/movie/dto/create-movie.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                director\n                            \n                            \n                                gender\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        director\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/movie/dto/create-movie.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/movie/dto/create-movie.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/movie/dto/create-movie.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator'\n\nexport class CreateMovieDto {\n    @IsNotEmpty()\n    @IsString()\n    name: string;\n\n    @IsNotEmpty()\n    @IsString()\n    gender: string;\n\n    @IsNotEmpty()\n    @IsString()\n    director: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateUserDto {\n    email: string;\n    name: string;\n    password: string;\n}\n   \nexport default CreateUserDto;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n \n@Module({\n  imports: [\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        host: configService.get('POSTGRES_HOST'),\n        port: configService.get('POSTGRES_PORT'),\n        username: configService.get('POSTGRES_USER'),\n        password: configService.get('POSTGRES_PASSWORD'),\n        database: configService.get('POSTGRES_DB'),\n        entities: [\n          __dirname + '/../**/*.entity.ts',\n        ],\n        synchronize: true,\n        autoLoadEntities: true,\n      })\n    }),\n  ],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthenticationGuard.html":{"url":"injectables/JwtAuthenticationGuard.html","title":"injectable - JwtAuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/jwt-authentication.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n \n@Injectable()\nexport default class JwtAuthenticationGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/jwt.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: TokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/jwt.strategy.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                TokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Request } from 'express';\nimport { UsersService } from '../users/users.service';\nimport { TokenPayload } from './tokenPayload.interface';\n \n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly userService: UsersService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([(request: Request) => {\n        return request?.cookies?.Authentication;\n      }]),\n      secretOrKey: configService.get('JWT_SECRET')\n    });\n  }\n \n  async validate(payload: TokenPayload) {\n    return this.userService.getById(payload.userId);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthenticationGuard.html":{"url":"injectables/LocalAuthenticationGuard.html","title":"injectable - LocalAuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/localAuthentication.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n \n@Injectable()\nexport class LocalAuthenticationGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authenticationService: AuthenticationService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/local.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authenticationService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/local.strategy.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { AuthenticationService } from './authentication.service';\nimport User from '../users/entities/user.entity';\n \n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authenticationService: AuthenticationService) {\n    super({\n      usernameField: 'email'\n    });\n  }\n  async validate(email: string, password: string): Promise {\n    return this.authenticationService.getAuthenticatedUser(email, password);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LogInDto.html":{"url":"classes/LogInDto.html","title":"class - LogInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LogInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/dto/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/login.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(7)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/login.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsString, IsNotEmpty, MinLength } from 'class-validator';\n\nexport class LogInDto {\n  @IsEmail()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(7)\n  password: string;\n}\n\nexport default LogInDto;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Movie.html":{"url":"entities/Movie.html","title":"entity - Movie","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Movie\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/movie/entities/movie.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                director\n                            \n                            \n                                    Public\n                                gender\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        director\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/movie/entities/movie.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/movie/entities/movie.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/movie/entities/movie.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/movie/entities/movie.entity.ts:13\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n\n@Entity()\nclass Movie {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public name: string;\n\n  @Column()\n  public gender: string;\n\n  @Column()\n  public director: string;\n\n}\n\nexport default Movie;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MovieController.html":{"url":"controllers/MovieController.html","title":"controller - MovieController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MovieController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/movie/movie.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                movie\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createMovieDto: CreateMovieDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/movie/movie.controller.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createMovieDto\n                                    \n                                                CreateMovieDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/movie/movie.controller.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/movie/movie.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/movie/movie.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateMovieDto: UpdateMovieDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/movie/movie.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateMovieDto\n                                    \n                                                UpdateMovieDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete, UseGuards } from '@nestjs/common';\nimport { MovieService } from './movie.service';\nimport { CreateMovieDto } from './dto/create-movie.dto';\nimport { UpdateMovieDto } from './dto/update-movie.dto';\nimport JwtAuthenticationGuard from '../authentication/jwt-authentication.guard';\nimport Movie from './entities/movie.entity';\n\n@Controller('movie')\nexport class MovieController {\n  constructor(private readonly movieService: MovieService) {}\n\n  @Post()\n  @UseGuards(JwtAuthenticationGuard)\n  create(@Body() createMovieDto: CreateMovieDto) {\n    return this.movieService.createMovie(createMovieDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.movieService.getAllMovies();\n  }\n\n  /*\n  teste\n\n  */  \n  @Get(':id')\n  @UseGuards(JwtAuthenticationGuard)\n  findOne(@Param('id') id: string): Promise {\n    return this.movieService.getMovieById(+id);\n  }\n\n  @Patch(':id')\n  @UseGuards(JwtAuthenticationGuard)\n  update(@Param('id') id: string, @Body() updateMovieDto: UpdateMovieDto) {\n    return this.movieService.update(+id, updateMovieDto);\n  }\n\n  @Delete(':id')\n  @UseGuards(JwtAuthenticationGuard)\n  remove(@Param('id') id: string) {\n    return this.movieService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MovieModule.html":{"url":"modules/MovieModule.html","title":"module - MovieModule","body":"\n                   \n\n\n\n\n    Modules\n    MovieModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_MovieModule\n\n\n\ncluster_MovieModule_providers\n\n\n\n\nMovieService\n\nMovieService\n\n\n\nMovieModule\n\nMovieModule\n\nMovieModule -->\n\nMovieService->MovieModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/movie/movie.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MovieService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MovieController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MovieService } from './movie.service';\nimport { MovieController } from './movie.controller';\nimport Movie from './entities/movie.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Movie])],\n  controllers: [MovieController],\n  providers: [MovieService]\n})\nexport class MovieModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MovieService.html":{"url":"injectables/MovieService.html","title":"injectable - MovieService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MovieService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/movie/movie.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createMovie\n                            \n                            \n                                getAllMovies\n                            \n                            \n                                    Async\n                                getMovieById\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(movieRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/movie/movie.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        movieRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createMovie\n                        \n                    \n                \n            \n            \n                \n                    \n                    createMovie(movie: CreateMovieDto)\n                \n            \n\n\n            \n                \n                    Defined in src/movie/movie.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    movie\n                                    \n                                                CreateMovieDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllMovies\n                        \n                    \n                \n            \n            \n                \ngetAllMovies()\n                \n            \n\n\n            \n                \n                    Defined in src/movie/movie.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getMovieById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMovieById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/movie/movie.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/movie/movie.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, movie: UpdateMovieDto)\n                \n            \n\n\n            \n                \n                    Defined in src/movie/movie.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    movie\n                                    \n                                                UpdateMovieDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CreateMovieDto } from './dto/create-movie.dto';\nimport { UpdateMovieDto } from './dto/update-movie.dto';\nimport Movie from './entities/movie.entity';\n\n@Injectable()\nexport class MovieService {\n  constructor(\n    @InjectRepository(Movie)\n    private movieRepository: Repository\n  ) {}\n\n  async createMovie(movie: CreateMovieDto) {\n    const newMovie = await this.movieRepository.create(movie);\n    await this.movieRepository.save(newMovie)\n    return newMovie;\n  }\n\n  getAllMovies() {\n    return this.movieRepository.find();\n  }\n\n  async getMovieById(id: number) {\n    const movie = await this.movieRepository.findOneBy({id});\n    if (movie) {\n      return movie;\n    }\n    throw new HttpException('Movie not found', HttpStatus.NOT_FOUND);\n  }\n\n  async update(id: number, movie: UpdateMovieDto) {\n    await this.movieRepository.update(id, movie);\n    const updatedMovie = await this.movieRepository.findOneByOrFail({id});\n    if (updatedMovie) { return updatedMovie }\n  }\n\n  async remove(id: number) {\n    const deleteResponse = await this.movieRepository.delete(id);\n    if (!deleteResponse.affected) {\n    throw new HttpException('Movie not found', HttpStatus.NOT_FOUND);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/dto/register.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                fullName\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                phoneNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({deprecated: true, description: 'Use the name property instead'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(7)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Has to match a regular expression: /^\\+[1-9]\\d{1,14}$/', example: '+123123123123'})@IsString()@IsNotEmpty()@Matches(/^\\+[1-9]\\d{1,14}$/)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:36\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    IsEmail,\n    IsString,\n    IsNotEmpty,\n    MinLength,\n    Matches,\n  } from 'class-validator';\n  import { ApiProperty } from '@nestjs/swagger';\n  \n  export class RegisterDto {\n    @IsEmail()\n    email: string;\n  \n    @IsString()\n    @IsNotEmpty()\n    name: string;\n  \n    @ApiProperty({\n      deprecated: true,\n      description: 'Use the name property instead',\n    })\n    fullName: string;\n  \n    @IsString()\n    @IsNotEmpty()\n    @MinLength(7)\n    password: string;\n  \n    @ApiProperty({\n      description: 'Has to match a regular expression: /^\\\\+[1-9]\\\\d{1,14}$/',\n      example: '+123123123123',\n    })\n    @IsString()\n    @IsNotEmpty()\n    @Matches(/^\\+[1-9]\\d{1,14}$/)\n    phoneNumber: string;\n}\n  \nexport default RegisterDto;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithUser.html":{"url":"interfaces/RequestWithUser.html","title":"interface - RequestWithUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/requestWithUser.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         User\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         User\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Request } from 'express';\nimport User from '../users/entities/user.entity';\n \ninterface RequestWithUser extends Request {\n  user: User;\n}\n \nexport default RequestWithUser;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenPayload.html":{"url":"interfaces/TokenPayload.html","title":"interface - TokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/tokenPayload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            userId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface TokenPayload {\n    userId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateMovieDto.html":{"url":"classes/UpdateMovieDto.html","title":"class - UpdateMovieDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateMovieDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/movie/dto/update-movie.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateMovieDto } from './create-movie.dto';\n\nexport class UpdateMovieDto extends PartialType(CreateMovieDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                currentHashedRefreshToken\n                            \n                            \n                                    Public\n                                email\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                password\n                            \n                            \n                                    Public\n                                    Optional\n                                phoneNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        currentHashedRefreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:17\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { Exclude } from 'class-transformer';\n\n@Entity()\nclass User {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column({ unique: true })\n  public email: string;\n\n  @Column({ nullable: true })\n  public phoneNumber?: string;\n\n  @Column()\n  public name: string;\n\n  @Column({ nullable: true })\n  @Exclude()\n  public password?: string;\n\n  @Column({\n    nullable: true,\n  })\n  @Exclude()\n  public currentHashedRefreshToken?: string;\n\n}\n\nexport default User;\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\n\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Post()\n  create(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.create(createUserDto);\n  }\n\n  // @Get()\n  // findAll() {\n  //   return this.usersService.findAll();\n  // }\n\n  // @Get(':id')\n  // findOne(@Param('id') id: string) {\n  //   return this.usersService.findOne(+id);\n  // }\n\n  // @Patch(':id')\n  // update(@Param('id') id: string, @Body() updateUserDto: UpdateUserDto) {\n  //   return this.usersService.update(+id, updateUserDto);\n  // }\n\n  // @Delete(':id')\n  // remove(@Param('id') id: string) {\n  //   return this.usersService.remove(+id);\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport User from './entities/user.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService]\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                getByEmail\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                getUserIfRefreshTokenMatches\n                            \n                            \n                                    Async\n                                removeRefreshToken\n                            \n                            \n                                    Async\n                                setCurrentRefreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(userData: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userData\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserIfRefreshTokenMatches\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserIfRefreshTokenMatches(refreshToken: string, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeRefreshToken(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        setCurrentRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    setCurrentRefreshToken(refreshToken: string, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport User from './entities/user.entity';\nimport CreateUserDto from './dto/create-user.dto';\nimport * as bcrypt from 'bcrypt';\n \n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository\n  ) {}\n \n  async getById(id: number) {\n    const user = await this.usersRepository.findOneBy({ id });\n    if (user) {\n      return user;\n    }\n    throw new HttpException('User with this id does not exist', HttpStatus.NOT_FOUND);\n  }\n \n  async getByEmail(email: string) {\n    const user = await this.usersRepository.findOneBy({ email });\n    if (user) {\n      return user;\n    }\n    throw new HttpException('User with this email does not exist', HttpStatus.NOT_FOUND);\n  }\n \n  async create(userData: CreateUserDto) {\n    const newUser = await this.usersRepository.create(userData);\n    await this.usersRepository.save(newUser);\n    return newUser;\n  }\n\n  async setCurrentRefreshToken(refreshToken: string, userId: number) {\n    const currentHashedRefreshToken = await bcrypt.hash(refreshToken, 10);\n    await this.usersRepository.update(userId, {\n      currentHashedRefreshToken,\n    });\n  }\n\n  async getUserIfRefreshTokenMatches(refreshToken: string, userId: number) {\n    const user = await this.getById(userId);\n\n    const isRefreshTokenMatching = await bcrypt.compare(\n      refreshToken,\n      user.currentHashedRefreshToken.toString(),\n    );\n\n    if (isRefreshTokenMatching) {\n      return user;\n    }\n  }\n  async removeRefreshToken(userId: number) {\n    return this.usersRepository.update(userId, {\n      currentHashedRefreshToken: null,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/authentication/authentication.controller.ts\n            \n            controller\n            AuthenticationController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/authentication/authentication.controller.ts\n            \n            variable\n            cookies\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/authentication.service.ts\n            \n            injectable\n            AuthenticationService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/authentication/dto/login.dto.ts\n            \n            class\n            LogInDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/dto/register.dto.ts\n            \n            class\n            RegisterDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/authentication/jwt-authentication.guard.ts\n            \n            injectable\n            JwtAuthenticationGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/localAuthentication.guard.ts\n            \n            injectable\n            LocalAuthenticationGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/requestWithUser.interface.ts\n            \n            interface\n            RequestWithUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/authentication/tokenPayload.interface.ts\n            \n            interface\n            TokenPayload\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/movie/dto/create-movie.dto.ts\n            \n            class\n            CreateMovieDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/movie/dto/update-movie.dto.ts\n            \n            class\n            UpdateMovieDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/movie/entities/movie.entity.ts\n            \n            entity\n            Movie\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/movie/movie.controller.ts\n            \n            controller\n            MovieController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/movie/movie.service.ts\n            \n            injectable\n            MovieService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/8)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.19\n        \n            @hapi/joi : ^17.1.1\n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^9.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/swagger : ^6.1.1\n        \n            @nestjs/typeorm : ^9.0.1\n        \n            @types/bcrypt : ^5.0.0\n        \n            @types/hapi__joi : ^17.1.8\n        \n            @types/passport-jwt : ^3.0.6\n        \n            @types/passport-local : ^1.0.34\n        \n            bcrypt : ^5.0.1\n        \n            cache-manager : ^4.1.0\n        \n            cache-manager-redis-store : ^2.0.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            cookie : ^0.5.0\n        \n            cookie-parser : ^1.4.6\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            pg : ^8.8.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            typeorm : ^0.3.9\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PostgresErrorCode   (src/.../postgresErrorCodes.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/database/postgresErrorCodes.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostgresErrorCode\n                    \n                \n                        \n                            \n                                 UniqueViolation\n                            \n                        \n                        \n                            \n                                Value : 23505\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthenticationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MovieModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthenticationModule\n\n\n\ncluster_AuthenticationModule_providers\n\n\n\ncluster_MovieModule\n\n\n\ncluster_MovieModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthenticationModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nMovieModule\n\nMovieModule\n\nAppModule -->\n\nMovieModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthenticationModule -->\n\nUsersModule->AuthenticationModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nAuthenticationModule -->\n\nAuthenticationService->AuthenticationModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthenticationModule -->\n\nJwtStrategy->AuthenticationModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthenticationModule -->\n\nLocalStrategy->AuthenticationModule\n\n\n\n\n\nMovieService\n\nMovieService\n\nMovieModule -->\n\nMovieService->MovieModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    2 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    8 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    6 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            cookies   (src/.../authentication.controller.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/authentication/authentication.controller.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        cookies\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('cookie')\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
