var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.267,1,2.138]],["body/modules/AppModule.html",[0,1.602,1,4.101,2,1.331,3,2.039,4,2.46,5,2.46,6,3.358,7,0.029,8,3.358,9,3.358,10,3.059,11,2.442,12,1.733,13,1.579,14,0.248,15,0.248,16,0.215,17,2.931,18,2.442,19,0.647,20,2.931,21,2.46,22,2.46,23,2.15,24,2.15,25,1.918,26,2.15,27,2.46,28,0.614,29,1.918,30,1.331,31,2.931,32,2.931,33,2.46,34,2.931,35,2.931,36,2.931,37,2.931,38,2.931,39,5.837,40,2.931,41,4.131,42,2.931,43,2.931,44,2.931,45,2.931,46,2.931,47,2.15,48,2.931,49,2.931,50,2.46,51,1.331,52,1.918,53,0.248,54,0.066,55,0.018,56,0.018]],["title/controllers/AuthenticationController.html",[57,1.613,58,2.138]],["body/controllers/AuthenticationController.html",[7,0.029,13,1.037,14,0.163,15,0.163,16,0.142,19,0.601,28,0.403,51,0.875,53,0.163,54,0.044,55,0.013,56,0.013,57,0.95,58,1.976,59,1.616,60,1.412,61,1.616,62,0.341,63,1.266,64,3.02,65,2.457,66,3.02,67,3.02,68,1.785,69,2.534,70,1.926,71,3.805,72,2.081,73,1.926,74,1.215,75,1.926,76,1.92,77,1.311,78,0.938,79,1.776,80,3.54,81,1.92,82,1.926,83,1.926,84,1.926,85,2.437,86,1.926,87,2.215,88,1.926,89,1.926,90,1.926,91,1.926,92,1.926,93,1.926,94,1.926,95,1.616,96,2.493,97,3.02,98,1.926,99,2.534,100,1.037,101,1.412,102,1.926,103,1.926,104,1.926,105,1.412,106,1.412,107,1.926,108,1.839,109,1.412,110,1.616,111,1.926,112,1.138,113,1.926,114,1.138,115,3.02,116,1.616,117,3.02,118,1.138,119,1.926,120,1.444,121,1.26,122,1.26,123,1.926,124,1.926,125,1.926,126,1.926,127,0.95,128,1.626,129,1.626,130,1.926,131,1.768,132,1.926,133,1.926,134,1.926,135,1.926,136,2.708,137,4.218,138,1.926,139,3.02,140,3.093,141,3.02,142,3.02,143,1.616,144,3.02,145,1.926,146,1.768,147,1.926,148,3.02,149,1.26,150,1.412,151,1.926,152,1.976,153,1.926,154,1.926,155,2.534,156,1.926,157,1.616,158,1.616,159,1.926,160,1.926,161,1.926,162,1.926,163,1.926]],["title/modules/AuthenticationModule.html",[0,1.267,6,1.931]],["body/modules/AuthenticationModule.html",[0,1.586,2,1.314,3,2.02,6,3.697,7,0.03,10,3.046,11,2.419,12,1.71,13,1.558,14,0.245,15,0.245,16,0.213,18,2.807,19,0.655,28,0.606,29,3.107,30,1.314,33,2.428,51,1.859,52,2.677,53,0.245,54,0.066,55,0.018,56,0.018,58,3.107,65,1.314,108,2.792,109,2.121,164,2.428,165,2.892,166,2.428,167,3.344,168,3.344,169,2.892,170,2.892,171,4.092,172,1.314,173,2.892,174,2.892,175,2.121,176,2.781,177,2.892,178,2.892,179,2.121,180,2.121,181,2.428,182,2.428,183,2.892,184,2.428,185,2.892]],["title/injectables/AuthenticationService.html",[108,1.613,186,0.63]],["body/injectables/AuthenticationService.html",[7,0.03,14,0.119,15,0.119,16,0.103,19,0.507,28,0.294,30,0.638,50,1.962,53,0.119,54,0.032,55,0.01,56,0.01,61,1.178,62,0.249,63,0.98,65,2.202,68,0.83,69,1.962,74,1.238,76,1.868,77,1.275,78,0.86,79,1.728,81,1.868,95,1.962,96,2.071,99,1.962,100,1.259,108,1.154,110,1.178,120,1.629,121,0.918,127,1.154,128,2.264,129,1.618,131,1.762,136,3.035,140,2.203,146,1.259,149,2.547,152,2.547,157,1.962,158,1.962,175,1.029,176,2.4,181,1.962,184,1.962,186,0.451,187,0.544,188,1.178,189,4.199,190,2.338,191,3.504,192,2.338,193,2.338,194,2.338,195,3.004,196,1.404,197,4.457,198,1.404,199,2.338,200,2.142,201,4.203,202,1.404,203,1.154,204,1.404,205,2.338,206,2.393,207,1.404,208,3.082,209,2.338,210,1.404,211,2.338,212,1.404,213,1.404,214,1.404,215,4.203,216,1.404,217,2.855,218,1.029,219,1.715,220,1.887,221,1.029,222,1.178,223,1.404,224,2.203,225,3.004,226,2.338,227,2.338,228,2.338,229,3.892,230,3.892,231,3.892,232,3.004,233,1.404,234,1.404,235,1.404,236,1.178,237,2.338,238,2.338,239,1.404,240,0.693,241,1.404,242,2.338,243,2.338,244,1.404,245,1.404,246,2.57,247,2.293,248,1.404,249,1.178,250,3.004,251,1.404,252,1.404,253,3.004,254,1.404,255,1.404,256,1.404,257,2.338,258,2.338,259,2.338,260,1.178,261,2.338]],["title/classes/CreateMovieDto.html",[54,0.074,262,1.76]],["body/classes/CreateMovieDto.html",[7,0.029,14,0.314,15,0.314,16,0.272,19,0.402,53,0.314,54,0.11,55,0.021,56,0.021,62,0.657,72,2.451,74,1.431,77,1.544,78,1.041,200,2.362,262,2.609,263,1.829,264,4.803,265,2.718,266,1.878,267,3.958,268,3.958,269,5.397,270,3.706,271,3.706,272,3.706,273,4.197,274,4.197,275,2.425]],["title/classes/CreateUserDto.html",[54,0.074,276,1.76]],["body/classes/CreateUserDto.html",[7,0.028,14,0.342,15,0.342,16,0.296,53,0.433,54,0.091,55,0.023,56,0.023,62,0.714,74,1.489,77,1.607,78,1.084,200,2.415,203,2.773,240,2.773,263,1.99,266,1.983,276,3.025,277,4.958,278,2.957,279,4.032,280,4.032,281,4.032,282,1.831]],["title/modules/DatabaseModule.html",[0,1.267,8,1.931]],["body/modules/DatabaseModule.html",[0,1.899,2,1.712,7,0.029,8,2.896,14,0.319,15,0.319,16,0.277,18,2.896,19,0.59,28,0.79,29,3.205,30,1.712,47,2.765,53,0.319,54,0.085,55,0.022,56,0.022,78,0.727,176,3.103,179,2.765,180,2.765,240,1.861,283,3.77,284,2.765,285,2.03,286,3.77,287,3.77,288,3.164,289,3.77,290,3.77,291,3.77,292,3.77,293,3.77,294,3.164,295,3.77,296,2.467,297,3.77,298,3.77,299,3.77,300,2.896,301,3.77]],["title/injectables/JwtAuthenticationGuard.html",[114,1.931,186,0.63]],["body/injectables/JwtAuthenticationGuard.html",[7,0.029,14,0.382,15,0.382,16,0.332,19,0.595,28,0.945,53,0.382,54,0.102,55,0.024,56,0.024,114,3.243,172,2.05,186,1.058,187,1.75,282,2.05,302,3.31,303,3.788,304,3.31,305,1.892,306,3.788]],["title/injectables/JwtRefreshGuard.html",[122,2.138,186,0.63]],["body/injectables/JwtRefreshGuard.html",[7,0.028,14,0.379,15,0.379,16,0.328,19,0.591,28,0.936,53,0.379,54,0.101,55,0.024,56,0.024,68,2.641,122,3.567,149,2.923,172,2.029,186,1.052,187,1.732,282,2.029,302,3.276,304,3.276,305,1.872,306,3.749,307,3.749]],["title/injectables/JwtRefreshTokenStrategy.html",[186,0.63,308,2.396]],["body/injectables/JwtRefreshTokenStrategy.html",[7,0.029,14,0.234,15,0.234,16,0.203,19,0.623,28,0.579,30,1.255,53,0.234,54,0.063,55,0.017,56,0.017,62,0.49,63,1.661,65,2.103,68,2.99,74,1.05,76,1.661,77,1.134,78,0.764,79,1.536,80,3.754,81,1.159,100,1.489,120,1.961,121,1.808,127,1.955,128,2.134,129,2.134,131,1.661,136,1.634,149,1.808,150,2.905,172,1.255,176,3.001,186,0.764,187,1.072,220,2.724,221,2.027,224,3.396,300,1.634,305,1.159,308,2.905,309,3.886,310,2.32,311,2.905,312,2.32,313,3.886,314,2.764,315,3.962,316,2.764,317,2.32,318,2.905,319,1.808,320,2.905,321,2.905,322,1.634,323,2.027,324,2.32,325,2.32,326,2.764,327,2.32,328,2.764,329,2.764,330,2.764,331,2.764,332,2.764]],["title/injectables/JwtStrategy.html",[167,1.931,186,0.63]],["body/injectables/JwtStrategy.html",[7,0.03,14,0.255,15,0.255,16,0.221,19,0.638,28,0.631,30,1.368,53,0.255,54,0.068,55,0.019,56,0.019,62,0.534,63,1.765,65,2.205,74,1.117,76,1.765,77,1.205,78,0.812,79,1.633,80,3.176,81,1.263,100,1.623,120,2.038,121,1.971,127,2.078,128,2.268,129,2.268,131,1.765,167,2.489,172,1.368,176,3.086,182,2.528,186,0.812,187,1.168,220,2.831,221,2.209,224,2.209,305,1.263,311,3.088,312,2.528,313,4.074,317,2.528,318,2.209,319,1.971,320,2.209,321,2.209,322,1.781,323,2.209,324,2.528,325,2.528,327,2.528,333,2.528,334,3.013,335,4.211,336,3.013,337,2.528,338,3.013,339,3.013]],["title/injectables/LocalAuthenticationGuard.html",[112,1.931,186,0.63]],["body/injectables/LocalAuthenticationGuard.html",[7,0.029,14,0.386,15,0.386,16,0.335,19,0.599,28,0.955,53,0.386,54,0.103,55,0.024,56,0.024,112,3.263,172,2.071,186,1.065,187,1.768,304,3.345,305,1.912,340,3.827,341,4.561]],["title/injectables/LocalStrategy.html",[168,1.931,186,0.63]],["body/injectables/LocalStrategy.html",[7,0.029,14,0.281,15,0.281,16,0.243,19,0.621,28,0.694,53,0.281,54,0.075,55,0.02,56,0.02,62,0.587,63,1.884,65,2.317,74,1.192,76,1.884,77,1.286,78,0.867,79,1.742,81,1.388,87,3.296,108,2.911,109,2.428,127,1.634,131,1.388,146,1.388,168,2.657,172,1.504,186,0.867,187,1.284,200,2.287,203,2.218,240,2.7,305,1.388,311,3.296,318,2.428,319,2.166,321,2.428,323,2.428,337,2.779,342,2.779,343,3.311,344,3.311,345,4.494,346,3.311,347,2.779,348,2.779,349,2.428,350,3.311,351,3.311]],["title/classes/LogInDto.html",[54,0.074,85,2.138]],["body/classes/LogInDto.html",[7,0.029,14,0.332,15,0.332,16,0.288,19,0.426,53,0.426,54,0.114,55,0.022,56,0.022,62,0.695,72,2.283,74,1.333,78,0.97,85,3.629,200,2.267,203,2.737,240,2.737,263,1.936,266,1.949,273,3.686,274,3.686,275,2.567,282,1.782,352,3.292,353,4.654,354,3.923,355,3.292,356,3.923,357,3.292,358,3.292]],["title/entities/Movie.html",[359,1.931,360,1.76]],["body/entities/Movie.html",[7,0.029,14,0.289,15,0.289,16,0.251,19,0.371,53,0.289,54,0.077,55,0.02,56,0.02,62,0.605,72,2.517,74,1.469,77,1.483,78,1.069,189,4.716,200,2.308,206,2.265,266,1.779,267,3.801,268,3.801,282,1.551,296,2.234,359,2.713,360,2.471,361,2.866,362,3.064,363,5.104,364,3.415,365,3.415,366,4.349,367,3.415,368,3.415,369,1.839]],["title/controllers/MovieController.html",[57,1.613,370,2.138]],["body/controllers/MovieController.html",[7,0.029,14,0.186,15,0.186,16,0.161,19,0.578,28,0.459,51,0.996,53,0.186,54,0.05,55,0.015,56,0.015,57,1.082,60,1.608,62,0.388,63,1.399,72,2.209,74,1.289,76,1.894,77,1.391,78,0.988,79,1.752,81,2.038,87,2.448,101,2.448,105,3.314,106,1.608,114,1.296,116,1.84,118,1.296,129,1.181,131,2.038,155,4.081,200,2.18,206,1.082,249,2.802,262,2.759,294,2.802,300,1.973,349,1.608,360,1.798,362,3.391,370,2.184,371,1.84,372,1.798,373,4.519,374,3.338,375,2.802,376,2.802,377,2.193,378,2.193,379,2.193,380,2.193,381,2.193,382,2.193,383,2.193,384,3.338,385,2.184,386,2.193,387,2.193,388,1.84,389,2.193,390,2.193,391,1.84,392,3.245,393,2.193,394,2.193,395,2.193,396,2.193,397,1.84,398,2.177,399,1.84,400,1.435,401,2.448,402,1.84,403,2.193,404,1.608,405,4.519,406,3.793,407,3.338,408,2.193,409,2.193,410,2.193,411,1.84,412,2.193,413,2.193,414,2.193,415,2.193,416,2.193,417,2.193,418,2.193,419,2.193,420,2.193,421,2.193,422,2.193]],["title/modules/MovieModule.html",[0,1.267,9,1.931]],["body/modules/MovieModule.html",[0,1.733,2,1.492,3,2.207,7,0.029,9,3.479,11,2.643,12,1.942,13,1.77,14,0.278,15,0.278,16,0.242,18,2.643,19,0.653,22,3.752,23,2.41,24,2.41,25,2.15,26,3.279,27,2.758,28,0.688,29,2.925,30,1.492,47,2.41,51,2.031,52,2.925,53,0.278,54,0.074,55,0.02,56,0.02,176,2.937,179,2.41,180,2.41,284,2.41,285,1.77,288,2.758,360,1.77,370,3.325,398,3.17,399,2.758,404,2.41,423,2.758,424,2.758,425,3.286,426,3.286,427,3.286,428,3.286,429,3.286,430,3.286,431,3.286,432,3.286]],["title/injectables/MovieService.html",[186,0.63,398,1.76]],["body/injectables/MovieService.html",[7,0.029,14,0.179,15,0.179,16,0.156,19,0.548,28,0.444,53,0.179,54,0.048,55,0.014,56,0.014,62,0.375,63,1.363,65,2.665,74,1.34,76,2.007,77,1.446,78,0.924,79,1.856,81,2.007,100,2.131,127,1.605,128,1.141,131,1.86,136,2.624,152,3.307,186,0.627,187,0.821,206,2.748,217,1.553,218,1.553,246,2.384,247,2.127,262,2.39,267,1.553,268,1.553,285,1.141,360,3.061,362,2.83,369,1.141,372,1.141,375,2.728,376,3.321,388,2.728,391,2.728,392,2.624,397,1.777,398,2.131,400,1.386,401,2.384,402,1.777,404,1.553,433,2.118,434,1.777,435,3.251,436,4.438,437,3.251,438,2.118,439,3.511,440,2.118,441,3.251,442,3.251,443,2.118,444,2.118,445,3.251,446,2.118,447,2.118,448,2.118,449,2.118,450,2.118,451,2.118,452,2.118,453,1.777,454,2.118,455,3.251,456,2.118,457,2.118,458,2.118,459,2.118,460,3.251,461,3.251,462,2.728,463,2.118,464,3.957,465,2.118,466,2.118,467,2.118,468,2.118]],["title/classes/RegisterDto.html",[54,0.074,96,1.931]],["body/classes/RegisterDto.html",[7,0.029,14,0.244,15,0.244,16,0.211,19,0.442,53,0.345,54,0.092,55,0.018,56,0.018,62,0.509,72,2.468,74,1.441,77,1.555,78,1.048,96,2.797,118,1.699,200,2.371,203,2.335,240,2.335,263,1.418,266,1.579,273,3.775,274,3.775,275,1.88,282,1.305,300,2.408,353,3.971,355,2.411,357,2.411,358,2.411,385,3.096,469,2.411,470,4.731,471,3.971,472,2.873,473,2.873,474,4.073,475,4.073,476,4.073,477,2.873,478,2.873,479,2.873,480,2.873,481,2.873,482,4.073,483,4.073,484,4.073,485,4.073,486,4.731,487,4.073,488,2.873,489,2.873,490,2.873,491,4.731,492,2.873,493,2.873,494,2.873,495,2.873]],["title/interfaces/RequestWithUser.html",[71,2.138,496,1.931]],["body/interfaces/RequestWithUser.html",[7,0.028,14,0.36,15,0.36,16,0.312,19,0.574,53,0.36,55,0.023,56,0.023,62,0.753,71,3.765,78,0.82,80,3.765,146,2.712,266,2.049,282,1.93,305,2.216,322,2.512,348,3.566,496,2.512,497,3.116,498,3.566]],["title/interfaces/TokenPayload.html",[220,1.76,496,1.931]],["body/interfaces/TokenPayload.html",[7,0.028,14,0.386,15,0.386,16,0.335,53,0.386,55,0.024,56,0.024,62,0.808,78,0.88,206,2.93,208,4.525,220,2.973,266,2.14,496,2.696,497,3.345,499,3.827]],["title/classes/UpdateMovieDto.html",[54,0.074,392,1.931]],["body/classes/UpdateMovieDto.html",[7,0.029,14,0.382,15,0.382,16,0.332,19,0.595,53,0.382,54,0.102,55,0.024,56,0.024,262,2.431,263,2.228,265,3.31,305,1.892,372,2.431,392,3.243,401,3.31,500,3.788,501,3.788,502,3.31,503,3.31,504,4.513]],["title/classes/UpdateUserDto.html",[54,0.074,505,2.396]],["body/classes/UpdateUserDto.html",[7,0.029,14,0.382,15,0.382,16,0.332,19,0.595,53,0.382,54,0.102,55,0.024,56,0.024,263,2.228,276,2.431,278,3.31,305,1.892,372,2.431,501,3.788,502,3.31,503,3.31,505,4.023,506,3.788,507,3.31,508,4.513]],["title/entities/User.html",[146,1.37,359,1.931]],["body/entities/User.html",[7,0.029,14,0.233,15,0.233,16,0.202,19,0.428,53,0.233,54,0.089,55,0.017,56,0.017,62,0.487,72,2.525,74,1.474,77,1.32,78,1.073,79,2.155,146,1.653,189,4.722,200,2.348,203,2.277,206,1.946,240,2.277,266,1.529,282,1.247,296,1.797,300,3.287,359,2.331,362,2.728,363,4.806,366,3.872,369,1.479,471,3.872,509,2.305,510,3.872,511,4.614,512,3.944,513,2.746,514,2.746,515,2.746,516,2.746,517,2.746,518,2.746,519,2.746,520,4.614,521,2.305,522,2.746,523,4.614]],["title/controllers/UsersController.html",[57,1.613,524,2.138]],["body/controllers/UsersController.html",[7,0.029,14,0.296,15,0.296,16,0.257,19,0.632,28,0.733,51,1.588,53,0.296,54,0.079,55,0.021,56,0.021,57,1.726,60,2.565,62,0.62,63,1.954,72,1.588,74,0.927,76,1.466,77,1.001,78,0.675,79,1.356,81,1.466,101,2.565,105,3.419,106,2.565,112,2.067,118,2.067,120,2.033,129,1.884,131,1.466,143,2.935,276,3.228,349,2.565,372,2.511,400,2.288,406,3.913,411,2.935,507,2.565,524,3.051,525,2.935,526,3.497,527,3.497,528,3.497,529,3.497,530,2.935,531,4.662,532,3.497,533,3.497,534,3.497]],["title/modules/UsersModule.html",[0,1.267,10,1.76]],["body/modules/UsersModule.html",[0,1.852,2,1.648,3,2.358,7,0.029,10,3.325,11,2.824,12,2.145,13,1.954,14,0.307,15,0.307,16,0.267,18,2.145,19,0.64,28,0.76,51,2.17,52,3.126,53,0.307,54,0.082,55,0.021,56,0.021,120,2.516,146,1.521,284,2.661,285,1.954,524,3.495,530,3.045,535,3.045,536,3.045,537,3.045,538,3.628,539,4.777,540,3.628,541,3.045,542,3.628]],["title/injectables/UsersService.html",[120,1.267,186,0.63]],["body/injectables/UsersService.html",[7,0.029,14,0.159,15,0.159,16,0.138,19,0.522,28,0.394,53,0.159,54,0.043,55,0.013,56,0.013,62,0.333,63,1.242,65,2.759,74,1.335,76,2.111,77,1.441,78,0.971,79,1.952,81,2.017,100,2.439,120,1.149,127,1.462,128,1.012,131,1.898,136,2.844,146,2.35,150,2.69,152,3.414,186,0.572,187,0.729,200,2.082,203,1.81,206,2.813,208,3.693,217,2.69,218,1.379,219,2.173,236,1.578,246,2.173,247,1.939,260,1.578,276,2.242,285,1.012,362,2.168,369,1.012,372,1.596,400,1.23,439,3.052,453,1.578,462,2.487,507,1.379,510,3.078,541,1.578,543,1.578,544,2.963,545,2.963,546,2.963,547,2.963,548,2.963,549,1.88,550,1.88,551,2.963,552,2.963,553,1.88,554,1.88,555,2.963,556,1.88,557,2.963,558,1.88,559,2.963,560,1.88,561,2.963,562,1.88,563,2.963,564,1.88,565,1.88,566,2.963,567,2.963,568,2.963,569,1.88,570,1.88,571,1.88,572,2.963,573,1.88,574,2.963,575,1.88,576,1.88]],["title/coverage.html",[577,3.266]],["body/coverage.html",[7,0.029,16,0.198,54,0.125,55,0.017,56,0.017,57,2.254,58,1.764,59,2.262,68,1.593,71,1.764,78,0.52,85,1.764,96,1.593,108,1.33,112,1.593,114,1.593,120,1.045,122,1.764,146,1.13,167,1.593,168,1.593,186,1.146,188,2.262,220,1.452,247,1.764,262,1.452,264,2.262,265,2.853,276,1.452,277,2.262,278,2.853,302,2.853,303,2.262,307,2.262,308,1.977,309,2.262,310,2.262,333,2.262,340,2.262,342,2.262,352,2.262,359,2.3,360,1.452,361,2.262,370,1.764,371,2.262,392,1.593,398,1.452,434,2.262,469,2.262,496,2.3,498,2.262,499,2.262,500,2.262,505,1.977,506,2.262,509,2.262,524,1.764,525,2.262,543,2.262,577,1.977,578,2.695,579,2.695,580,2.695,581,6.539,582,4.566,583,2.695,584,4.999,585,5.83,586,4.566,587,2.262,588,2.695,589,2.262,590,3.891,591,2.695,592,2.695,593,2.695,594,2.695]],["title/dependencies.html",[3,1.939,595,2.292]],["body/dependencies.html",[3,1.574,7,0.03,21,2.677,23,3.213,24,3.213,25,2.087,26,2.339,28,0.668,30,1.449,54,0.099,55,0.019,56,0.019,118,1.885,140,3.213,172,1.449,175,2.339,219,2.339,275,2.087,285,1.718,319,3.274,320,3.213,322,1.885,347,3.676,369,1.718,502,2.339,503,2.339,521,2.677,596,3.189,597,3.189,598,3.189,599,5.646,600,3.189,601,3.189,602,3.189,603,3.189,604,3.189,605,3.189,606,3.189,607,3.189,608,3.189,609,4.381,610,3.189,611,3.189,612,3.189,613,3.189,614,3.189,615,3.189,616,3.189,617,3.189,618,3.189,619,3.189,620,3.189,621,3.189,622,3.189,623,3.189,624,3.189,625,3.189,626,3.189,627,3.189,628,3.189,629,3.189,630,3.189,631,3.189,632,3.189]],["title/miscellaneous/enumerations.html",[633,1.787,634,3.297]],["body/miscellaneous/enumerations.html",[7,0.027,55,0.025,56,0.025,62,0.862,222,4.816,633,3.184,634,4.084,635,4.867,636,4.867,637,4.867,638,4.867,639,4.867]],["title/miscellaneous/functions.html",[633,1.787,640,3.297]],["body/miscellaneous/functions.html",[7,0.026,55,0.026,56,0.026,62,0.877,587,4.154,589,5.159,633,3.239,640,4.154,641,4.95]],["title/index.html",[62,0.484,642,2.731,643,2.731]],["body/index.html",[7,0.029,25,1.938,55,0.018,56,0.018,322,1.751,369,1.595,385,1.938,439,2.172,577,2.172,644,2.961,645,2.961,646,2.961,647,4.161,648,2.961,649,4.161,650,2.961,651,2.961,652,4.161,653,2.961,654,2.961,655,2.961,656,2.961,657,2.961,658,2.961,659,2.961,660,2.485,661,2.961,662,2.961,663,2.961,664,2.961,665,2.961,666,2.485,667,2.961,668,2.961,669,2.485,670,2.961,671,2.961,672,2.961,673,2.961,674,2.961,675,2.961,676,5.975,677,5.496,678,2.961,679,2.961,680,2.961,681,2.961,682,2.961,683,2.961,684,2.961,685,2.961,686,2.961,687,2.961,688,2.961,689,2.961,690,4.161,691,2.961,692,2.961,693,2.961,694,2.961,695,2.961,696,2.961,697,2.961,698,2.961,699,5.854,700,2.961,701,2.961,702,2.961,703,5.699,704,2.961,705,2.961,706,4.161,707,2.961,708,2.961,709,2.961,710,2.961,711,4.161,712,4.161,713,2.961,714,2.961,715,2.961]],["title/modules.html",[2,2.023]],["body/modules.html",[1,2.953,2,2.05,6,2.668,7,0.024,8,2.668,9,2.668,10,2.431,55,0.024,56,0.024,716,6.148,717,6.148,718,6.148,719,6.3,720,4.513,721,4.513]],["title/overview.html",[722,3.738]],["body/overview.html",[1,4.12,2,1.509,3,2.224,4,2.789,5,2.789,6,3.756,7,0.028,8,3.022,9,3.386,10,3.253,11,2.663,12,1.965,13,1.79,51,1.509,55,0.02,56,0.02,108,2.523,120,2.342,164,2.789,166,2.789,167,3.022,168,3.022,187,1.289,263,1.64,296,2.175,398,2.753,423,2.789,424,2.789,497,2.437,535,2.789,536,2.789,537,2.789,722,2.789,723,3.323,724,3.323,725,4.505,726,3.323,727,3.323]],["title/properties.html",[266,1.523,595,2.292]],["body/properties.html",[7,0.028,55,0.025,56,0.025,266,1.806,385,3.048,660,3.909,666,3.909,669,3.909,728,4.658,729,4.658,730,4.658,731,4.658,732,4.658,733,4.658,734,4.658,735,4.658,736,4.658,737,4.658]]],"invertedIndex":[["",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":581,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":729,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":627,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":616,"title":{},"body":{"dependencies.html":{}}}],["0.3.9",{"_index":632,"title":{},"body":{"dependencies.html":{}}}],["0.5.0",{"_index":617,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":615,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":620,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":585,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":586,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":584,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":590,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":582,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":591,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":592,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":583,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":485,"title":{},"body":{"classes/RegisterDto.html":{}}}],["1.0.0",{"_index":622,"title":{},"body":{"dependencies.html":{}}}],["1.0.34",{"_index":611,"title":{},"body":{"dependencies.html":{}}}],["1.1.19",{"_index":597,"title":{},"body":{"dependencies.html":{}}}],["1.4.6",{"_index":619,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":236,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{}}}],["120",{"_index":431,"title":{},"body":{"modules/MovieModule.html":{}}}],["123123123123",{"_index":494,"title":{},"body":{"classes/RegisterDto.html":{}}}],["123123123123'})@isstring()@isnotempty()@matches(/^\\+[1",{"_index":488,"title":{},"body":{"classes/RegisterDto.html":{}}}],["17.1.1",{"_index":598,"title":{},"body":{"dependencies.html":{}}}],["17.1.8",{"_index":608,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":725,"title":{},"body":{"overview.html":{}}}],["2.0.0",{"_index":614,"title":{},"body":{"dependencies.html":{}}}],["2.2.0",{"_index":600,"title":{},"body":{"dependencies.html":{}}}],["23505",{"_index":639,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["3",{"_index":724,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":629,"title":{},"body":{"dependencies.html":{}}}],["3.0.6",{"_index":610,"title":{},"body":{"dependencies.html":{}}}],["4.0.0",{"_index":621,"title":{},"body":{"dependencies.html":{}}}],["4.1.0",{"_index":613,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":723,"title":{},"body":{"overview.html":{}}}],["5.0.0",{"_index":606,"title":{},"body":{"dependencies.html":{}}}],["5.0.1",{"_index":612,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":727,"title":{},"body":{"overview.html":{}}}],["6.1.1",{"_index":603,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":631,"title":{},"body":{"dependencies.html":{}}}],["8.8.0",{"_index":624,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":726,"title":{},"body":{"overview.html":{}}}],["9.0.0",{"_index":599,"title":{},"body":{"dependencies.html":{}}}],["9.0.1",{"_index":604,"title":{},"body":{"dependencies.html":{}}}],["9]\\\\d{1,14",{"_index":493,"title":{},"body":{"classes/RegisterDto.html":{}}}],["9]\\d{1,14",{"_index":486,"title":{},"body":{"classes/RegisterDto.html":{}}}],["__dirname",{"_index":297,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["accesstokencookie",{"_index":137,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["age=${this.configservice.get",{"_index":232,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["age=0",{"_index":261,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["already",{"_index":248,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["api",{"_index":660,"title":{},"body":{"index.html":{},"properties.html":{}}}],["apibody",{"_index":117,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["apiconflictresponse",{"_index":531,"title":{},"body":{"controllers/UsersController.html":{}}}],["apinotfoundresponse",{"_index":405,"title":{},"body":{"controllers/MovieController.html":{}}}],["apiokresponse",{"_index":406,"title":{},"body":{"controllers/MovieController.html":{},"controllers/UsersController.html":{}}}],["apiparam",{"_index":407,"title":{},"body":{"controllers/MovieController.html":{}}}],["apiproperty",{"_index":491,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apiproperty({deprecated",{"_index":473,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apiproperty({description",{"_index":481,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apitags",{"_index":408,"title":{},"body":{"controllers/MovieController.html":{}}}],["apitags('movies",{"_index":410,"title":{},"body":{"controllers/MovieController.html":{}}}],["app",{"_index":701,"title":{},"body":{"index.html":{}}}],["application",{"_index":694,"title":{},"body":{"index.html":{}}}],["applicationlocal",{"_index":697,"title":{},"body":{"index.html":{}}}],["applications",{"_index":658,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["async",{"_index":65,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{}}}],["authenticate",{"_index":64,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["authenticate(@req",{"_index":156,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["authenticate(request",{"_index":70,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["authentication",{"_index":61,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["authentication.controller",{"_index":170,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["authentication.guard",{"_index":116,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/MovieController.html":{}}}],["authentication.guard.ts",{"_index":303,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"coverage.html":{}}}],["authentication.service",{"_index":109,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/LocalStrategy.html":{}}}],["authentication/authentication.module",{"_index":34,"title":{},"body":{"modules/AppModule.html":{}}}],["authentication/guards/jwt",{"_index":403,"title":{},"body":{"controllers/MovieController.html":{}}}],["authentication/guards/localauthentication.guard",{"_index":532,"title":{},"body":{"controllers/UsersController.html":{}}}],["authentication=${token",{"_index":228,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["authenticationcontroller",{"_index":58,"title":{"controllers/AuthenticationController.html":{}},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"coverage.html":{}}}],["authenticationmodule",{"_index":6,"title":{"modules/AuthenticationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules.html":{},"overview.html":{}}}],["authenticationservice",{"_index":108,"title":{"injectables/AuthenticationService.html":{}},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["authguard",{"_index":304,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/LocalAuthenticationGuard.html":{}}}],["authguard('jwt",{"_index":306,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{}}}],["authguard('local",{"_index":341,"title":{},"body":{"injectables/LocalAuthenticationGuard.html":{}}}],["author",{"_index":734,"title":{},"body":{"properties.html":{}}}],["autoloadentities",{"_index":301,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["available",{"_index":721,"title":{},"body":{"modules.html":{}}}],["await",{"_index":152,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{}}}],["azure",{"_index":678,"title":{},"body":{"index.html":{}}}],["backend",{"_index":666,"title":{},"body":{"index.html":{},"properties.html":{}}}],["bcrypt",{"_index":219,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcrypt.compare",{"_index":260,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{}}}],["bcrypt.hash(refreshtoken",{"_index":571,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt.hash(registrationdata.password",{"_index":235,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["body",{"_index":101,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/MovieController.html":{},"controllers/UsersController.html":{}}}],["bootstrap",{"_index":589,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":719,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":716,"title":{},"body":{"modules.html":{}}}],["build",{"_index":690,"title":{},"body":{"index.html":{}}}],["building",{"_index":653,"title":{},"body":{"index.html":{}}}],["cache",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/MovieModule.html":{},"dependencies.html":{}}}],["cachemodule",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"modules/MovieModule.html":{}}}],["cachemodule.registerasync",{"_index":427,"title":{},"body":{"modules/MovieModule.html":{}}}],["catch",{"_index":242,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["checck",{"_index":659,"title":{},"body":{"index.html":{}}}],["check",{"_index":646,"title":{},"body":{"index.html":{}}}],["class",{"_index":54,"title":{"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":263,"title":{},"body":{"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"overview.html":{}}}],["classserializerinterceptor",{"_index":103,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["cluster_appmodule",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule",{"_index":164,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule_imports",{"_index":165,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["cluster_authenticationmodule_providers",{"_index":166,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_moviemodule",{"_index":423,"title":{},"body":{"modules/MovieModule.html":{},"overview.html":{}}}],["cluster_moviemodule_providers",{"_index":424,"title":{},"body":{"modules/MovieModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":535,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":537,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":536,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["column",{"_index":363,"title":{},"body":{"entities/Movie.html":{},"entities/User.html":{}}}],["column({nullable",{"_index":511,"title":{},"body":{"entities/User.html":{}}}],["column({unique",{"_index":514,"title":{},"body":{"entities/User.html":{}}}],["compodoc/compodoc",{"_index":596,"title":{},"body":{"dependencies.html":{}}}],["compose",{"_index":677,"title":{},"body":{"index.html":{}}}],["configmodule",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{},"modules/MovieModule.html":{}}}],["configmodule.forroot",{"_index":35,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":176,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/DatabaseModule.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"modules/MovieModule.html":{}}}],["configservice.get('jwt_expiration_time')}s",{"_index":185,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["configservice.get('jwt_refresh_token_secret",{"_index":328,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["configservice.get('jwt_secret",{"_index":182,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('postgres_db",{"_index":295,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('postgres_host",{"_index":289,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('postgres_password",{"_index":293,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('postgres_port",{"_index":290,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('postgres_user",{"_index":292,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('redis_host",{"_index":428,"title":{},"body":{"modules/MovieModule.html":{}}}],["configservice.get('redis_port",{"_index":429,"title":{},"body":{"modules/MovieModule.html":{}}}],["const",{"_index":136,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":127,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{}}}],["constructor(authenticationservice",{"_index":343,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(configservice",{"_index":312,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["constructor(movierepository",{"_index":438,"title":{},"body":{"injectables/MovieService.html":{}}}],["constructor(private",{"_index":349,"title":{},"body":{"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"controllers/UsersController.html":{}}}],["constructor(usersrepository",{"_index":549,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":196,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["container",{"_index":691,"title":{},"body":{"index.html":{}}}],["contains",{"_index":452,"title":{},"body":{"injectables/MovieService.html":{}}}],["controller",{"_index":57,"title":{"controllers/AuthenticationController.html":{},"controllers/MovieController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AuthenticationController.html":{},"controllers/MovieController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('authentication",{"_index":124,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["controller('movie",{"_index":409,"title":{},"body":{"controllers/MovieController.html":{}}}],["controller('users",{"_index":533,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["cookie",{"_index":140,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"dependencies.html":{}}}],["coverage",{"_index":577,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":372,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":411,"title":{},"body":{"controllers/MovieController.html":{},"controllers/UsersController.html":{}}}],["create(createmoviedto",{"_index":377,"title":{},"body":{"controllers/MovieController.html":{}}}],["create(createuserdto",{"_index":527,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(userdata",{"_index":552,"title":{},"body":{"injectables/UsersService.html":{}}}],["created",{"_index":664,"title":{},"body":{"index.html":{}}}],["createduser",{"_index":238,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["createduser.password",{"_index":241,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["createmovie",{"_index":435,"title":{},"body":{"injectables/MovieService.html":{}}}],["createmovie(movie",{"_index":442,"title":{},"body":{"injectables/MovieService.html":{}}}],["createmoviedto",{"_index":262,"title":{"classes/CreateMovieDto.html":{}},"body":{"classes/CreateMovieDto.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"classes/UpdateMovieDto.html":{},"coverage.html":{}}}],["createuserdto",{"_index":276,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["credentials",{"_index":257,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["currenthashedrefreshtoken",{"_index":510,"title":{},"body":{"entities/User.html":{},"injectables/UsersService.html":{}}}],["database",{"_index":294,"title":{},"body":{"modules/DatabaseModule.html":{},"controllers/MovieController.html":{}}}],["database/database.module",{"_index":32,"title":{},"body":{"modules/AppModule.html":{}}}],["database/postgreserrorcodes.enum",{"_index":223,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["databasemodule",{"_index":8,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["decorators",{"_index":72,"title":{},"body":{"controllers/AuthenticationController.html":{},"classes/CreateMovieDto.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":282,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"entities/User.html":{}}}],["defined",{"_index":74,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":397,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{}}}],["delete(':id",{"_index":420,"title":{},"body":{"controllers/MovieController.html":{}}}],["delete(':id')@apiokresponse()@apinotfoundresponse()@useguards(jwtauthenticationguard",{"_index":389,"title":{},"body":{"controllers/MovieController.html":{}}}],["deleteresponse",{"_index":466,"title":{},"body":{"injectables/MovieService.html":{}}}],["deleteresponse.affected",{"_index":468,"title":{},"body":{"injectables/MovieService.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/MovieModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploydocker",{"_index":679,"title":{},"body":{"index.html":{}}}],["deprecated",{"_index":492,"title":{},"body":{"classes/RegisterDto.html":{}}}],["description",{"_index":385,"title":{},"body":{"controllers/MovieController.html":{},"classes/RegisterDto.html":{},"index.html":{},"properties.html":{}}}],["details",{"_index":661,"title":{},"body":{"index.html":{}}}],["developer",{"_index":669,"title":{},"body":{"index.html":{},"properties.html":{}}}],["development",{"_index":702,"title":{},"body":{"index.html":{}}}],["director",{"_index":267,"title":{},"body":{"classes/CreateMovieDto.html":{},"entities/Movie.html":{},"injectables/MovieService.html":{}}}],["docker",{"_index":676,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":578,"title":{},"body":{"coverage.html":{}}}],["down",{"_index":695,"title":{},"body":{"index.html":{}}}],["dto/create",{"_index":400,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/login.dto",{"_index":119,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["dto/register.dto",{"_index":110,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["dto/update",{"_index":402,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{}}}],["e2e",{"_index":713,"title":{},"body":{"index.html":{}}}],["easier",{"_index":689,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":654,"title":{},"body":{"index.html":{}}}],["email",{"_index":203,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["entities",{"_index":296,"title":{},"body":{"modules/DatabaseModule.html":{},"entities/Movie.html":{},"entities/User.html":{},"overview.html":{}}}],["entities/movie.entity",{"_index":404,"title":{},"body":{"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{}}}],["entities/user.entity",{"_index":541,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entity",{"_index":359,"title":{"entities/Movie.html":{},"entities/User.html":{}},"body":{"entities/Movie.html":{},"entities/User.html":{},"coverage.html":{}}}],["entity.ts",{"_index":298,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["enumerations",{"_index":634,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":243,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["error?.code",{"_index":244,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["estructure",{"_index":648,"title":{},"body":{"index.html":{}}}],["example",{"_index":487,"title":{},"body":{"classes/RegisterDto.html":{}}}],["exclude",{"_index":520,"title":{},"body":{"entities/User.html":{}}}],["exist",{"_index":567,"title":{},"body":{"injectables/UsersService.html":{}}}],["exists",{"_index":249,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/MovieController.html":{}}}],["expiresin",{"_index":184,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{}}}],["export",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":539,"title":{},"body":{"modules/UsersModule.html":{}}}],["expose",{"_index":693,"title":{},"body":{"index.html":{}}}],["express",{"_index":322,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{},"dependencies.html":{},"index.html":{}}}],["expression",{"_index":484,"title":{},"body":{"classes/RegisterDto.html":{}}}],["extends",{"_index":305,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{}}}],["extractjwt",{"_index":317,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["extractjwt.fromextractors",{"_index":325,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["file",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["findall",{"_index":373,"title":{},"body":{"controllers/MovieController.html":{}}}],["findone",{"_index":374,"title":{},"body":{"controllers/MovieController.html":{}}}],["findone(@param('id",{"_index":415,"title":{},"body":{"controllers/MovieController.html":{}}}],["findone(id",{"_index":382,"title":{},"body":{"controllers/MovieController.html":{}}}],["follow",{"_index":682,"title":{},"body":{"index.html":{}}}],["found",{"_index":461,"title":{},"body":{"injectables/MovieService.html":{}}}],["framework",{"_index":652,"title":{},"body":{"index.html":{}}}],["fullname",{"_index":470,"title":{},"body":{"classes/RegisterDto.html":{}}}],["function",{"_index":588,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":640,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["gender",{"_index":268,"title":{},"body":{"classes/CreateMovieDto.html":{},"entities/Movie.html":{},"injectables/MovieService.html":{}}}],["get(':id",{"_index":414,"title":{},"body":{"controllers/MovieController.html":{}}}],["get(':id')@apiparam({name",{"_index":383,"title":{},"body":{"controllers/MovieController.html":{}}}],["get('refresh",{"_index":134,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["get()@useguards(jwtauthenticationguard",{"_index":380,"title":{},"body":{"controllers/MovieController.html":{}}}],["getallmovies",{"_index":436,"title":{},"body":{"injectables/MovieService.html":{}}}],["getauthenticateduser",{"_index":190,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getauthenticateduser(email",{"_index":199,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getbyemail",{"_index":544,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyemail(email",{"_index":555,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyid",{"_index":545,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyid(id",{"_index":557,"title":{},"body":{"injectables/UsersService.html":{}}}],["getcookiesforlogout",{"_index":191,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwtaccesstoken",{"_index":192,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwtaccesstoken(userid",{"_index":205,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwtrefreshtoken",{"_index":193,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwtrefreshtoken(userid",{"_index":209,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwttoken",{"_index":194,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwttoken(userid",{"_index":211,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getmoviebyid",{"_index":437,"title":{},"body":{"injectables/MovieService.html":{}}}],["getmoviebyid(id",{"_index":445,"title":{},"body":{"injectables/MovieService.html":{}}}],["getting",{"_index":642,"title":{"index.html":{}},"body":{}}],["getuserifrefreshtokenmatches",{"_index":546,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserifrefreshtokenmatches(refreshtoken",{"_index":559,"title":{},"body":{"injectables/UsersService.html":{}}}],["graph",{"_index":720,"title":{},"body":{"modules.html":{}}}],["guards/jwt",{"_index":115,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["guards/localauthentication.guard",{"_index":113,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["hapi/joi",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["hashedpassword",{"_index":215,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["here",{"_index":662,"title":{},"body":{"index.html":{}}}],["host",{"_index":288,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/MovieModule.html":{}}}],["httpcode",{"_index":104,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["httpcode(200",{"_index":142,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["httpcode(200)@useguards(localauthenticationguard)@post('log",{"_index":83,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["httpexception",{"_index":217,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{}}}],["httpexception('movie",{"_index":460,"title":{},"body":{"injectables/MovieService.html":{}}}],["httponly",{"_index":229,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["httpstatus",{"_index":218,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{}}}],["httpstatus.bad_request",{"_index":250,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["httpstatus.internal_server_error",{"_index":254,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["httpstatus.not_found",{"_index":462,"title":{},"body":{"injectables/MovieService.html":{},"injectables/UsersService.html":{}}}],["id",{"_index":362,"title":{},"body":{"entities/Movie.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":579,"title":{},"body":{"coverage.html":{}}}],["ignore",{"_index":126,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["import",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{},"modules/MovieModule.html":{},"modules/UsersModule.html":{}}}],["in')@apibody({type",{"_index":84,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["index",{"_index":62,"title":{"index.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":14,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["inject",{"_index":179,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{},"modules/MovieModule.html":{}}}],["injectable",{"_index":186,"title":{"injectables/AuthenticationService.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":187,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":453,"title":{},"body":{"injectables/MovieService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(movie",{"_index":454,"title":{},"body":{"injectables/MovieService.html":{}}}],["injectrepository(user",{"_index":565,"title":{},"body":{"injectables/UsersService.html":{}}}],["installation",{"_index":698,"title":{},"body":{"index.html":{}}}],["installion",{"_index":680,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":700,"title":{},"body":{"index.html":{}}}],["instead",{"_index":476,"title":{},"body":{"classes/RegisterDto.html":{}}}],["interface",{"_index":496,"title":{"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{}},"body":{"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["interface/requestwithuser.interface",{"_index":111,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["interface/tokenpayload.interface",{"_index":221,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["interfaces",{"_index":497,"title":{},"body":{"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"overview.html":{}}}],["isemail",{"_index":353,"title":{},"body":{"classes/LogInDto.html":{},"classes/RegisterDto.html":{}}}],["isnotempty",{"_index":273,"title":{},"body":{"classes/CreateMovieDto.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{}}}],["isnotempty()@isstring",{"_index":269,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["ispasswordmatching",{"_index":259,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["isrefreshtokenmatching",{"_index":574,"title":{},"body":{"injectables/UsersService.html":{}}}],["isstring",{"_index":274,"title":{},"body":{"classes/CreateMovieDto.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{}}}],["isstring()@isnotempty",{"_index":478,"title":{},"body":{"classes/RegisterDto.html":{}}}],["isstring()@isnotempty()@minlength(7",{"_index":355,"title":{},"body":{"classes/LogInDto.html":{},"classes/RegisterDto.html":{}}}],["job",{"_index":731,"title":{},"body":{"properties.html":{}}}],["joi",{"_index":20,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.number",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.number().required",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.object",{"_index":37,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().required",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["jwt",{"_index":320,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt_expiration_time",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthenticationService.html":{}}}],["jwt_refresh_token_expiration_time",{"_index":234,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["jwt_secret",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["jwtauthenticationguard",{"_index":114,"title":{"injectables/JwtAuthenticationGuard.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/JwtAuthenticationGuard.html":{},"controllers/MovieController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":324,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":174,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["jwtmodule.registerasync",{"_index":178,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["jwtrefreshguard",{"_index":122,"title":{"injectables/JwtRefreshGuard.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/JwtRefreshGuard.html":{},"coverage.html":{}}}],["jwtrefreshtokenstrategy",{"_index":308,"title":{"injectables/JwtRefreshTokenStrategy.html":{}},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{}}}],["jwtservice",{"_index":197,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["jwtstrategy",{"_index":167,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kill",{"_index":696,"title":{},"body":{"index.html":{}}}],["license",{"_index":732,"title":{},"body":{"properties.html":{}}}],["linkedin",{"_index":644,"title":{},"body":{"index.html":{}}}],["linux",{"_index":686,"title":{},"body":{"index.html":{}}}],["local",{"_index":347,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localauthenticationguard",{"_index":112,"title":{"injectables/LocalAuthenticationGuard.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/LocalAuthenticationGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["localstrategy",{"_index":168,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["login",{"_index":66,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["login(@req",{"_index":145,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["login(request",{"_index":82,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logindto",{"_index":85,"title":{"classes/LogInDto.html":{}},"body":{"controllers/AuthenticationController.html":{},"classes/LogInDto.html":{},"coverage.html":{}}}],["logout",{"_index":67,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logout(@req",{"_index":159,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logout(request",{"_index":88,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["makes",{"_index":687,"title":{},"body":{"index.html":{}}}],["manager",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/MovieModule.html":{},"dependencies.html":{}}}],["match",{"_index":482,"title":{},"body":{"classes/RegisterDto.html":{}}}],["matches",{"_index":490,"title":{},"body":{"classes/RegisterDto.html":{}}}],["matches(/^\\+[1",{"_index":495,"title":{},"body":{"classes/RegisterDto.html":{}}}],["matching",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["max",{"_index":231,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["metadata",{"_index":626,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":63,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minlength",{"_index":357,"title":{},"body":{"classes/LogInDto.html":{},"classes/RegisterDto.html":{}}}],["minlength(7",{"_index":358,"title":{},"body":{"classes/LogInDto.html":{},"classes/RegisterDto.html":{}}}],["miscellaneous",{"_index":633,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mks",{"_index":668,"title":{},"body":{"index.html":{}}}],["mode",{"_index":706,"title":{},"body":{"index.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{},"modules/MovieModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{},"modules/MovieModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{},"modules/MovieModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["movie",{"_index":360,"title":{"entities/Movie.html":{}},"body":{"entities/Movie.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"coverage.html":{}}}],["movie.controller",{"_index":426,"title":{},"body":{"modules/MovieModule.html":{}}}],["movie.dto",{"_index":401,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{},"classes/UpdateMovieDto.html":{}}}],["movie.dto.ts",{"_index":265,"title":{},"body":{"classes/CreateMovieDto.html":{},"classes/UpdateMovieDto.html":{},"coverage.html":{}}}],["movie.dto.ts:10",{"_index":271,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["movie.dto.ts:14",{"_index":270,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["movie.dto.ts:6",{"_index":272,"title":{},"body":{"classes/CreateMovieDto.html":{}}}],["movie.service",{"_index":399,"title":{},"body":{"controllers/MovieController.html":{},"modules/MovieModule.html":{}}}],["movie/movie.module",{"_index":31,"title":{},"body":{"modules/AppModule.html":{}}}],["moviecontroller",{"_index":370,"title":{"controllers/MovieController.html":{}},"body":{"controllers/MovieController.html":{},"modules/MovieModule.html":{},"coverage.html":{}}}],["moviemodule",{"_index":9,"title":{"modules/MovieModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MovieModule.html":{},"modules.html":{},"overview.html":{}}}],["movierepository",{"_index":441,"title":{},"body":{"injectables/MovieService.html":{}}}],["movies",{"_index":451,"title":{},"body":{"injectables/MovieService.html":{}}}],["movieservice",{"_index":398,"title":{"injectables/MovieService.html":{}},"body":{"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"coverage.html":{},"overview.html":{}}}],["name",{"_index":77,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["nestjs",{"_index":649,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/DatabaseModule.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"modules/MovieModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":601,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":175,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":502,"title":{},"body":{"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":172,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":602,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":118,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/MovieController.html":{},"classes/RegisterDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":285,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":247,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newmovie",{"_index":455,"title":{},"body":{"injectables/MovieService.html":{}}}],["newuser",{"_index":568,"title":{},"body":{"injectables/UsersService.html":{}}}],["nilson",{"_index":736,"title":{},"body":{"properties.html":{}}}],["node.js",{"_index":651,"title":{},"body":{"index.html":{}}}],["npm",{"_index":699,"title":{},"body":{"index.html":{}}}],["null",{"_index":576,"title":{},"body":{"injectables/UsersService.html":{}}}],["nullable",{"_index":523,"title":{},"body":{"entities/User.html":{}}}],["number",{"_index":206,"title":{},"body":{"injectables/AuthenticationService.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"interfaces/TokenPayload.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["number})@apiokresponse()@apinotfoundresponse()@useguards(jwtauthenticationguard",{"_index":386,"title":{},"body":{"controllers/MovieController.html":{}}}],["optional",{"_index":79,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["out",{"_index":13,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"modules/MovieModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["out')@httpcode(200",{"_index":90,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["overview",{"_index":722,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":595,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":396,"title":{},"body":{"controllers/MovieController.html":{}}}],["parameters",{"_index":76,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parser",{"_index":618,"title":{},"body":{"dependencies.html":{}}}],["partialtype",{"_index":501,"title":{},"body":{"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createmoviedto",{"_index":504,"title":{},"body":{"classes/UpdateMovieDto.html":{}}}],["partialtype(createuserdto",{"_index":508,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["passport",{"_index":319,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":171,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["passportstrategy",{"_index":321,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":337,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passreqtocallback",{"_index":329,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["password",{"_index":240,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{}}}],["patch",{"_index":395,"title":{},"body":{"controllers/MovieController.html":{}}}],["patch(':id",{"_index":417,"title":{},"body":{"controllers/MovieController.html":{}}}],["patch(':id')@apiokresponse()@apinotfoundresponse()@useguards(jwtauthenticationguard",{"_index":393,"title":{},"body":{"controllers/MovieController.html":{}}}],["path",{"_index":230,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["payload",{"_index":224,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["payload.userid",{"_index":332,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["pg",{"_index":623,"title":{},"body":{"dependencies.html":{}}}],["pgadmin",{"_index":675,"title":{},"body":{"index.html":{}}}],["phonenumber",{"_index":471,"title":{},"body":{"classes/RegisterDto.html":{},"entities/User.html":{}}}],["plaintextpassword",{"_index":201,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["port",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/MovieModule.html":{}}}],["post",{"_index":105,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/MovieController.html":{},"controllers/UsersController.html":{}}}],["post('log",{"_index":144,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post('register",{"_index":97,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post()@apiokresponse()@apiconflictresponse()@useguards(localauthenticationguard",{"_index":528,"title":{},"body":{"controllers/UsersController.html":{}}}],["post()@useguards(jwtauthenticationguard",{"_index":378,"title":{},"body":{"controllers/MovieController.html":{}}}],["postgres",{"_index":287,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["postgres_db",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["postgres_host",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["postgres_password",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["postgres_port",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["postgres_user",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["postgreserrorcode",{"_index":222,"title":{},"body":{"injectables/AuthenticationService.html":{},"miscellaneous/enumerations.html":{}}}],["postgreserrorcode.uniqueviolation",{"_index":245,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["postgresql",{"_index":674,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":60,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/MovieController.html":{},"controllers/UsersController.html":{}}}],["primarygeneratedcolumn",{"_index":366,"title":{},"body":{"entities/Movie.html":{},"entities/User.html":{}}}],["private",{"_index":128,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{}}}],["problem",{"_index":667,"title":{},"body":{"index.html":{}}}],["production",{"_index":708,"title":{},"body":{"index.html":{}}}],["profile",{"_index":645,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":650,"title":{},"body":{"index.html":{}}}],["project",{"_index":647,"title":{},"body":{"index.html":{}}}],["promise",{"_index":87,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{}}}],["properties",{"_index":266,"title":{"properties.html":{}},"body":{"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"entities/User.html":{},"properties.html":{}}}],["property",{"_index":475,"title":{},"body":{"classes/RegisterDto.html":{}}}],["provided",{"_index":258,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["providers",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/MovieModule.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":189,"title":{},"body":{"injectables/AuthenticationService.html":{},"entities/Movie.html":{},"entities/User.html":{}}}],["rafael",{"_index":735,"title":{},"body":{"properties.html":{}}}],["read",{"_index":450,"title":{},"body":{"injectables/MovieService.html":{}}}],["readme",{"_index":433,"title":{},"body":{"injectables/MovieService.html":{}}}],["readonly",{"_index":129,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"controllers/MovieController.html":{},"controllers/UsersController.html":{}}}],["recommended",{"_index":681,"title":{},"body":{"index.html":{}}}],["redis",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/MovieModule.html":{},"dependencies.html":{},"index.html":{}}}],["redis_host",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["redis_port",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["redisstore",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/MovieModule.html":{}}}],["reflect",{"_index":625,"title":{},"body":{"dependencies.html":{}}}],["refresh",{"_index":68,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{}}}],["refresh(@req",{"_index":135,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refresh(request",{"_index":92,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refresh.guard",{"_index":123,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refresh.guard.ts",{"_index":307,"title":{},"body":{"injectables/JwtRefreshGuard.html":{},"coverage.html":{}}}],["refresh=${token",{"_index":233,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["refreshtoken",{"_index":150,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/UsersService.html":{}}}],["refreshtokencookie",{"_index":148,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["register",{"_index":69,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["register(@body",{"_index":130,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["register(registrationdata",{"_index":95,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["registerdto",{"_index":96,"title":{"classes/RegisterDto.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/RegisterDto.html":{},"coverage.html":{}}}],["registrationdata",{"_index":99,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["regular",{"_index":483,"title":{},"body":{"classes/RegisterDto.html":{}}}],["remove",{"_index":375,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{}}}],["remove(@param('id",{"_index":421,"title":{},"body":{"controllers/MovieController.html":{}}}],["remove(id",{"_index":388,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{}}}],["removerefreshtoken",{"_index":547,"title":{},"body":{"injectables/UsersService.html":{}}}],["removerefreshtoken(userid",{"_index":561,"title":{},"body":{"injectables/UsersService.html":{}}}],["repository",{"_index":439,"title":{},"body":{"injectables/MovieService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["req",{"_index":102,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["request",{"_index":80,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{}}}],["request.cookies?.refresh",{"_index":330,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["request.res.setheader",{"_index":161,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["request.res.setheader('set",{"_index":139,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["request.user",{"_index":141,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["request?.cookies?.authentication",{"_index":338,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["request?.cookies?.refresh",{"_index":326,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["requestwithuser",{"_index":71,"title":{"interfaces/RequestWithUser.html":{}},"body":{"controllers/AuthenticationController.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["required",{"_index":384,"title":{},"body":{"controllers/MovieController.html":{}}}],["reset",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/MovieModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["responsable",{"_index":449,"title":{},"body":{"injectables/MovieService.html":{}}}],["results",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":131,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":81,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["rimraf",{"_index":628,"title":{},"body":{"dependencies.html":{}}}],["run",{"_index":703,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":630,"title":{},"body":{"dependencies.html":{}}}],["scalable",{"_index":655,"title":{},"body":{"index.html":{}}}],["secret",{"_index":181,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{}}}],["secretorkey",{"_index":327,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["server",{"_index":656,"title":{},"body":{"index.html":{}}}],["set",{"_index":162,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["setcurrentrefreshtoken",{"_index":548,"title":{},"body":{"injectables/UsersService.html":{}}}],["setcurrentrefreshtoken(refreshtoken",{"_index":563,"title":{},"body":{"injectables/UsersService.html":{}}}],["setup",{"_index":688,"title":{},"body":{"index.html":{}}}],["side",{"_index":657,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":183,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["solution",{"_index":730,"title":{},"body":{"properties.html":{}}}],["solve",{"_index":665,"title":{},"body":{"index.html":{}}}],["something",{"_index":251,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["source",{"_index":15,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"modules/MovieModule.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["src/.../main.ts",{"_index":641,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../postgreserrorcodes.enum.ts",{"_index":635,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.module.ts",{"_index":17,"title":{},"body":{"modules/AppModule.html":{}}}],["src/authentication/authentication.controller.ts",{"_index":59,"title":{},"body":{"controllers/AuthenticationController.html":{},"coverage.html":{}}}],["src/authentication/authentication.controller.ts:34",{"_index":98,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:40",{"_index":94,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:52",{"_index":86,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:71",{"_index":75,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:80",{"_index":91,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.module.ts",{"_index":169,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["src/authentication/authentication.service.ts",{"_index":188,"title":{},"body":{"injectables/AuthenticationService.html":{},"coverage.html":{}}}],["src/authentication/authentication.service.ts:104",{"_index":204,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:12",{"_index":207,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:23",{"_index":210,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:36",{"_index":198,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:43",{"_index":213,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:66",{"_index":202,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:80",{"_index":216,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:96",{"_index":212,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/dto/login.dto.ts",{"_index":352,"title":{},"body":{"classes/LogInDto.html":{},"coverage.html":{}}}],["src/authentication/dto/login.dto.ts:10",{"_index":356,"title":{},"body":{"classes/LogInDto.html":{}}}],["src/authentication/dto/login.dto.ts:5",{"_index":354,"title":{},"body":{"classes/LogInDto.html":{}}}],["src/authentication/dto/register.dto.ts",{"_index":469,"title":{},"body":{"classes/RegisterDto.html":{},"coverage.html":{}}}],["src/authentication/dto/register.dto.ts:12",{"_index":472,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/dto/register.dto.ts:16",{"_index":479,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/dto/register.dto.ts:22",{"_index":477,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/dto/register.dto.ts:27",{"_index":480,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/dto/register.dto.ts:36",{"_index":489,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/guards/jwt",{"_index":302,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"coverage.html":{}}}],["src/authentication/guards/localauthentication.guard.ts",{"_index":340,"title":{},"body":{"injectables/LocalAuthenticationGuard.html":{},"coverage.html":{}}}],["src/authentication/interface/requestwithuser.interface.ts",{"_index":498,"title":{},"body":{"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["src/authentication/interface/tokenpayload.interface.ts",{"_index":499,"title":{},"body":{"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["src/authentication/strategy/jwt",{"_index":309,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{}}}],["src/authentication/strategy/jwt.strategy.ts",{"_index":333,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/authentication/strategy/jwt.strategy.ts:10",{"_index":334,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/authentication/strategy/jwt.strategy.ts:25",{"_index":336,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/authentication/strategy/local.strategy.ts",{"_index":342,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/authentication/strategy/local.strategy.ts:14",{"_index":346,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/authentication/strategy/local.strategy.ts:8",{"_index":344,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/database/database.module.ts",{"_index":283,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/database/postgreserrorcodes.enum.ts",{"_index":636,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/main.ts",{"_index":587,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/movie/dto/create",{"_index":264,"title":{},"body":{"classes/CreateMovieDto.html":{},"coverage.html":{}}}],["src/movie/dto/update",{"_index":500,"title":{},"body":{"classes/UpdateMovieDto.html":{},"coverage.html":{}}}],["src/movie/entities/movie.entity.ts",{"_index":361,"title":{},"body":{"entities/Movie.html":{},"coverage.html":{}}}],["src/movie/entities/movie.entity.ts:12",{"_index":365,"title":{},"body":{"entities/Movie.html":{}}}],["src/movie/entities/movie.entity.ts:15",{"_index":364,"title":{},"body":{"entities/Movie.html":{}}}],["src/movie/entities/movie.entity.ts:6",{"_index":367,"title":{},"body":{"entities/Movie.html":{}}}],["src/movie/entities/movie.entity.ts:9",{"_index":368,"title":{},"body":{"entities/Movie.html":{}}}],["src/movie/movie.controller.ts",{"_index":371,"title":{},"body":{"controllers/MovieController.html":{},"coverage.html":{}}}],["src/movie/movie.controller.ts:30",{"_index":379,"title":{},"body":{"controllers/MovieController.html":{}}}],["src/movie/movie.controller.ts:36",{"_index":381,"title":{},"body":{"controllers/MovieController.html":{}}}],["src/movie/movie.controller.ts:50",{"_index":387,"title":{},"body":{"controllers/MovieController.html":{}}}],["src/movie/movie.controller.ts:58",{"_index":394,"title":{},"body":{"controllers/MovieController.html":{}}}],["src/movie/movie.controller.ts:66",{"_index":390,"title":{},"body":{"controllers/MovieController.html":{}}}],["src/movie/movie.module.ts",{"_index":425,"title":{},"body":{"modules/MovieModule.html":{}}}],["src/movie/movie.service.ts",{"_index":434,"title":{},"body":{"injectables/MovieService.html":{},"coverage.html":{}}}],["src/movie/movie.service.ts:15",{"_index":443,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/movie/movie.service.ts:21",{"_index":444,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/movie/movie.service.ts:25",{"_index":446,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/movie/movie.service.ts:33",{"_index":448,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/movie/movie.service.ts:41",{"_index":447,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/movie/movie.service.ts:9",{"_index":440,"title":{},"body":{"injectables/MovieService.html":{}}}],["src/users/dto/create",{"_index":277,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":506,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts",{"_index":509,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:10",{"_index":515,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:13",{"_index":519,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:16",{"_index":517,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:20",{"_index":518,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:24",{"_index":513,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:7",{"_index":516,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":525,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:15",{"_index":529,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":538,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":543,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:15",{"_index":558,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:26",{"_index":556,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:37",{"_index":553,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:43",{"_index":564,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:50",{"_index":560,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:63",{"_index":562,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:9",{"_index":550,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":704,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":707,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":709,"title":{},"body":{"index.html":{}}}],["started",{"_index":643,"title":{"index.html":{}},"body":{}}],["starting",{"_index":663,"title":{},"body":{"index.html":{}}}],["statements",{"_index":580,"title":{},"body":{"coverage.html":{}}}],["steps",{"_index":683,"title":{},"body":{"index.html":{}}}],["store",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/MovieModule.html":{},"dependencies.html":{}}}],["strategy",{"_index":318,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["strategy/jwt.strategy",{"_index":177,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["strategy/local.strategy",{"_index":173,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["string",{"_index":200,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["super",{"_index":323,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["support",{"_index":717,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":718,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":673,"title":{},"body":{"index.html":{}}}],["synchronize",{"_index":299,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["table",{"_index":594,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":593,"title":{},"body":{"coverage.html":{}}}],["techs",{"_index":671,"title":{},"body":{"index.html":{}}}],["test",{"_index":712,"title":{},"body":{"index.html":{}}}],["test:cov",{"_index":715,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":714,"title":{},"body":{"index.html":{}}}],["tests",{"_index":711,"title":{},"body":{"index.html":{}}}],["this.authenticationservice.getauthenticateduser(email",{"_index":351,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.authenticationservice.getcookiesforlogout",{"_index":163,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authenticationservice.getcookiewithjwtaccesstoken(request.user.id",{"_index":138,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authenticationservice.getcookiewithjwtaccesstoken(user.id",{"_index":147,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authenticationservice.getcookiewithjwtrefreshtoken(user.id",{"_index":151,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authenticationservice.register(registrationdata",{"_index":132,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.configservice.get('jwt_expiration_time')}s",{"_index":227,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.configservice.get('jwt_secret",{"_index":226,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.getbyid(userid",{"_index":573,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.jwtservice.sign(payload",{"_index":225,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.movierepository.create(movie",{"_index":456,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.movierepository.delete(id",{"_index":467,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.movierepository.find",{"_index":458,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.movierepository.findoneby",{"_index":459,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.movierepository.findonebyorfail",{"_index":465,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.movierepository.save(newmovie",{"_index":457,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.movierepository.update(id",{"_index":463,"title":{},"body":{"injectables/MovieService.html":{}}}],["this.movieservice.createmovie(createmoviedto",{"_index":412,"title":{},"body":{"controllers/MovieController.html":{}}}],["this.movieservice.getallmovies",{"_index":413,"title":{},"body":{"controllers/MovieController.html":{}}}],["this.movieservice.getmoviebyid(+id",{"_index":416,"title":{},"body":{"controllers/MovieController.html":{}}}],["this.movieservice.remove(+id",{"_index":422,"title":{},"body":{"controllers/MovieController.html":{}}}],["this.movieservice.update(+id",{"_index":419,"title":{},"body":{"controllers/MovieController.html":{}}}],["this.userservice.getbyid(payload.userid",{"_index":339,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.userservice.getuserifrefreshtokenmatches",{"_index":331,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["this.usersrepository.create(userdata",{"_index":569,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findoneby",{"_index":566,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.save(newuser",{"_index":570,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.update(userid",{"_index":572,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.create",{"_index":239,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.usersservice.create(createuserdto",{"_index":534,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getbyemail(email",{"_index":255,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.usersservice.removerefreshtoken(request.user.id",{"_index":160,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.usersservice.setcurrentrefreshtoken(refreshtoken",{"_index":153,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.verifypassword(plaintextpassword",{"_index":256,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["throw",{"_index":246,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{}}}],["token",{"_index":149,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{}}}],["token.strategy.ts",{"_index":310,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{}}}],["token.strategy.ts:13",{"_index":314,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["token.strategy.ts:29",{"_index":316,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["tokenpayload",{"_index":220,"title":{"interfaces/TokenPayload.html":{}},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["transformer",{"_index":521,"title":{},"body":{"entities/User.html":{},"dependencies.html":{}}}],["true",{"_index":300,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"controllers/MovieController.html":{},"classes/RegisterDto.html":{},"entities/User.html":{}}}],["true})@exclude",{"_index":512,"title":{},"body":{"entities/User.html":{}}}],["try",{"_index":237,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["ttl",{"_index":430,"title":{},"body":{"modules/MovieModule.html":{}}}],["type",{"_index":78,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/CreateMovieDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"entities/Movie.html":{},"controllers/MovieController.html":{},"injectables/MovieService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["typeorm",{"_index":369,"title":{},"body":{"entities/Movie.html":{},"injectables/MovieService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"index.html":{}}}],["typeormmodule",{"_index":284,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/MovieModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([movie",{"_index":432,"title":{},"body":{"modules/MovieModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":542,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":286,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["types",{"_index":503,"title":{},"body":{"classes/UpdateMovieDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["types/bcrypt",{"_index":605,"title":{},"body":{"dependencies.html":{}}}],["types/hapi__joi",{"_index":607,"title":{},"body":{"dependencies.html":{}}}],["types/passport",{"_index":609,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":672,"title":{},"body":{"index.html":{}}}],["undefined",{"_index":158,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["unique",{"_index":522,"title":{},"body":{"entities/User.html":{}}}],["uniqueviolation",{"_index":637,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["unit",{"_index":710,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":100,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/MovieService.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":733,"title":{},"body":{"properties.html":{}}}],["up",{"_index":692,"title":{},"body":{"index.html":{}}}],["update",{"_index":376,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{}}}],["update(@param('id",{"_index":418,"title":{},"body":{"controllers/MovieController.html":{}}}],["update(id",{"_index":391,"title":{},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{}}}],["updatedmovie",{"_index":464,"title":{},"body":{"injectables/MovieService.html":{}}}],["updatemoviedto",{"_index":392,"title":{"classes/UpdateMovieDto.html":{}},"body":{"controllers/MovieController.html":{},"injectables/MovieService.html":{},"classes/UpdateMovieDto.html":{},"coverage.html":{}}}],["updateuserdto",{"_index":505,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["use",{"_index":474,"title":{},"body":{"classes/RegisterDto.html":{}}}],["usefactory",{"_index":180,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{},"modules/MovieModule.html":{}}}],["useguards",{"_index":106,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/MovieController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthenticationguard",{"_index":155,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/MovieController.html":{}}}],["useguards(jwtauthenticationguard)@get",{"_index":73,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(jwtauthenticationguard)@post('log",{"_index":89,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(jwtrefreshguard",{"_index":133,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(jwtrefreshguard)@get('refresh",{"_index":93,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(localauthenticationguard",{"_index":143,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/UsersController.html":{}}}],["useinterceptors",{"_index":107,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useinterceptors(classserializerinterceptor",{"_index":125,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["user",{"_index":146,"title":{"entities/User.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/LocalStrategy.html":{},"interfaces/RequestWithUser.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user.currenthashedrefreshtoken.tostring",{"_index":575,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.dto",{"_index":507,"title":{},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":278,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:2",{"_index":279,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:3",{"_index":280,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:4",{"_index":281,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.id",{"_index":154,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["user.password",{"_index":157,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["userdata",{"_index":554,"title":{},"body":{"injectables/UsersService.html":{}}}],["userid",{"_index":208,"title":{},"body":{"injectables/AuthenticationService.html":{},"interfaces/TokenPayload.html":{},"injectables/UsersService.html":{}}}],["username",{"_index":291,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["usernamefield",{"_index":350,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["users",{"_index":526,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":540,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":530,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/entities/user.entity",{"_index":348,"title":{},"body":{"injectables/LocalStrategy.html":{},"interfaces/RequestWithUser.html":{}}}],["users/users.module",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{}}}],["users/users.service",{"_index":121,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["userscontroller",{"_index":524,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":313,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["usersmodule",{"_index":10,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":551,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice",{"_index":120,"title":{"injectables/UsersService.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":670,"title":{},"body":{"index.html":{}}}],["validate",{"_index":311,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(email",{"_index":345,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":335,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(request",{"_index":315,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["validationschema",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":275,"title":{},"body":{"classes/CreateMovieDto.html":{},"classes/LogInDto.html":{},"classes/RegisterDto.html":{},"dependencies.html":{}}}],["value",{"_index":638,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["verifypassword",{"_index":195,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["verifypassword(plaintextpassword",{"_index":214,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["version",{"_index":728,"title":{},"body":{"properties.html":{}}}],["watch",{"_index":705,"title":{},"body":{"index.html":{}}}],["went",{"_index":252,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["windows",{"_index":684,"title":{},"body":{"index.html":{}}}],["witt",{"_index":737,"title":{},"body":{"properties.html":{}}}],["wrong",{"_index":253,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["wsl",{"_index":685,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":11,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/MovieModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthenticationModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nMovieModule\n\nMovieModule\n\nAppModule -->\n\nMovieModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthenticationModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            MovieModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import * as Joi from '@hapi/joi';\nimport * as redisStore from 'cache-manager-redis-store';\nimport { CacheModule, Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { MovieModule } from './movie/movie.module';\nimport { DatabaseModule } from './database/database.module';\nimport { UsersModule } from './users/users.module';\nimport { AuthenticationModule } from './authentication/authentication.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      validationSchema: Joi.object({\n        REDIS_HOST: Joi.string().required(),\n        REDIS_PORT: Joi.number().required(),\n        POSTGRES_HOST: Joi.string().required(),\n        POSTGRES_PORT: Joi.number().required(),\n        POSTGRES_USER: Joi.string().required(),\n        POSTGRES_PASSWORD: Joi.string().required(),\n        POSTGRES_DB: Joi.string().required(),\n        PORT: Joi.number(),\n        JWT_SECRET: Joi.string().required(),\n        JWT_EXPIRATION_TIME: Joi.string().required(),\n      }),\n    }),\n    DatabaseModule,\n    UsersModule,\n    MovieModule,\n    AuthenticationModule,\n  ],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthenticationController.html":{"url":"controllers/AuthenticationController.html","title":"controller - AuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/authentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                authentication\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                authenticate\n                            \n                            \n                                    Async\n                                logIn\n                            \n                            \n                                    Async\n                                logOut\n                            \n                            \n                                refresh\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        authenticate\n                        \n                    \n                \n            \n            \n                \nauthenticate(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthenticationGuard)@Get()\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    logIn(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(200)@UseGuards(LocalAuthenticationGuard)@Post('log-in')@ApiBody({type: LogInDto})\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logOut\n                        \n                    \n                \n            \n            \n                \n                    \n                    logOut(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthenticationGuard)@Post('log-out')@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refresh\n                        \n                    \n                \n            \n            \n                \nrefresh(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtRefreshGuard)@Get('refresh')\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(registrationData: RegisterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    registrationData\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Req,\n  ClassSerializerInterceptor,\n  Controller,\n  HttpCode,\n  Post,\n  UseGuards,\n  Get,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { AuthenticationService } from './authentication.service';\nimport RegisterDto from './dto/register.dto';\nimport RequestWithUser from './interface/requestWithUser.interface';\nimport { LocalAuthenticationGuard } from './guards/localAuthentication.guard';\nimport JwtAuthenticationGuard from './guards/jwt-authentication.guard';\nimport { ApiBody } from '@nestjs/swagger';\nimport LogInDto from './dto/login.dto';\nimport { UsersService } from '../users/users.service';\nimport JwtRefreshGuard from './guards/jwt-refresh.guard';\n\n@Controller('authentication')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class AuthenticationController {\n  /**\n   * @ignore\n   */\n  constructor(\n    private readonly authenticationService: AuthenticationService,\n    private readonly usersService: UsersService,\n  ) {}\n\n  @Post('register')\n  async register(@Body() registrationData: RegisterDto) {\n    return this.authenticationService.register(registrationData);\n  }\n\n  @UseGuards(JwtRefreshGuard)\n  @Get('refresh')\n  refresh(@Req() request: RequestWithUser) {\n    const accessTokenCookie =\n      this.authenticationService.getCookieWithJwtAccessToken(request.user.id);\n\n    request.res.setHeader('Set-Cookie', accessTokenCookie);\n    return request.user;\n  }\n\n  @HttpCode(200)\n  @UseGuards(LocalAuthenticationGuard)\n  @Post('log-in')\n  @ApiBody({ type: LogInDto })\n  async logIn(@Req() request: RequestWithUser): Promise {\n    const { user } = request;\n    const accessTokenCookie =\n      this.authenticationService.getCookieWithJwtAccessToken(user.id);\n    const { cookie: refreshTokenCookie, token: refreshToken } =\n      this.authenticationService.getCookieWithJwtRefreshToken(user.id);\n\n    await this.usersService.setCurrentRefreshToken(refreshToken, user.id);\n\n    request.res.setHeader('Set-Cookie', [\n      accessTokenCookie,\n      refreshTokenCookie,\n    ]);\n\n    return user;\n  }\n\n  @UseGuards(JwtAuthenticationGuard)\n  @Get()\n  authenticate(@Req() request: RequestWithUser) {\n    const user = request.user;\n    user.password = undefined;\n    return user;\n  }\n\n  @UseGuards(JwtAuthenticationGuard)\n  @Post('log-out')\n  @HttpCode(200)\n  async logOut(@Req() request: RequestWithUser) {\n    await this.usersService.removeRefreshToken(request.user.id);\n    request.res.setHeader(\n      'Set-Cookie',\n      this.authenticationService.getCookiesForLogOut(),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthenticationModule.html":{"url":"modules/AuthenticationModule.html","title":"module - AuthenticationModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthenticationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthenticationModule\n\n\n\ncluster_AuthenticationModule_imports\n\n\n\ncluster_AuthenticationModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\nAuthenticationModule -->\n\nUsersModule->AuthenticationModule\n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nAuthenticationModule -->\n\nAuthenticationService->AuthenticationModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthenticationModule -->\n\nJwtStrategy->AuthenticationModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthenticationModule -->\n\nLocalStrategy->AuthenticationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/authentication/authentication.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthenticationService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthenticationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthenticationService } from './authentication.service';\nimport { UsersModule } from '../users/users.module';\nimport { AuthenticationController } from './authentication.controller';\nimport { PassportModule } from '@nestjs/passport';\nimport { LocalStrategy } from './strategy/local.strategy';\nimport { JwtModule } from '@nestjs/jwt';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { JwtStrategy } from './strategy/jwt.strategy';\n\n@Module({\n  imports: [\n    UsersModule,\n    PassportModule,\n    ConfigModule,\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: async (configService: ConfigService) => ({\n        secret: configService.get('JWT_SECRET'),\n        signOptions: {\n          expiresIn: `${configService.get('JWT_EXPIRATION_TIME')}s`,\n        },\n      }),\n    }),\n  ],\n  providers: [AuthenticationService, LocalStrategy, JwtStrategy],\n  controllers: [AuthenticationController],\n})\nexport class AuthenticationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthenticationService.html":{"url":"injectables/AuthenticationService.html","title":"injectable - AuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/authentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                getAuthenticatedUser\n                            \n                            \n                                    Public\n                                getCookiesForLogOut\n                            \n                            \n                                    Public\n                                getCookieWithJwtAccessToken\n                            \n                            \n                                    Public\n                                getCookieWithJwtRefreshToken\n                            \n                            \n                                    Public\n                                getCookieWithJwtToken\n                            \n                            \n                                    Public\n                                    Async\n                                register\n                            \n                            \n                                    Private\n                                    Async\n                                verifyPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/authentication.service.ts:36\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getAuthenticatedUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAuthenticatedUser(email: string, plainTextPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    plainTextPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCookiesForLogOut\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookiesForLogOut()\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCookieWithJwtAccessToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookieWithJwtAccessToken(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCookieWithJwtRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookieWithJwtRefreshToken(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { cookie: string; token: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCookieWithJwtToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookieWithJwtToken(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(registrationData: RegisterDto)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    registrationData\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        verifyPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyPassword(plainTextPassword: string, hashedPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    plainTextPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    hashedPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { UsersService } from '../users/users.service';\nimport RegisterDto from './dto/register.dto';\nimport * as bcrypt from 'bcrypt';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { TokenPayload } from './interface/tokenPayload.interface';\nimport { PostgresErrorCode } from '../database/postgresErrorCodes.enum';\n\n@Injectable()\nexport class AuthenticationService {\n  public getCookieWithJwtAccessToken(userId: number) {\n    const payload: TokenPayload = { userId };\n    const token = this.jwtService.sign(payload, {\n      secret: this.configService.get('JWT_SECRET'),\n      expiresIn: `${this.configService.get('JWT_EXPIRATION_TIME')}s`,\n    });\n    return `Authentication=${token}; HttpOnly; Path=/; Max-Age=${this.configService.get(\n      'JWT_EXPIRATION_TIME',\n    )}`;\n  }\n\n  public getCookieWithJwtRefreshToken(userId: number) {\n    const payload: TokenPayload = { userId };\n    const token = this.jwtService.sign(payload, {\n      secret: this.configService.get('JWT_SECRET'),\n      expiresIn: `${this.configService.get('JWT_EXPIRATION_TIME')}s`,\n    });\n    const cookie = `Refresh=${token}; HttpOnly; Path=/; Max-Age=${this.configService.get(\n      'JWT_REFRESH_TOKEN_EXPIRATION_TIME',\n    )}`;\n    return {\n      cookie,\n      token,\n    };\n  }\n  constructor(\n    private readonly usersService: UsersService,\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n  ) {}\n\n  public async register(registrationData: RegisterDto) {\n    const hashedPassword = await bcrypt.hash(registrationData.password, 10);\n    try {\n      const createdUser = await this.usersService.create({\n        ...registrationData,\n        password: hashedPassword,\n      });\n      createdUser.password = undefined;\n      return createdUser;\n    } catch (error) {\n      if (error?.code === PostgresErrorCode.UniqueViolation) {\n        throw new HttpException(\n          'User with that email already exists',\n          HttpStatus.BAD_REQUEST,\n        );\n      }\n      throw new HttpException(\n        'Something went wrong',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  public async getAuthenticatedUser(email: string, plainTextPassword: string) {\n    try {\n      const user = await this.usersService.getByEmail(email);\n      await this.verifyPassword(plainTextPassword, user.password);\n      user.password = undefined;\n      return user;\n    } catch (error) {\n      throw new HttpException(\n        'Wrong credentials provided',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n  }\n\n  private async verifyPassword(\n    plainTextPassword: string,\n    hashedPassword: string,\n  ) {\n    const isPasswordMatching = await bcrypt.compare(\n      plainTextPassword,\n      hashedPassword,\n    );\n    if (!isPasswordMatching) {\n      throw new HttpException(\n        'Wrong credentials provided',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n  }\n\n  public getCookieWithJwtToken(userId: number) {\n    const payload: TokenPayload = { userId };\n    const token = this.jwtService.sign(payload);\n    return `Authentication=${token}; HttpOnly; Path=/; Max-Age=${this.configService.get(\n      'JWT_EXPIRATION_TIME',\n    )}`;\n  }\n\n  public getCookiesForLogOut() {\n    return [\n      'Authentication=; HttpOnly; Path=/; Max-Age=0',\n      'Refresh=; HttpOnly; Path=/; Max-Age=0',\n    ];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateMovieDto.html":{"url":"classes/CreateMovieDto.html","title":"class - CreateMovieDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateMovieDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/movie/dto/create-movie.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                director\n                            \n                            \n                                gender\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        director\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/movie/dto/create-movie.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/movie/dto/create-movie.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/movie/dto/create-movie.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class CreateMovieDto {\n  @IsNotEmpty()\n  @IsString()\n  name: string;\n\n  @IsNotEmpty()\n  @IsString()\n  gender: string;\n\n  @IsNotEmpty()\n  @IsString()\n  director: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateUserDto {\n  email: string;\n  name: string;\n  password: string;\n}\n\nexport default CreateUserDto;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        host: configService.get('POSTGRES_HOST'),\n        port: configService.get('POSTGRES_PORT'),\n        username: configService.get('POSTGRES_USER'),\n        password: configService.get('POSTGRES_PASSWORD'),\n        database: configService.get('POSTGRES_DB'),\n        entities: [__dirname + '/../**/*.entity.ts'],\n        synchronize: true,\n        autoLoadEntities: true,\n      }),\n    }),\n  ],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthenticationGuard.html":{"url":"injectables/JwtAuthenticationGuard.html","title":"injectable - JwtAuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/guards/jwt-authentication.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport default class JwtAuthenticationGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtRefreshGuard.html":{"url":"injectables/JwtRefreshGuard.html","title":"injectable - JwtRefreshGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtRefreshGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/guards/jwt-refresh.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport default class JwtRefreshGuard extends AuthGuard('jwt-refresh-token') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtRefreshTokenStrategy.html":{"url":"injectables/JwtRefreshTokenStrategy.html","title":"injectable - JwtRefreshTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtRefreshTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/strategy/jwt-refresh-token.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/strategy/jwt-refresh-token.strategy.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(request: Request, payload: TokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/strategy/jwt-refresh-token.strategy.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                TokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Request } from 'express';\nimport { UsersService } from '../../users/users.service';\nimport { TokenPayload } from '../interface/tokenPayload.interface';\n\n@Injectable()\nexport class JwtRefreshTokenStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-refresh-token',\n) {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly userService: UsersService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (request: Request) => {\n          return request?.cookies?.Refresh;\n        },\n      ]),\n      secretOrKey: configService.get('JWT_REFRESH_TOKEN_SECRET'),\n      passReqToCallback: true,\n    });\n  }\n\n  async validate(request: Request, payload: TokenPayload) {\n    const refreshToken = request.cookies?.Refresh;\n    return this.userService.getUserIfRefreshTokenMatches(\n      refreshToken,\n      payload.userId,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/strategy/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/strategy/jwt.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: TokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/strategy/jwt.strategy.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                TokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Request } from 'express';\nimport { UsersService } from '../../users/users.service';\nimport { TokenPayload } from '../interface/tokenPayload.interface';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly userService: UsersService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (request: Request) => {\n          return request?.cookies?.Authentication;\n        },\n      ]),\n      secretOrKey: configService.get('JWT_SECRET'),\n    });\n  }\n\n  async validate(payload: TokenPayload) {\n    return this.userService.getById(payload.userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthenticationGuard.html":{"url":"injectables/LocalAuthenticationGuard.html","title":"injectable - LocalAuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/guards/localAuthentication.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthenticationGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/strategy/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authenticationService: AuthenticationService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/strategy/local.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authenticationService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/strategy/local.strategy.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { AuthenticationService } from '../authentication.service';\nimport User from '../../users/entities/user.entity';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authenticationService: AuthenticationService) {\n    super({\n      usernameField: 'email',\n    });\n  }\n  async validate(email: string, password: string): Promise {\n    return this.authenticationService.getAuthenticatedUser(email, password);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LogInDto.html":{"url":"classes/LogInDto.html","title":"class - LogInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LogInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/dto/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/login.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(7)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/login.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsString, IsNotEmpty, MinLength } from 'class-validator';\n\nexport class LogInDto {\n  @IsEmail()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(7)\n  password: string;\n}\n\nexport default LogInDto;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Movie.html":{"url":"entities/Movie.html","title":"entity - Movie","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Movie\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/movie/entities/movie.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                director\n                            \n                            \n                                    Public\n                                gender\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        director\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/movie/entities/movie.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/movie/entities/movie.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/movie/entities/movie.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/movie/entities/movie.entity.ts:9\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport default class Movie {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public name: string;\n\n  @Column()\n  public gender: string;\n\n  @Column()\n  public director: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MovieController.html":{"url":"controllers/MovieController.html","title":"controller - MovieController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MovieController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/movie/movie.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                movie\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createMovieDto: CreateMovieDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/movie/movie.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createMovieDto\n                                    \n                                                CreateMovieDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/movie/movie.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiParam({name: 'id', required: true, description: 'Should be an id of a post that exists in the database', type: Number})@ApiOkResponse()@ApiNotFoundResponse()@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/movie/movie.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOkResponse()@ApiNotFoundResponse()@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/movie/movie.controller.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateMovieDto: UpdateMovieDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiOkResponse()@ApiNotFoundResponse()@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/movie/movie.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateMovieDto\n                                    \n                                                UpdateMovieDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n} from '@nestjs/common';\nimport { MovieService } from './movie.service';\nimport { CreateMovieDto } from './dto/create-movie.dto';\nimport { UpdateMovieDto } from './dto/update-movie.dto';\nimport JwtAuthenticationGuard from '../authentication/guards/jwt-authentication.guard';\nimpot { Movie } from './entities/movie.entity';\nimport {\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiParam,\n  ApiTags,\n} from '@nestjs/swagger';\n\n@Controller('movie')\n@ApiTags('movies')\nexport class MovieController {\n  constructor(private readonly movieService: MovieService) {}\n\n  @Post()\n  @UseGuards(JwtAuthenticationGuard)\n  create(@Body() createMovieDto: CreateMovieDto) {\n    return this.movieService.createMovie(createMovieDto);\n  }\n\n  @Get()\n  @UseGuards(JwtAuthenticationGuard)\n  findAll() {\n    return this.movieService.getAllMovies();\n  }\n\n  @Get(':id')\n  @ApiParam({\n    name: 'id',\n    required: true,\n    description: 'Should be an id of a post that exists in the database',\n    type: Number,\n  })\n  @ApiOkResponse()\n  @ApiNotFoundResponse()\n  @UseGuards(JwtAuthenticationGuard)\n  findOne(@Param('id') id: string): Promise {\n    return this.movieService.getMovieById(+id);\n  }\n\n  @Patch(':id')\n  @ApiOkResponse()\n  @ApiNotFoundResponse()\n  @UseGuards(JwtAuthenticationGuard)\n  update(@Param('id') id: string, @Body() updateMovieDto: UpdateMovieDto) {\n    return this.movieService.update(+id, updateMovieDto);\n  }\n\n  @Delete(':id')\n  @ApiOkResponse()\n  @ApiNotFoundResponse()\n  @UseGuards(JwtAuthenticationGuard)\n  remove(@Param('id') id: string) {\n    return this.movieService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MovieModule.html":{"url":"modules/MovieModule.html","title":"module - MovieModule","body":"\n                   \n\n\n\n\n    Modules\n    MovieModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_MovieModule\n\n\n\ncluster_MovieModule_providers\n\n\n\n\nMovieService\n\nMovieService\n\n\n\nMovieModule\n\nMovieModule\n\nMovieModule -->\n\nMovieService->MovieModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/movie/movie.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MovieService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MovieController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import * as redisStore from 'cache-manager-redis-store';\nimport { CacheModule, Module } from '@nestjs/common';\nimport { MovieService } from './movie.service';\nimport { MovieController } from './movie.controller';\nimpot { Movie } from './entities/movie.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\n@Module({\n  imports: [\n    CacheModule.registerAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        store: redisStore,\n        host: configService.get('REDIS_HOST'),\n        port: configService.get('REDIS_PORT'),\n        ttl: 120,\n      }),\n    }),\n    TypeOrmModule.forFeature([Movie]),\n  ],\n  controllers: [MovieController],\n  providers: [MovieService],\n})\nexport class MovieModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MovieService.html":{"url":"injectables/MovieService.html","title":"injectable - MovieService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MovieService\n\n\n\n        \n            Info\n        \n        \n            README\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/movie/movie.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createMovie\n                            \n                            \n                                getAllMovies\n                            \n                            \n                                    Async\n                                getMovieById\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(movieRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/movie/movie.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        movieRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createMovie\n                        \n                    \n                \n            \n            \n                \n                    \n                    createMovie(movie: CreateMovieDto)\n                \n            \n\n\n            \n                \n                    Defined in src/movie/movie.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    movie\n                                    \n                                                CreateMovieDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllMovies\n                        \n                    \n                \n            \n            \n                \ngetAllMovies()\n                \n            \n\n\n            \n                \n                    Defined in src/movie/movie.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getMovieById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMovieById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/movie/movie.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/movie/movie.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, movie: UpdateMovieDto)\n                \n            \n\n\n            \n                \n                    Defined in src/movie/movie.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    movie\n                                    \n                                                UpdateMovieDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n    \n        MovieService\nThis repository is responsable to create, read, update and delete movies\nA Movie contains: name, gender and director\n\n    \n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CreateMovieDto } from './dto/create-movie.dto';\nimport { UpdateMovieDto } from './dto/update-movie.dto';\nimpot { Movie } from './entities/movie.entity';\n\n@Injectable()\nexport class MovieService {\n  constructor(\n    @InjectRepository(Movie)\n    private movieRepository: Repository,\n  ) {}\n\n  async createMovie(movie: CreateMovieDto) {\n    const newMovie = await this.movieRepository.create(movie);\n    await this.movieRepository.save(newMovie);\n    return newMovie;\n  }\n\n  getAllMovies() {\n    return this.movieRepository.find();\n  }\n\n  async getMovieById(id: number) {\n    const movie = await this.movieRepository.findOneBy({ id });\n    if (movie) {\n      return movie;\n    }\n    throw new HttpException('Movie not found', HttpStatus.NOT_FOUND);\n  }\n\n  async update(id: number, movie: UpdateMovieDto) {\n    await this.movieRepository.update(id, movie);\n    const updatedMovie = await this.movieRepository.findOneByOrFail({ id });\n    if (updatedMovie) {\n      return updatedMovie;\n    }\n  }\n\n  async remove(id: number) {\n    const deleteResponse = await this.movieRepository.delete(id);\n    if (!deleteResponse.affected) {\n      throw new HttpException('Movie not found', HttpStatus.NOT_FOUND);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/dto/register.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                fullName\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                phoneNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({deprecated: true, description: 'Use the name property instead'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(7)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Has to match a regular expression: /^\\+[1-9]\\d{1,14}$/', example: '+123123123123'})@IsString()@IsNotEmpty()@Matches(/^\\+[1-9]\\d{1,14}$/)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:36\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsString,\n  IsNotEmpty,\n  MinLength,\n  Matches,\n} from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class RegisterDto {\n  @IsEmail()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  @ApiProperty({\n    deprecated: true,\n    description: 'Use the name property instead',\n  })\n  fullName: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(7)\n  password: string;\n\n  @ApiProperty({\n    description: 'Has to match a regular expression: /^\\\\+[1-9]\\\\d{1,14}$/',\n    example: '+123123123123',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^\\+[1-9]\\d{1,14}$/)\n  phoneNumber: string;\n}\n\nexport default RegisterDto;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithUser.html":{"url":"interfaces/RequestWithUser.html","title":"interface - RequestWithUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/interface/requestWithUser.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         User\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         User\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Request } from 'express';\nimport User from '../../users/entities/user.entity';\n\ninterface RequestWithUser extends Request {\n  user: User;\n}\n\nexport default RequestWithUser;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenPayload.html":{"url":"interfaces/TokenPayload.html","title":"interface - TokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/interface/tokenPayload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            userId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface TokenPayload {\n  userId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateMovieDto.html":{"url":"classes/UpdateMovieDto.html","title":"class - UpdateMovieDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateMovieDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/movie/dto/update-movie.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateMovieDto } from './create-movie.dto';\n\nexport class UpdateMovieDto extends PartialType(CreateMovieDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                currentHashedRefreshToken\n                            \n                            \n                                    Public\n                                email\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                password\n                            \n                            \n                                    Public\n                                    Optional\n                                phoneNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        currentHashedRefreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:13\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\nimport { Exclude } from 'class-transformer';\n\n@Entity()\nexport default class User {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column({ unique: true })\n  public email: string;\n\n  @Column({ nullable: true })\n  public phoneNumber?: string;\n\n  @Column()\n  public name: string;\n\n  @Column({ nullable: true })\n  @Exclude()\n  public password?: string;\n\n  @Column({ nullable: true })\n  @Exclude()\n  public currentHashedRefreshToken?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOkResponse()@ApiConflictResponse()@UseGuards(LocalAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Body, UseGuards } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { ApiConflictResponse, ApiOkResponse } from '@nestjs/swagger';\nimport { LocalAuthenticationGuard } from '../authentication/guards/localAuthentication.guard';\n\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Post()\n  @ApiOkResponse()\n  @ApiConflictResponse()\n  @UseGuards(LocalAuthenticationGuard)\n  create(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.create(createUserDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport User from './entities/user.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                getByEmail\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                getUserIfRefreshTokenMatches\n                            \n                            \n                                    Async\n                                removeRefreshToken\n                            \n                            \n                                    Async\n                                setCurrentRefreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(userData: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userData\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserIfRefreshTokenMatches\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserIfRefreshTokenMatches(refreshToken: string, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeRefreshToken(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        setCurrentRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    setCurrentRefreshToken(refreshToken: string, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport User from './entities/user.entity';\nimport CreateUserDto from './dto/create-user.dto';\nimport * as bcrypt from 'bcrypt';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository,\n  ) {}\n\n  async getById(id: number) {\n    const user = await this.usersRepository.findOneBy({ id });\n    if (user) {\n      return user;\n    }\n    throw new HttpException(\n      'User with this id does not exist',\n      HttpStatus.NOT_FOUND,\n    );\n  }\n\n  async getByEmail(email: string) {\n    const user = await this.usersRepository.findOneBy({ email });\n    if (user) {\n      return user;\n    }\n    throw new HttpException(\n      'User with this email does not exist',\n      HttpStatus.NOT_FOUND,\n    );\n  }\n\n  async create(userData: CreateUserDto) {\n    const newUser = await this.usersRepository.create(userData);\n    await this.usersRepository.save(newUser);\n    return newUser;\n  }\n\n  async setCurrentRefreshToken(refreshToken: string, userId: number) {\n    const currentHashedRefreshToken = await bcrypt.hash(refreshToken, 10);\n    await this.usersRepository.update(userId, {\n      currentHashedRefreshToken,\n    });\n  }\n\n  async getUserIfRefreshTokenMatches(refreshToken: string, userId: number) {\n    const user = await this.getById(userId);\n\n    const isRefreshTokenMatching = await bcrypt.compare(\n      refreshToken,\n      user.currentHashedRefreshToken.toString(),\n    );\n\n    if (isRefreshTokenMatching) {\n      return user;\n    }\n  }\n\n  async removeRefreshToken(userId: number) {\n    return this.usersRepository.update(userId, {\n      currentHashedRefreshToken: null,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/authentication/authentication.controller.ts\n            \n            controller\n            AuthenticationController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/authentication/authentication.service.ts\n            \n            injectable\n            AuthenticationService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/authentication/dto/login.dto.ts\n            \n            class\n            LogInDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/dto/register.dto.ts\n            \n            class\n            RegisterDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/authentication/guards/jwt-authentication.guard.ts\n            \n            injectable\n            JwtAuthenticationGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/guards/jwt-refresh.guard.ts\n            \n            injectable\n            JwtRefreshGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/guards/localAuthentication.guard.ts\n            \n            injectable\n            LocalAuthenticationGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/interface/requestWithUser.interface.ts\n            \n            interface\n            RequestWithUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/authentication/interface/tokenPayload.interface.ts\n            \n            interface\n            TokenPayload\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/authentication/strategy/jwt-refresh-token.strategy.ts\n            \n            injectable\n            JwtRefreshTokenStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/strategy/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/strategy/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/movie/dto/create-movie.dto.ts\n            \n            class\n            CreateMovieDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/movie/dto/update-movie.dto.ts\n            \n            class\n            UpdateMovieDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/movie/entities/movie.entity.ts\n            \n            entity\n            Movie\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/movie/movie.controller.ts\n            \n            controller\n            MovieController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/movie/movie.service.ts\n            \n            injectable\n            MovieService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/8)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.19\n        \n            @hapi/joi : ^17.1.1\n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^9.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/swagger : ^6.1.1\n        \n            @nestjs/typeorm : ^9.0.1\n        \n            @types/bcrypt : ^5.0.0\n        \n            @types/hapi__joi : ^17.1.8\n        \n            @types/passport-jwt : ^3.0.6\n        \n            @types/passport-local : ^1.0.34\n        \n            bcrypt : ^5.0.1\n        \n            cache-manager : ^4.1.0\n        \n            cache-manager-redis-store : ^2.0.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            cookie : ^0.5.0\n        \n            cookie-parser : ^1.4.6\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            pg : ^8.8.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            typeorm : ^0.3.9\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PostgresErrorCode   (src/.../postgresErrorCodes.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/database/postgresErrorCodes.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostgresErrorCode\n                    \n                \n                        \n                            \n                                 UniqueViolation\n                            \n                        \n                        \n                            \n                                Value : 23505\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n   My LinkedIn Profile\n Check project estructure   \n\n  NestJS is a progressive Node.js framework for building efficient and scalable server-side applications.\n  \n Checck API details here after starting project\nDescription\nThis repository is created to solve the backend problem to MKS Developer,\nUsing Techs like:\nTypeScript\nTypeORM\nSWAGGER\nPOSTGRESQL\nPGADMIN\nDOCKER\nDOCKER-COMPOSE\nREDIS\nExpress Framework\nNestJS\nAzure DeployDocker Installion (RECOMMENDED)\nIf you do not have Docker neither docker-compose you can follow this steps:\n\nWindows with WSL\nLinux\n\nDocker makes the setup easier\n$ docker-compose build # THIS WILL BUILD THE CONTAINER\n$ docker-compose up # THIS WILL EXPOSE THE APPLICATION \n$ docker-compose down # THIS WILL KILL THE APPLICATIONLocal Installation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:cov\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthenticationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MovieModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthenticationModule\n\n\n\ncluster_AuthenticationModule_providers\n\n\n\ncluster_MovieModule\n\n\n\ncluster_MovieModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthenticationModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nMovieModule\n\nMovieModule\n\nAppModule -->\n\nMovieModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthenticationModule -->\n\nUsersModule->AuthenticationModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nAuthenticationModule -->\n\nAuthenticationService->AuthenticationModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthenticationModule -->\n\nJwtStrategy->AuthenticationModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthenticationModule -->\n\nLocalStrategy->AuthenticationModule\n\n\n\n\n\nMovieService\n\nMovieService\n\nMovieModule -->\n\nMovieService->MovieModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    2 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    9 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    6 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : Backend API solution to developer job\n        \n            License : UNLICENSED\n        \n            Author : Rafael Nilson Witt\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
